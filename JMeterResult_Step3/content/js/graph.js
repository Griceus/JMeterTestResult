/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 10348.0, "series": [{"data": [[0.0, 37.0], [0.1, 40.0], [0.2, 40.0], [0.3, 41.0], [0.4, 41.0], [0.5, 42.0], [0.6, 43.0], [0.7, 43.0], [0.8, 44.0], [0.9, 44.0], [1.0, 44.0], [1.1, 45.0], [1.2, 46.0], [1.3, 46.0], [1.4, 46.0], [1.5, 47.0], [1.6, 47.0], [1.7, 47.0], [1.8, 48.0], [1.9, 49.0], [2.0, 50.0], [2.1, 50.0], [2.2, 50.0], [2.3, 51.0], [2.4, 51.0], [2.5, 52.0], [2.6, 52.0], [2.7, 52.0], [2.8, 53.0], [2.9, 53.0], [3.0, 53.0], [3.1, 54.0], [3.2, 55.0], [3.3, 56.0], [3.4, 57.0], [3.5, 58.0], [3.6, 59.0], [3.7, 61.0], [3.8, 65.0], [3.9, 76.0], [4.0, 80.0], [4.1, 87.0], [4.2, 89.0], [4.3, 90.0], [4.4, 91.0], [4.5, 93.0], [4.6, 94.0], [4.7, 95.0], [4.8, 96.0], [4.9, 97.0], [5.0, 98.0], [5.1, 99.0], [5.2, 99.0], [5.3, 101.0], [5.4, 102.0], [5.5, 102.0], [5.6, 103.0], [5.7, 104.0], [5.8, 105.0], [5.9, 106.0], [6.0, 108.0], [6.1, 109.0], [6.2, 111.0], [6.3, 112.0], [6.4, 113.0], [6.5, 114.0], [6.6, 116.0], [6.7, 116.0], [6.8, 116.0], [6.9, 117.0], [7.0, 117.0], [7.1, 118.0], [7.2, 119.0], [7.3, 120.0], [7.4, 122.0], [7.5, 122.0], [7.6, 123.0], [7.7, 124.0], [7.8, 125.0], [7.9, 127.0], [8.0, 127.0], [8.1, 128.0], [8.2, 129.0], [8.3, 130.0], [8.4, 131.0], [8.5, 132.0], [8.6, 133.0], [8.7, 135.0], [8.8, 136.0], [8.9, 138.0], [9.0, 140.0], [9.1, 143.0], [9.2, 144.0], [9.3, 145.0], [9.4, 148.0], [9.5, 149.0], [9.6, 150.0], [9.7, 150.0], [9.8, 153.0], [9.9, 154.0], [10.0, 155.0], [10.1, 156.0], [10.2, 157.0], [10.3, 158.0], [10.4, 162.0], [10.5, 163.0], [10.6, 165.0], [10.7, 166.0], [10.8, 168.0], [10.9, 170.0], [11.0, 172.0], [11.1, 175.0], [11.2, 178.0], [11.3, 178.0], [11.4, 180.0], [11.5, 184.0], [11.6, 184.0], [11.7, 187.0], [11.8, 188.0], [11.9, 189.0], [12.0, 191.0], [12.1, 192.0], [12.2, 194.0], [12.3, 195.0], [12.4, 196.0], [12.5, 198.0], [12.6, 200.0], [12.7, 201.0], [12.8, 201.0], [12.9, 202.0], [13.0, 203.0], [13.1, 205.0], [13.2, 205.0], [13.3, 206.0], [13.4, 207.0], [13.5, 208.0], [13.6, 209.0], [13.7, 210.0], [13.8, 211.0], [13.9, 211.0], [14.0, 212.0], [14.1, 212.0], [14.2, 213.0], [14.3, 213.0], [14.4, 215.0], [14.5, 215.0], [14.6, 215.0], [14.7, 216.0], [14.8, 216.0], [14.9, 217.0], [15.0, 217.0], [15.1, 217.0], [15.2, 218.0], [15.3, 218.0], [15.4, 219.0], [15.5, 219.0], [15.6, 219.0], [15.7, 220.0], [15.8, 220.0], [15.9, 221.0], [16.0, 221.0], [16.1, 221.0], [16.2, 221.0], [16.3, 221.0], [16.4, 221.0], [16.5, 222.0], [16.6, 222.0], [16.7, 222.0], [16.8, 222.0], [16.9, 222.0], [17.0, 222.0], [17.1, 223.0], [17.2, 223.0], [17.3, 223.0], [17.4, 223.0], [17.5, 223.0], [17.6, 224.0], [17.7, 224.0], [17.8, 224.0], [17.9, 224.0], [18.0, 225.0], [18.1, 225.0], [18.2, 225.0], [18.3, 226.0], [18.4, 226.0], [18.5, 227.0], [18.6, 227.0], [18.7, 227.0], [18.8, 228.0], [18.9, 228.0], [19.0, 228.0], [19.1, 229.0], [19.2, 229.0], [19.3, 230.0], [19.4, 230.0], [19.5, 230.0], [19.6, 231.0], [19.7, 231.0], [19.8, 231.0], [19.9, 231.0], [20.0, 232.0], [20.1, 232.0], [20.2, 233.0], [20.3, 233.0], [20.4, 234.0], [20.5, 234.0], [20.6, 235.0], [20.7, 235.0], [20.8, 236.0], [20.9, 236.0], [21.0, 237.0], [21.1, 237.0], [21.2, 238.0], [21.3, 238.0], [21.4, 238.0], [21.5, 238.0], [21.6, 239.0], [21.7, 240.0], [21.8, 240.0], [21.9, 241.0], [22.0, 241.0], [22.1, 242.0], [22.2, 242.0], [22.3, 242.0], [22.4, 243.0], [22.5, 243.0], [22.6, 243.0], [22.7, 244.0], [22.8, 244.0], [22.9, 245.0], [23.0, 245.0], [23.1, 246.0], [23.2, 247.0], [23.3, 247.0], [23.4, 248.0], [23.5, 249.0], [23.6, 249.0], [23.7, 250.0], [23.8, 251.0], [23.9, 251.0], [24.0, 252.0], [24.1, 252.0], [24.2, 253.0], [24.3, 253.0], [24.4, 254.0], [24.5, 255.0], [24.6, 256.0], [24.7, 257.0], [24.8, 257.0], [24.9, 258.0], [25.0, 259.0], [25.1, 262.0], [25.2, 264.0], [25.3, 264.0], [25.4, 266.0], [25.5, 267.0], [25.6, 268.0], [25.7, 268.0], [25.8, 269.0], [25.9, 270.0], [26.0, 273.0], [26.1, 275.0], [26.2, 278.0], [26.3, 279.0], [26.4, 279.0], [26.5, 281.0], [26.6, 283.0], [26.7, 285.0], [26.8, 286.0], [26.9, 288.0], [27.0, 290.0], [27.1, 291.0], [27.2, 293.0], [27.3, 296.0], [27.4, 297.0], [27.5, 298.0], [27.6, 299.0], [27.7, 301.0], [27.8, 302.0], [27.9, 303.0], [28.0, 304.0], [28.1, 306.0], [28.2, 307.0], [28.3, 310.0], [28.4, 311.0], [28.5, 317.0], [28.6, 317.0], [28.7, 318.0], [28.8, 320.0], [28.9, 323.0], [29.0, 327.0], [29.1, 328.0], [29.2, 330.0], [29.3, 333.0], [29.4, 334.0], [29.5, 336.0], [29.6, 337.0], [29.7, 339.0], [29.8, 341.0], [29.9, 342.0], [30.0, 343.0], [30.1, 344.0], [30.2, 345.0], [30.3, 349.0], [30.4, 350.0], [30.5, 351.0], [30.6, 352.0], [30.7, 352.0], [30.8, 353.0], [30.9, 355.0], [31.0, 356.0], [31.1, 357.0], [31.2, 359.0], [31.3, 360.0], [31.4, 362.0], [31.5, 364.0], [31.6, 367.0], [31.7, 370.0], [31.8, 371.0], [31.9, 373.0], [32.0, 374.0], [32.1, 375.0], [32.2, 378.0], [32.3, 379.0], [32.4, 381.0], [32.5, 383.0], [32.6, 386.0], [32.7, 387.0], [32.8, 388.0], [32.9, 389.0], [33.0, 390.0], [33.1, 392.0], [33.2, 392.0], [33.3, 394.0], [33.4, 395.0], [33.5, 396.0], [33.6, 397.0], [33.7, 398.0], [33.8, 400.0], [33.9, 401.0], [34.0, 402.0], [34.1, 404.0], [34.2, 405.0], [34.3, 406.0], [34.4, 407.0], [34.5, 409.0], [34.6, 409.0], [34.7, 411.0], [34.8, 415.0], [34.9, 416.0], [35.0, 418.0], [35.1, 422.0], [35.2, 425.0], [35.3, 427.0], [35.4, 434.0], [35.5, 434.0], [35.6, 437.0], [35.7, 438.0], [35.8, 444.0], [35.9, 448.0], [36.0, 458.0], [36.1, 461.0], [36.2, 466.0], [36.3, 468.0], [36.4, 471.0], [36.5, 472.0], [36.6, 475.0], [36.7, 479.0], [36.8, 482.0], [36.9, 484.0], [37.0, 486.0], [37.1, 488.0], [37.2, 491.0], [37.3, 493.0], [37.4, 496.0], [37.5, 497.0], [37.6, 501.0], [37.7, 503.0], [37.8, 506.0], [37.9, 507.0], [38.0, 511.0], [38.1, 515.0], [38.2, 518.0], [38.3, 523.0], [38.4, 530.0], [38.5, 532.0], [38.6, 536.0], [38.7, 539.0], [38.8, 541.0], [38.9, 543.0], [39.0, 548.0], [39.1, 554.0], [39.2, 556.0], [39.3, 561.0], [39.4, 564.0], [39.5, 570.0], [39.6, 575.0], [39.7, 577.0], [39.8, 578.0], [39.9, 582.0], [40.0, 586.0], [40.1, 588.0], [40.2, 597.0], [40.3, 598.0], [40.4, 599.0], [40.5, 608.0], [40.6, 612.0], [40.7, 613.0], [40.8, 614.0], [40.9, 617.0], [41.0, 619.0], [41.1, 620.0], [41.2, 621.0], [41.3, 623.0], [41.4, 624.0], [41.5, 627.0], [41.6, 632.0], [41.7, 634.0], [41.8, 638.0], [41.9, 643.0], [42.0, 650.0], [42.1, 652.0], [42.2, 659.0], [42.3, 662.0], [42.4, 666.0], [42.5, 668.0], [42.6, 672.0], [42.7, 673.0], [42.8, 676.0], [42.9, 677.0], [43.0, 678.0], [43.1, 679.0], [43.2, 685.0], [43.3, 687.0], [43.4, 690.0], [43.5, 692.0], [43.6, 693.0], [43.7, 695.0], [43.8, 698.0], [43.9, 700.0], [44.0, 701.0], [44.1, 703.0], [44.2, 704.0], [44.3, 705.0], [44.4, 707.0], [44.5, 708.0], [44.6, 708.0], [44.7, 710.0], [44.8, 713.0], [44.9, 718.0], [45.0, 720.0], [45.1, 721.0], [45.2, 722.0], [45.3, 725.0], [45.4, 726.0], [45.5, 731.0], [45.6, 736.0], [45.7, 738.0], [45.8, 739.0], [45.9, 741.0], [46.0, 742.0], [46.1, 744.0], [46.2, 745.0], [46.3, 746.0], [46.4, 747.0], [46.5, 748.0], [46.6, 751.0], [46.7, 751.0], [46.8, 754.0], [46.9, 755.0], [47.0, 757.0], [47.1, 758.0], [47.2, 760.0], [47.3, 766.0], [47.4, 771.0], [47.5, 775.0], [47.6, 776.0], [47.7, 777.0], [47.8, 778.0], [47.9, 783.0], [48.0, 789.0], [48.1, 791.0], [48.2, 796.0], [48.3, 800.0], [48.4, 801.0], [48.5, 801.0], [48.6, 802.0], [48.7, 803.0], [48.8, 803.0], [48.9, 804.0], [49.0, 806.0], [49.1, 807.0], [49.2, 808.0], [49.3, 810.0], [49.4, 814.0], [49.5, 821.0], [49.6, 825.0], [49.7, 826.0], [49.8, 829.0], [49.9, 833.0], [50.0, 835.0], [50.1, 836.0], [50.2, 839.0], [50.3, 843.0], [50.4, 848.0], [50.5, 849.0], [50.6, 852.0], [50.7, 855.0], [50.8, 856.0], [50.9, 858.0], [51.0, 860.0], [51.1, 862.0], [51.2, 862.0], [51.3, 864.0], [51.4, 868.0], [51.5, 870.0], [51.6, 875.0], [51.7, 880.0], [51.8, 885.0], [51.9, 895.0], [52.0, 902.0], [52.1, 907.0], [52.2, 915.0], [52.3, 919.0], [52.4, 923.0], [52.5, 926.0], [52.6, 929.0], [52.7, 933.0], [52.8, 941.0], [52.9, 953.0], [53.0, 1085.0], [53.1, 1630.0], [53.2, 1709.0], [53.3, 1740.0], [53.4, 1782.0], [53.5, 1840.0], [53.6, 1864.0], [53.7, 1879.0], [53.8, 1902.0], [53.9, 1920.0], [54.0, 1948.0], [54.1, 1976.0], [54.2, 1993.0], [54.3, 2004.0], [54.4, 2038.0], [54.5, 2041.0], [54.6, 2044.0], [54.7, 2054.0], [54.8, 2087.0], [54.9, 2103.0], [55.0, 2128.0], [55.1, 2152.0], [55.2, 2162.0], [55.3, 2194.0], [55.4, 2213.0], [55.5, 2238.0], [55.6, 2260.0], [55.7, 2280.0], [55.8, 2289.0], [55.9, 2320.0], [56.0, 2338.0], [56.1, 2349.0], [56.2, 2376.0], [56.3, 2386.0], [56.4, 2422.0], [56.5, 2443.0], [56.6, 2448.0], [56.7, 2473.0], [56.8, 2488.0], [56.9, 2498.0], [57.0, 2508.0], [57.1, 2530.0], [57.2, 2545.0], [57.3, 2568.0], [57.4, 2578.0], [57.5, 2582.0], [57.6, 2594.0], [57.7, 2604.0], [57.8, 2614.0], [57.9, 2628.0], [58.0, 2648.0], [58.1, 2651.0], [58.2, 2672.0], [58.3, 2682.0], [58.4, 2685.0], [58.5, 2692.0], [58.6, 2696.0], [58.7, 2703.0], [58.8, 2708.0], [58.9, 2728.0], [59.0, 2750.0], [59.1, 2774.0], [59.2, 2796.0], [59.3, 2825.0], [59.4, 2836.0], [59.5, 2848.0], [59.6, 2859.0], [59.7, 2876.0], [59.8, 2886.0], [59.9, 2895.0], [60.0, 2903.0], [60.1, 2921.0], [60.2, 2932.0], [60.3, 2956.0], [60.4, 2969.0], [60.5, 2972.0], [60.6, 2994.0], [60.7, 2998.0], [60.8, 3014.0], [60.9, 3034.0], [61.0, 3042.0], [61.1, 3044.0], [61.2, 3056.0], [61.3, 3064.0], [61.4, 3075.0], [61.5, 3089.0], [61.6, 3106.0], [61.7, 3124.0], [61.8, 3138.0], [61.9, 3142.0], [62.0, 3165.0], [62.1, 3178.0], [62.2, 3194.0], [62.3, 3211.0], [62.4, 3227.0], [62.5, 3231.0], [62.6, 3235.0], [62.7, 3248.0], [62.8, 3255.0], [62.9, 3267.0], [63.0, 3293.0], [63.1, 3302.0], [63.2, 3337.0], [63.3, 3345.0], [63.4, 3358.0], [63.5, 3382.0], [63.6, 3410.0], [63.7, 3424.0], [63.8, 3449.0], [63.9, 3463.0], [64.0, 3469.0], [64.1, 3481.0], [64.2, 3490.0], [64.3, 3512.0], [64.4, 3562.0], [64.5, 3577.0], [64.6, 3592.0], [64.7, 3621.0], [64.8, 3630.0], [64.9, 3657.0], [65.0, 3668.0], [65.1, 3688.0], [65.2, 3702.0], [65.3, 3713.0], [65.4, 3735.0], [65.5, 3747.0], [65.6, 3761.0], [65.7, 3770.0], [65.8, 3783.0], [65.9, 3799.0], [66.0, 3818.0], [66.1, 3851.0], [66.2, 3867.0], [66.3, 3887.0], [66.4, 3915.0], [66.5, 3928.0], [66.6, 3951.0], [66.7, 3966.0], [66.8, 3986.0], [66.9, 4014.0], [67.0, 4046.0], [67.1, 4049.0], [67.2, 4052.0], [67.3, 4053.0], [67.4, 4056.0], [67.5, 4057.0], [67.6, 4058.0], [67.7, 4059.0], [67.8, 4060.0], [67.9, 4060.0], [68.0, 4061.0], [68.1, 4061.0], [68.2, 4062.0], [68.3, 4063.0], [68.4, 4065.0], [68.5, 4066.0], [68.6, 4068.0], [68.7, 4069.0], [68.8, 4070.0], [68.9, 4070.0], [69.0, 4071.0], [69.1, 4072.0], [69.2, 4072.0], [69.3, 4076.0], [69.4, 4081.0], [69.5, 4084.0], [69.6, 4086.0], [69.7, 4095.0], [69.8, 4105.0], [69.9, 4118.0], [70.0, 4121.0], [70.1, 4123.0], [70.2, 4123.0], [70.3, 4124.0], [70.4, 4126.0], [70.5, 4126.0], [70.6, 4144.0], [70.7, 4173.0], [70.8, 4204.0], [70.9, 4231.0], [71.0, 4255.0], [71.1, 4294.0], [71.2, 4357.0], [71.3, 4396.0], [71.4, 4474.0], [71.5, 4509.0], [71.6, 4540.0], [71.7, 4549.0], [71.8, 4577.0], [71.9, 4606.0], [72.0, 4643.0], [72.1, 4679.0], [72.2, 4719.0], [72.3, 4758.0], [72.4, 4813.0], [72.5, 4852.0], [72.6, 4877.0], [72.7, 4913.0], [72.8, 4955.0], [72.9, 5004.0], [73.0, 5028.0], [73.1, 5045.0], [73.2, 5046.0], [73.3, 5048.0], [73.4, 5048.0], [73.5, 5049.0], [73.6, 5049.0], [73.7, 5049.0], [73.8, 5050.0], [73.9, 5051.0], [74.0, 5052.0], [74.1, 5052.0], [74.2, 5053.0], [74.3, 5053.0], [74.4, 5053.0], [74.5, 5054.0], [74.6, 5054.0], [74.7, 5055.0], [74.8, 5055.0], [74.9, 5055.0], [75.0, 5056.0], [75.1, 5056.0], [75.2, 5056.0], [75.3, 5057.0], [75.4, 5057.0], [75.5, 5058.0], [75.6, 5059.0], [75.7, 5059.0], [75.8, 5059.0], [75.9, 5060.0], [76.0, 5060.0], [76.1, 5061.0], [76.2, 5061.0], [76.3, 5061.0], [76.4, 5062.0], [76.5, 5062.0], [76.6, 5063.0], [76.7, 5063.0], [76.8, 5064.0], [76.9, 5064.0], [77.0, 5064.0], [77.1, 5064.0], [77.2, 5065.0], [77.3, 5065.0], [77.4, 5065.0], [77.5, 5065.0], [77.6, 5066.0], [77.7, 5066.0], [77.8, 5066.0], [77.9, 5066.0], [78.0, 5066.0], [78.1, 5067.0], [78.2, 5067.0], [78.3, 5067.0], [78.4, 5067.0], [78.5, 5068.0], [78.6, 5068.0], [78.7, 5068.0], [78.8, 5069.0], [78.9, 5069.0], [79.0, 5069.0], [79.1, 5070.0], [79.2, 5070.0], [79.3, 5070.0], [79.4, 5071.0], [79.5, 5071.0], [79.6, 5071.0], [79.7, 5072.0], [79.8, 5072.0], [79.9, 5072.0], [80.0, 5072.0], [80.1, 5073.0], [80.2, 5073.0], [80.3, 5073.0], [80.4, 5074.0], [80.5, 5074.0], [80.6, 5075.0], [80.7, 5076.0], [80.8, 5077.0], [80.9, 5078.0], [81.0, 5079.0], [81.1, 5079.0], [81.2, 5080.0], [81.3, 5080.0], [81.4, 5080.0], [81.5, 5080.0], [81.6, 5081.0], [81.7, 5082.0], [81.8, 5083.0], [81.9, 5083.0], [82.0, 5083.0], [82.1, 5083.0], [82.2, 5083.0], [82.3, 5084.0], [82.4, 5084.0], [82.5, 5085.0], [82.6, 5085.0], [82.7, 5086.0], [82.8, 5086.0], [82.9, 5086.0], [83.0, 5087.0], [83.1, 5087.0], [83.2, 5088.0], [83.3, 5089.0], [83.4, 5089.0], [83.5, 5089.0], [83.6, 5090.0], [83.7, 5090.0], [83.8, 5091.0], [83.9, 5091.0], [84.0, 5092.0], [84.1, 5092.0], [84.2, 5093.0], [84.3, 5093.0], [84.4, 5094.0], [84.5, 5094.0], [84.6, 5095.0], [84.7, 5097.0], [84.8, 5097.0], [84.9, 5098.0], [85.0, 5100.0], [85.1, 5102.0], [85.2, 5103.0], [85.3, 5104.0], [85.4, 5104.0], [85.5, 5105.0], [85.6, 5107.0], [85.7, 5108.0], [85.8, 5108.0], [85.9, 5110.0], [86.0, 5111.0], [86.1, 5112.0], [86.2, 5114.0], [86.3, 5116.0], [86.4, 5117.0], [86.5, 5117.0], [86.6, 5119.0], [86.7, 5121.0], [86.8, 5122.0], [86.9, 5123.0], [87.0, 5123.0], [87.1, 5124.0], [87.2, 5125.0], [87.3, 5125.0], [87.4, 5126.0], [87.5, 5127.0], [87.6, 5128.0], [87.7, 5129.0], [87.8, 5129.0], [87.9, 5130.0], [88.0, 5130.0], [88.1, 5131.0], [88.2, 5132.0], [88.3, 5133.0], [88.4, 5133.0], [88.5, 5134.0], [88.6, 5135.0], [88.7, 5137.0], [88.8, 5138.0], [88.9, 5139.0], [89.0, 5143.0], [89.1, 5151.0], [89.2, 5154.0], [89.3, 5157.0], [89.4, 5159.0], [89.5, 5161.0], [89.6, 5166.0], [89.7, 5167.0], [89.8, 5171.0], [89.9, 5175.0], [90.0, 5181.0], [90.1, 5187.0], [90.2, 5192.0], [90.3, 5205.0], [90.4, 5212.0], [90.5, 5220.0], [90.6, 5235.0], [90.7, 5241.0], [90.8, 5260.0], [90.9, 5297.0], [91.0, 5312.0], [91.1, 5347.0], [91.2, 5354.0], [91.3, 5362.0], [91.4, 5370.0], [91.5, 5438.0], [91.6, 5439.0], [91.7, 5444.0], [91.8, 5451.0], [91.9, 5546.0], [92.0, 5637.0], [92.1, 5691.0], [92.2, 5781.0], [92.3, 5968.0], [92.4, 6053.0], [92.5, 6075.0], [92.6, 6148.0], [92.7, 6196.0], [92.8, 6276.0], [92.9, 6396.0], [93.0, 6509.0], [93.1, 6765.0], [93.2, 7008.0], [93.3, 7052.0], [93.4, 7058.0], [93.5, 7067.0], [93.6, 7077.0], [93.7, 7078.0], [93.8, 7080.0], [93.9, 7085.0], [94.0, 7086.0], [94.1, 7101.0], [94.2, 7112.0], [94.3, 7141.0], [94.4, 7149.0], [94.5, 7154.0], [94.6, 7154.0], [94.7, 7156.0], [94.8, 7158.0], [94.9, 7161.0], [95.0, 7165.0], [95.1, 7167.0], [95.2, 7170.0], [95.3, 7182.0], [95.4, 7186.0], [95.5, 7212.0], [95.6, 7227.0], [95.7, 7241.0], [95.8, 7249.0], [95.9, 7249.0], [96.0, 7251.0], [96.1, 7261.0], [96.2, 7272.0], [96.3, 7304.0], [96.4, 7305.0], [96.5, 7307.0], [96.6, 7308.0], [96.7, 7342.0], [96.8, 7344.0], [96.9, 7354.0], [97.0, 7369.0], [97.1, 7381.0], [97.2, 7395.0], [97.3, 7396.0], [97.4, 7410.0], [97.5, 7434.0], [97.6, 7458.0], [97.7, 7477.0], [97.8, 7481.0], [97.9, 7482.0], [98.0, 7508.0], [98.1, 7534.0], [98.2, 7570.0], [98.3, 9121.0], [98.4, 9225.0], [98.5, 9766.0], [98.6, 9839.0], [98.7, 9939.0], [98.8, 10004.0], [98.9, 10008.0], [99.0, 10012.0], [99.1, 10024.0], [99.2, 10027.0], [99.3, 10029.0], [99.4, 10030.0], [99.5, 10031.0], [99.6, 10031.0], [99.7, 10322.0], [99.8, 10324.0], [99.9, 10327.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[0.0, 2.0], [0.1, 18.0], [0.2, 19.0], [0.3, 19.0], [0.4, 19.0], [0.5, 19.0], [0.6, 19.0], [0.7, 19.0], [0.8, 19.0], [0.9, 20.0], [1.0, 20.0], [1.1, 20.0], [1.2, 20.0], [1.3, 20.0], [1.4, 20.0], [1.5, 20.0], [1.6, 20.0], [1.7, 20.0], [1.8, 20.0], [1.9, 20.0], [2.0, 20.0], [2.1, 20.0], [2.2, 20.0], [2.3, 20.0], [2.4, 20.0], [2.5, 20.0], [2.6, 20.0], [2.7, 20.0], [2.8, 20.0], [2.9, 20.0], [3.0, 20.0], [3.1, 20.0], [3.2, 20.0], [3.3, 20.0], [3.4, 20.0], [3.5, 20.0], [3.6, 21.0], [3.7, 21.0], [3.8, 21.0], [3.9, 21.0], [4.0, 21.0], [4.1, 21.0], [4.2, 21.0], [4.3, 21.0], [4.4, 21.0], [4.5, 21.0], [4.6, 21.0], [4.7, 21.0], [4.8, 21.0], [4.9, 21.0], [5.0, 21.0], [5.1, 21.0], [5.2, 21.0], [5.3, 21.0], [5.4, 21.0], [5.5, 21.0], [5.6, 21.0], [5.7, 21.0], [5.8, 21.0], [5.9, 21.0], [6.0, 21.0], [6.1, 21.0], [6.2, 21.0], [6.3, 21.0], [6.4, 21.0], [6.5, 21.0], [6.6, 21.0], [6.7, 21.0], [6.8, 21.0], [6.9, 21.0], [7.0, 22.0], [7.1, 22.0], [7.2, 22.0], [7.3, 22.0], [7.4, 22.0], [7.5, 22.0], [7.6, 22.0], [7.7, 22.0], [7.8, 22.0], [7.9, 22.0], [8.0, 22.0], [8.1, 22.0], [8.2, 22.0], [8.3, 22.0], [8.4, 22.0], [8.5, 22.0], [8.6, 22.0], [8.7, 22.0], [8.8, 22.0], [8.9, 22.0], [9.0, 22.0], [9.1, 22.0], [9.2, 22.0], [9.3, 22.0], [9.4, 22.0], [9.5, 22.0], [9.6, 22.0], [9.7, 22.0], [9.8, 22.0], [9.9, 22.0], [10.0, 22.0], [10.1, 22.0], [10.2, 22.0], [10.3, 22.0], [10.4, 22.0], [10.5, 22.0], [10.6, 22.0], [10.7, 22.0], [10.8, 22.0], [10.9, 22.0], [11.0, 22.0], [11.1, 22.0], [11.2, 23.0], [11.3, 23.0], [11.4, 23.0], [11.5, 23.0], [11.6, 23.0], [11.7, 23.0], [11.8, 23.0], [11.9, 23.0], [12.0, 23.0], [12.1, 23.0], [12.2, 23.0], [12.3, 23.0], [12.4, 23.0], [12.5, 23.0], [12.6, 23.0], [12.7, 23.0], [12.8, 23.0], [12.9, 23.0], [13.0, 23.0], [13.1, 23.0], [13.2, 23.0], [13.3, 23.0], [13.4, 23.0], [13.5, 23.0], [13.6, 23.0], [13.7, 23.0], [13.8, 23.0], [13.9, 23.0], [14.0, 23.0], [14.1, 23.0], [14.2, 23.0], [14.3, 23.0], [14.4, 23.0], [14.5, 23.0], [14.6, 23.0], [14.7, 23.0], [14.8, 23.0], [14.9, 23.0], [15.0, 23.0], [15.1, 23.0], [15.2, 23.0], [15.3, 23.0], [15.4, 24.0], [15.5, 24.0], [15.6, 24.0], [15.7, 24.0], [15.8, 24.0], [15.9, 24.0], [16.0, 24.0], [16.1, 24.0], [16.2, 24.0], [16.3, 24.0], [16.4, 24.0], [16.5, 24.0], [16.6, 24.0], [16.7, 24.0], [16.8, 24.0], [16.9, 24.0], [17.0, 24.0], [17.1, 24.0], [17.2, 24.0], [17.3, 24.0], [17.4, 24.0], [17.5, 24.0], [17.6, 24.0], [17.7, 24.0], [17.8, 24.0], [17.9, 24.0], [18.0, 24.0], [18.1, 24.0], [18.2, 24.0], [18.3, 24.0], [18.4, 24.0], [18.5, 24.0], [18.6, 24.0], [18.7, 24.0], [18.8, 24.0], [18.9, 24.0], [19.0, 24.0], [19.1, 24.0], [19.2, 25.0], [19.3, 25.0], [19.4, 25.0], [19.5, 25.0], [19.6, 25.0], [19.7, 25.0], [19.8, 25.0], [19.9, 25.0], [20.0, 25.0], [20.1, 25.0], [20.2, 25.0], [20.3, 25.0], [20.4, 25.0], [20.5, 25.0], [20.6, 25.0], [20.7, 25.0], [20.8, 25.0], [20.9, 25.0], [21.0, 25.0], [21.1, 25.0], [21.2, 25.0], [21.3, 25.0], [21.4, 25.0], [21.5, 25.0], [21.6, 25.0], [21.7, 25.0], [21.8, 26.0], [21.9, 26.0], [22.0, 26.0], [22.1, 26.0], [22.2, 26.0], [22.3, 26.0], [22.4, 26.0], [22.5, 26.0], [22.6, 26.0], [22.7, 26.0], [22.8, 26.0], [22.9, 26.0], [23.0, 26.0], [23.1, 26.0], [23.2, 26.0], [23.3, 26.0], [23.4, 26.0], [23.5, 26.0], [23.6, 26.0], [23.7, 26.0], [23.8, 26.0], [23.9, 26.0], [24.0, 26.0], [24.1, 26.0], [24.2, 26.0], [24.3, 26.0], [24.4, 26.0], [24.5, 26.0], [24.6, 26.0], [24.7, 26.0], [24.8, 26.0], [24.9, 27.0], [25.0, 27.0], [25.1, 27.0], [25.2, 27.0], [25.3, 27.0], [25.4, 27.0], [25.5, 27.0], [25.6, 27.0], [25.7, 27.0], [25.8, 27.0], [25.9, 27.0], [26.0, 27.0], [26.1, 27.0], [26.2, 27.0], [26.3, 27.0], [26.4, 27.0], [26.5, 27.0], [26.6, 27.0], [26.7, 27.0], [26.8, 27.0], [26.9, 27.0], [27.0, 27.0], [27.1, 27.0], [27.2, 27.0], [27.3, 28.0], [27.4, 28.0], [27.5, 28.0], [27.6, 28.0], [27.7, 28.0], [27.8, 28.0], [27.9, 28.0], [28.0, 28.0], [28.1, 28.0], [28.2, 28.0], [28.3, 28.0], [28.4, 28.0], [28.5, 28.0], [28.6, 28.0], [28.7, 28.0], [28.8, 28.0], [28.9, 28.0], [29.0, 28.0], [29.1, 28.0], [29.2, 28.0], [29.3, 28.0], [29.4, 28.0], [29.5, 29.0], [29.6, 29.0], [29.7, 29.0], [29.8, 29.0], [29.9, 29.0], [30.0, 29.0], [30.1, 29.0], [30.2, 29.0], [30.3, 29.0], [30.4, 29.0], [30.5, 29.0], [30.6, 29.0], [30.7, 29.0], [30.8, 30.0], [30.9, 30.0], [31.0, 30.0], [31.1, 30.0], [31.2, 30.0], [31.3, 30.0], [31.4, 30.0], [31.5, 30.0], [31.6, 30.0], [31.7, 30.0], [31.8, 30.0], [31.9, 30.0], [32.0, 31.0], [32.1, 31.0], [32.2, 31.0], [32.3, 31.0], [32.4, 31.0], [32.5, 31.0], [32.6, 31.0], [32.7, 31.0], [32.8, 31.0], [32.9, 31.0], [33.0, 31.0], [33.1, 31.0], [33.2, 31.0], [33.3, 31.0], [33.4, 31.0], [33.5, 31.0], [33.6, 31.0], [33.7, 31.0], [33.8, 31.0], [33.9, 31.0], [34.0, 31.0], [34.1, 31.0], [34.2, 31.0], [34.3, 31.0], [34.4, 32.0], [34.5, 32.0], [34.6, 32.0], [34.7, 32.0], [34.8, 32.0], [34.9, 32.0], [35.0, 32.0], [35.1, 32.0], [35.2, 32.0], [35.3, 32.0], [35.4, 32.0], [35.5, 32.0], [35.6, 33.0], [35.7, 33.0], [35.8, 33.0], [35.9, 33.0], [36.0, 33.0], [36.1, 33.0], [36.2, 33.0], [36.3, 33.0], [36.4, 33.0], [36.5, 33.0], [36.6, 33.0], [36.7, 33.0], [36.8, 33.0], [36.9, 33.0], [37.0, 33.0], [37.1, 33.0], [37.2, 33.0], [37.3, 33.0], [37.4, 34.0], [37.5, 34.0], [37.6, 34.0], [37.7, 34.0], [37.8, 34.0], [37.9, 34.0], [38.0, 34.0], [38.1, 34.0], [38.2, 34.0], [38.3, 34.0], [38.4, 34.0], [38.5, 34.0], [38.6, 34.0], [38.7, 34.0], [38.8, 35.0], [38.9, 35.0], [39.0, 35.0], [39.1, 35.0], [39.2, 35.0], [39.3, 35.0], [39.4, 36.0], [39.5, 36.0], [39.6, 36.0], [39.7, 36.0], [39.8, 36.0], [39.9, 36.0], [40.0, 36.0], [40.1, 37.0], [40.2, 37.0], [40.3, 37.0], [40.4, 37.0], [40.5, 37.0], [40.6, 37.0], [40.7, 37.0], [40.8, 37.0], [40.9, 37.0], [41.0, 38.0], [41.1, 38.0], [41.2, 38.0], [41.3, 38.0], [41.4, 38.0], [41.5, 38.0], [41.6, 38.0], [41.7, 38.0], [41.8, 38.0], [41.9, 38.0], [42.0, 38.0], [42.1, 39.0], [42.2, 39.0], [42.3, 39.0], [42.4, 39.0], [42.5, 39.0], [42.6, 39.0], [42.7, 39.0], [42.8, 39.0], [42.9, 39.0], [43.0, 39.0], [43.1, 40.0], [43.2, 40.0], [43.3, 40.0], [43.4, 40.0], [43.5, 40.0], [43.6, 40.0], [43.7, 40.0], [43.8, 40.0], [43.9, 41.0], [44.0, 41.0], [44.1, 41.0], [44.2, 41.0], [44.3, 41.0], [44.4, 41.0], [44.5, 41.0], [44.6, 41.0], [44.7, 41.0], [44.8, 41.0], [44.9, 42.0], [45.0, 42.0], [45.1, 42.0], [45.2, 42.0], [45.3, 42.0], [45.4, 42.0], [45.5, 42.0], [45.6, 43.0], [45.7, 43.0], [45.8, 43.0], [45.9, 43.0], [46.0, 43.0], [46.1, 43.0], [46.2, 43.0], [46.3, 43.0], [46.4, 43.0], [46.5, 43.0], [46.6, 43.0], [46.7, 44.0], [46.8, 44.0], [46.9, 44.0], [47.0, 44.0], [47.1, 44.0], [47.2, 44.0], [47.3, 44.0], [47.4, 44.0], [47.5, 44.0], [47.6, 45.0], [47.7, 45.0], [47.8, 45.0], [47.9, 45.0], [48.0, 45.0], [48.1, 45.0], [48.2, 45.0], [48.3, 45.0], [48.4, 46.0], [48.5, 46.0], [48.6, 46.0], [48.7, 46.0], [48.8, 46.0], [48.9, 46.0], [49.0, 46.0], [49.1, 46.0], [49.2, 46.0], [49.3, 47.0], [49.4, 47.0], [49.5, 47.0], [49.6, 48.0], [49.7, 48.0], [49.8, 48.0], [49.9, 48.0], [50.0, 48.0], [50.1, 48.0], [50.2, 49.0], [50.3, 49.0], [50.4, 49.0], [50.5, 50.0], [50.6, 50.0], [50.7, 50.0], [50.8, 50.0], [50.9, 51.0], [51.0, 51.0], [51.1, 51.0], [51.2, 52.0], [51.3, 52.0], [51.4, 53.0], [51.5, 53.0], [51.6, 53.0], [51.7, 54.0], [51.8, 54.0], [51.9, 54.0], [52.0, 55.0], [52.1, 55.0], [52.2, 56.0], [52.3, 56.0], [52.4, 57.0], [52.5, 57.0], [52.6, 58.0], [52.7, 59.0], [52.8, 59.0], [52.9, 59.0], [53.0, 59.0], [53.1, 60.0], [53.2, 60.0], [53.3, 61.0], [53.4, 62.0], [53.5, 62.0], [53.6, 62.0], [53.7, 62.0], [53.8, 62.0], [53.9, 63.0], [54.0, 63.0], [54.1, 63.0], [54.2, 63.0], [54.3, 64.0], [54.4, 64.0], [54.5, 64.0], [54.6, 64.0], [54.7, 64.0], [54.8, 65.0], [54.9, 65.0], [55.0, 65.0], [55.1, 65.0], [55.2, 65.0], [55.3, 65.0], [55.4, 65.0], [55.5, 66.0], [55.6, 66.0], [55.7, 66.0], [55.8, 66.0], [55.9, 66.0], [56.0, 66.0], [56.1, 67.0], [56.2, 67.0], [56.3, 67.0], [56.4, 67.0], [56.5, 67.0], [56.6, 67.0], [56.7, 68.0], [56.8, 68.0], [56.9, 68.0], [57.0, 69.0], [57.1, 70.0], [57.2, 70.0], [57.3, 70.0], [57.4, 70.0], [57.5, 70.0], [57.6, 70.0], [57.7, 70.0], [57.8, 70.0], [57.9, 71.0], [58.0, 71.0], [58.1, 71.0], [58.2, 71.0], [58.3, 71.0], [58.4, 71.0], [58.5, 72.0], [58.6, 72.0], [58.7, 72.0], [58.8, 73.0], [58.9, 73.0], [59.0, 73.0], [59.1, 73.0], [59.2, 73.0], [59.3, 73.0], [59.4, 73.0], [59.5, 74.0], [59.6, 74.0], [59.7, 74.0], [59.8, 74.0], [59.9, 75.0], [60.0, 75.0], [60.1, 75.0], [60.2, 76.0], [60.3, 76.0], [60.4, 77.0], [60.5, 77.0], [60.6, 77.0], [60.7, 78.0], [60.8, 78.0], [60.9, 78.0], [61.0, 78.0], [61.1, 79.0], [61.2, 79.0], [61.3, 80.0], [61.4, 80.0], [61.5, 81.0], [61.6, 81.0], [61.7, 81.0], [61.8, 82.0], [61.9, 82.0], [62.0, 83.0], [62.1, 83.0], [62.2, 84.0], [62.3, 85.0], [62.4, 85.0], [62.5, 85.0], [62.6, 85.0], [62.7, 86.0], [62.8, 87.0], [62.9, 87.0], [63.0, 87.0], [63.1, 87.0], [63.2, 88.0], [63.3, 88.0], [63.4, 89.0], [63.5, 89.0], [63.6, 89.0], [63.7, 89.0], [63.8, 90.0], [63.9, 90.0], [64.0, 90.0], [64.1, 90.0], [64.2, 90.0], [64.3, 91.0], [64.4, 91.0], [64.5, 91.0], [64.6, 91.0], [64.7, 91.0], [64.8, 91.0], [64.9, 92.0], [65.0, 92.0], [65.1, 92.0], [65.2, 92.0], [65.3, 93.0], [65.4, 93.0], [65.5, 93.0], [65.6, 93.0], [65.7, 94.0], [65.8, 94.0], [65.9, 94.0], [66.0, 94.0], [66.1, 94.0], [66.2, 95.0], [66.3, 95.0], [66.4, 95.0], [66.5, 95.0], [66.6, 95.0], [66.7, 96.0], [66.8, 97.0], [66.9, 97.0], [67.0, 97.0], [67.1, 97.0], [67.2, 97.0], [67.3, 98.0], [67.4, 98.0], [67.5, 98.0], [67.6, 99.0], [67.7, 99.0], [67.8, 100.0], [67.9, 100.0], [68.0, 100.0], [68.1, 101.0], [68.2, 102.0], [68.3, 102.0], [68.4, 102.0], [68.5, 102.0], [68.6, 103.0], [68.7, 103.0], [68.8, 104.0], [68.9, 104.0], [69.0, 105.0], [69.1, 106.0], [69.2, 107.0], [69.3, 108.0], [69.4, 110.0], [69.5, 111.0], [69.6, 111.0], [69.7, 111.0], [69.8, 112.0], [69.9, 113.0], [70.0, 114.0], [70.1, 115.0], [70.2, 116.0], [70.3, 117.0], [70.4, 117.0], [70.5, 117.0], [70.6, 118.0], [70.7, 118.0], [70.8, 118.0], [70.9, 119.0], [71.0, 120.0], [71.1, 121.0], [71.2, 121.0], [71.3, 122.0], [71.4, 122.0], [71.5, 123.0], [71.6, 123.0], [71.7, 123.0], [71.8, 124.0], [71.9, 124.0], [72.0, 124.0], [72.1, 125.0], [72.2, 125.0], [72.3, 125.0], [72.4, 125.0], [72.5, 125.0], [72.6, 125.0], [72.7, 125.0], [72.8, 126.0], [72.9, 126.0], [73.0, 126.0], [73.1, 126.0], [73.2, 127.0], [73.3, 128.0], [73.4, 129.0], [73.5, 130.0], [73.6, 131.0], [73.7, 131.0], [73.8, 131.0], [73.9, 131.0], [74.0, 131.0], [74.1, 132.0], [74.2, 132.0], [74.3, 133.0], [74.4, 134.0], [74.5, 134.0], [74.6, 134.0], [74.7, 135.0], [74.8, 135.0], [74.9, 136.0], [75.0, 136.0], [75.1, 136.0], [75.2, 137.0], [75.3, 137.0], [75.4, 137.0], [75.5, 138.0], [75.6, 138.0], [75.7, 138.0], [75.8, 139.0], [75.9, 139.0], [76.0, 139.0], [76.1, 140.0], [76.2, 140.0], [76.3, 140.0], [76.4, 141.0], [76.5, 141.0], [76.6, 141.0], [76.7, 142.0], [76.8, 142.0], [76.9, 142.0], [77.0, 143.0], [77.1, 143.0], [77.2, 144.0], [77.3, 145.0], [77.4, 145.0], [77.5, 146.0], [77.6, 146.0], [77.7, 147.0], [77.8, 147.0], [77.9, 148.0], [78.0, 149.0], [78.1, 151.0], [78.2, 151.0], [78.3, 152.0], [78.4, 152.0], [78.5, 152.0], [78.6, 152.0], [78.7, 153.0], [78.8, 153.0], [78.9, 153.0], [79.0, 154.0], [79.1, 154.0], [79.2, 154.0], [79.3, 155.0], [79.4, 155.0], [79.5, 156.0], [79.6, 156.0], [79.7, 156.0], [79.8, 157.0], [79.9, 159.0], [80.0, 160.0], [80.1, 160.0], [80.2, 160.0], [80.3, 161.0], [80.4, 162.0], [80.5, 163.0], [80.6, 163.0], [80.7, 163.0], [80.8, 163.0], [80.9, 164.0], [81.0, 164.0], [81.1, 164.0], [81.2, 164.0], [81.3, 164.0], [81.4, 164.0], [81.5, 165.0], [81.6, 165.0], [81.7, 165.0], [81.8, 165.0], [81.9, 166.0], [82.0, 166.0], [82.1, 167.0], [82.2, 167.0], [82.3, 169.0], [82.4, 169.0], [82.5, 170.0], [82.6, 172.0], [82.7, 172.0], [82.8, 174.0], [82.9, 174.0], [83.0, 174.0], [83.1, 175.0], [83.2, 175.0], [83.3, 176.0], [83.4, 178.0], [83.5, 178.0], [83.6, 178.0], [83.7, 179.0], [83.8, 179.0], [83.9, 180.0], [84.0, 181.0], [84.1, 181.0], [84.2, 182.0], [84.3, 182.0], [84.4, 185.0], [84.5, 186.0], [84.6, 187.0], [84.7, 188.0], [84.8, 189.0], [84.9, 189.0], [85.0, 191.0], [85.1, 192.0], [85.2, 194.0], [85.3, 198.0], [85.4, 199.0], [85.5, 199.0], [85.6, 201.0], [85.7, 205.0], [85.8, 206.0], [85.9, 213.0], [86.0, 220.0], [86.1, 220.0], [86.2, 224.0], [86.3, 224.0], [86.4, 231.0], [86.5, 232.0], [86.6, 233.0], [86.7, 234.0], [86.8, 234.0], [86.9, 239.0], [87.0, 239.0], [87.1, 240.0], [87.2, 241.0], [87.3, 242.0], [87.4, 242.0], [87.5, 243.0], [87.6, 243.0], [87.7, 244.0], [87.8, 245.0], [87.9, 245.0], [88.0, 246.0], [88.1, 247.0], [88.2, 249.0], [88.3, 249.0], [88.4, 249.0], [88.5, 250.0], [88.6, 250.0], [88.7, 250.0], [88.8, 251.0], [88.9, 253.0], [89.0, 253.0], [89.1, 253.0], [89.2, 254.0], [89.3, 255.0], [89.4, 258.0], [89.5, 264.0], [89.6, 265.0], [89.7, 266.0], [89.8, 267.0], [89.9, 271.0], [90.0, 272.0], [90.1, 273.0], [90.2, 274.0], [90.3, 277.0], [90.4, 277.0], [90.5, 282.0], [90.6, 285.0], [90.7, 286.0], [90.8, 287.0], [90.9, 289.0], [91.0, 291.0], [91.1, 291.0], [91.2, 291.0], [91.3, 292.0], [91.4, 298.0], [91.5, 301.0], [91.6, 305.0], [91.7, 306.0], [91.8, 311.0], [91.9, 312.0], [92.0, 317.0], [92.1, 317.0], [92.2, 321.0], [92.3, 327.0], [92.4, 331.0], [92.5, 336.0], [92.6, 339.0], [92.7, 340.0], [92.8, 341.0], [92.9, 341.0], [93.0, 342.0], [93.1, 343.0], [93.2, 344.0], [93.3, 355.0], [93.4, 358.0], [93.5, 359.0], [93.6, 364.0], [93.7, 366.0], [93.8, 367.0], [93.9, 369.0], [94.0, 375.0], [94.1, 377.0], [94.2, 379.0], [94.3, 381.0], [94.4, 381.0], [94.5, 381.0], [94.6, 382.0], [94.7, 382.0], [94.8, 383.0], [94.9, 384.0], [95.0, 384.0], [95.1, 385.0], [95.2, 385.0], [95.3, 386.0], [95.4, 387.0], [95.5, 388.0], [95.6, 392.0], [95.7, 392.0], [95.8, 410.0], [95.9, 411.0], [96.0, 420.0], [96.1, 421.0], [96.2, 421.0], [96.3, 421.0], [96.4, 432.0], [96.5, 432.0], [96.6, 433.0], [96.7, 437.0], [96.8, 447.0], [96.9, 465.0], [97.0, 472.0], [97.1, 473.0], [97.2, 475.0], [97.3, 475.0], [97.4, 479.0], [97.5, 480.0], [97.6, 485.0], [97.7, 489.0], [97.8, 495.0], [97.9, 498.0], [98.0, 498.0], [98.1, 499.0], [98.2, 499.0], [98.3, 510.0], [98.4, 517.0], [98.5, 519.0], [98.6, 519.0], [98.7, 526.0], [98.8, 529.0], [98.9, 536.0], [99.0, 537.0], [99.1, 540.0], [99.2, 553.0], [99.3, 555.0], [99.4, 556.0], [99.5, 559.0], [99.6, 563.0], [99.7, 568.0], [99.8, 569.0], [99.9, 570.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 0.0], [40.1, 0.0], [40.2, 0.0], [40.3, 0.0], [40.4, 0.0], [40.5, 0.0], [40.6, 0.0], [40.7, 0.0], [40.8, 0.0], [40.9, 0.0], [41.0, 0.0], [41.1, 0.0], [41.2, 0.0], [41.3, 0.0], [41.4, 0.0], [41.5, 0.0], [41.6, 0.0], [41.7, 0.0], [41.8, 0.0], [41.9, 0.0], [42.0, 0.0], [42.1, 0.0], [42.2, 0.0], [42.3, 0.0], [42.4, 0.0], [42.5, 0.0], [42.6, 0.0], [42.7, 0.0], [42.8, 0.0], [42.9, 0.0], [43.0, 0.0], [43.1, 0.0], [43.2, 0.0], [43.3, 0.0], [43.4, 0.0], [43.5, 0.0], [43.6, 0.0], [43.7, 0.0], [43.8, 0.0], [43.9, 0.0], [44.0, 0.0], [44.1, 0.0], [44.2, 0.0], [44.3, 0.0], [44.4, 0.0], [44.5, 0.0], [44.6, 0.0], [44.7, 0.0], [44.8, 0.0], [44.9, 0.0], [45.0, 0.0], [45.1, 0.0], [45.2, 0.0], [45.3, 0.0], [45.4, 0.0], [45.5, 0.0], [45.6, 0.0], [45.7, 0.0], [45.8, 0.0], [45.9, 0.0], [46.0, 0.0], [46.1, 0.0], [46.2, 0.0], [46.3, 0.0], [46.4, 0.0], [46.5, 0.0], [46.6, 0.0], [46.7, 0.0], [46.8, 0.0], [46.9, 0.0], [47.0, 0.0], [47.1, 0.0], [47.2, 0.0], [47.3, 0.0], [47.4, 0.0], [47.5, 0.0], [47.6, 0.0], [47.7, 0.0], [47.8, 0.0], [47.9, 0.0], [48.0, 0.0], [48.1, 0.0], [48.2, 0.0], [48.3, 0.0], [48.4, 0.0], [48.5, 0.0], [48.6, 0.0], [48.7, 0.0], [48.8, 0.0], [48.9, 0.0], [49.0, 0.0], [49.1, 0.0], [49.2, 0.0], [49.3, 0.0], [49.4, 0.0], [49.5, 0.0], [49.6, 0.0], [49.7, 0.0], [49.8, 0.0], [49.9, 0.0], [50.0, 0.0], [50.1, 0.0], [50.2, 0.0], [50.3, 0.0], [50.4, 0.0], [50.5, 0.0], [50.6, 0.0], [50.7, 0.0], [50.8, 0.0], [50.9, 0.0], [51.0, 0.0], [51.1, 0.0], [51.2, 0.0], [51.3, 0.0], [51.4, 0.0], [51.5, 0.0], [51.6, 0.0], [51.7, 0.0], [51.8, 0.0], [51.9, 0.0], [52.0, 0.0], [52.1, 0.0], [52.2, 0.0], [52.3, 0.0], [52.4, 0.0], [52.5, 0.0], [52.6, 0.0], [52.7, 0.0], [52.8, 0.0], [52.9, 0.0], [53.0, 0.0], [53.1, 0.0], [53.2, 0.0], [53.3, 0.0], [53.4, 0.0], [53.5, 0.0], [53.6, 0.0], [53.7, 0.0], [53.8, 0.0], [53.9, 0.0], [54.0, 0.0], [54.1, 0.0], [54.2, 0.0], [54.3, 0.0], [54.4, 0.0], [54.5, 0.0], [54.6, 0.0], [54.7, 0.0], [54.8, 0.0], [54.9, 0.0], [55.0, 0.0], [55.1, 0.0], [55.2, 0.0], [55.3, 0.0], [55.4, 0.0], [55.5, 0.0], [55.6, 0.0], [55.7, 0.0], [55.8, 0.0], [55.9, 0.0], [56.0, 0.0], [56.1, 0.0], [56.2, 0.0], [56.3, 0.0], [56.4, 0.0], [56.5, 0.0], [56.6, 0.0], [56.7, 0.0], [56.8, 0.0], [56.9, 0.0], [57.0, 0.0], [57.1, 0.0], [57.2, 0.0], [57.3, 0.0], [57.4, 0.0], [57.5, 0.0], [57.6, 0.0], [57.7, 0.0], [57.8, 0.0], [57.9, 0.0], [58.0, 0.0], [58.1, 0.0], [58.2, 0.0], [58.3, 0.0], [58.4, 0.0], [58.5, 0.0], [58.6, 0.0], [58.7, 0.0], [58.8, 0.0], [58.9, 0.0], [59.0, 0.0], [59.1, 0.0], [59.2, 0.0], [59.3, 0.0], [59.4, 0.0], [59.5, 0.0], [59.6, 0.0], [59.7, 0.0], [59.8, 0.0], [59.9, 0.0], [60.0, 0.0], [60.1, 0.0], [60.2, 0.0], [60.3, 0.0], [60.4, 0.0], [60.5, 0.0], [60.6, 0.0], [60.7, 0.0], [60.8, 0.0], [60.9, 0.0], [61.0, 0.0], [61.1, 0.0], [61.2, 0.0], [61.3, 0.0], [61.4, 0.0], [61.5, 0.0], [61.6, 0.0], [61.7, 0.0], [61.8, 0.0], [61.9, 0.0], [62.0, 0.0], [62.1, 0.0], [62.2, 0.0], [62.3, 0.0], [62.4, 0.0], [62.5, 0.0], [62.6, 0.0], [62.7, 0.0], [62.8, 0.0], [62.9, 0.0], [63.0, 0.0], [63.1, 0.0], [63.2, 0.0], [63.3, 0.0], [63.4, 0.0], [63.5, 0.0], [63.6, 0.0], [63.7, 0.0], [63.8, 0.0], [63.9, 0.0], [64.0, 0.0], [64.1, 0.0], [64.2, 0.0], [64.3, 0.0], [64.4, 0.0], [64.5, 0.0], [64.6, 0.0], [64.7, 0.0], [64.8, 0.0], [64.9, 0.0], [65.0, 0.0], [65.1, 0.0], [65.2, 0.0], [65.3, 0.0], [65.4, 0.0], [65.5, 0.0], [65.6, 0.0], [65.7, 0.0], [65.8, 0.0], [65.9, 0.0], [66.0, 0.0], [66.1, 0.0], [66.2, 0.0], [66.3, 0.0], [66.4, 0.0], [66.5, 0.0], [66.6, 0.0], [66.7, 0.0], [66.8, 0.0], [66.9, 0.0], [67.0, 0.0], [67.1, 0.0], [67.2, 0.0], [67.3, 0.0], [67.4, 0.0], [67.5, 0.0], [67.6, 0.0], [67.7, 0.0], [67.8, 0.0], [67.9, 0.0], [68.0, 0.0], [68.1, 0.0], [68.2, 0.0], [68.3, 0.0], [68.4, 0.0], [68.5, 0.0], [68.6, 0.0], [68.7, 0.0], [68.8, 0.0], [68.9, 0.0], [69.0, 0.0], [69.1, 0.0], [69.2, 0.0], [69.3, 0.0], [69.4, 0.0], [69.5, 0.0], [69.6, 0.0], [69.7, 0.0], [69.8, 0.0], [69.9, 0.0], [70.0, 0.0], [70.1, 0.0], [70.2, 0.0], [70.3, 0.0], [70.4, 0.0], [70.5, 0.0], [70.6, 0.0], [70.7, 0.0], [70.8, 0.0], [70.9, 0.0], [71.0, 0.0], [71.1, 0.0], [71.2, 0.0], [71.3, 0.0], [71.4, 0.0], [71.5, 0.0], [71.6, 0.0], [71.7, 0.0], [71.8, 0.0], [71.9, 0.0], [72.0, 0.0], [72.1, 0.0], [72.2, 0.0], [72.3, 0.0], [72.4, 0.0], [72.5, 0.0], [72.6, 0.0], [72.7, 0.0], [72.8, 0.0], [72.9, 0.0], [73.0, 0.0], [73.1, 0.0], [73.2, 0.0], [73.3, 0.0], [73.4, 0.0], [73.5, 0.0], [73.6, 0.0], [73.7, 0.0], [73.8, 0.0], [73.9, 0.0], [74.0, 0.0], [74.1, 0.0], [74.2, 0.0], [74.3, 0.0], [74.4, 0.0], [74.5, 0.0], [74.6, 0.0], [74.7, 0.0], [74.8, 0.0], [74.9, 0.0], [75.0, 0.0], [75.1, 0.0], [75.2, 0.0], [75.3, 0.0], [75.4, 0.0], [75.5, 0.0], [75.6, 0.0], [75.7, 0.0], [75.8, 0.0], [75.9, 0.0], [76.0, 0.0], [76.1, 0.0], [76.2, 0.0], [76.3, 0.0], [76.4, 0.0], [76.5, 0.0], [76.6, 0.0], [76.7, 0.0], [76.8, 0.0], [76.9, 0.0], [77.0, 0.0], [77.1, 0.0], [77.2, 0.0], [77.3, 0.0], [77.4, 0.0], [77.5, 0.0], [77.6, 0.0], [77.7, 0.0], [77.8, 0.0], [77.9, 0.0], [78.0, 0.0], [78.1, 0.0], [78.2, 0.0], [78.3, 0.0], [78.4, 0.0], [78.5, 0.0], [78.6, 0.0], [78.7, 0.0], [78.8, 0.0], [78.9, 0.0], [79.0, 0.0], [79.1, 0.0], [79.2, 0.0], [79.3, 0.0], [79.4, 0.0], [79.5, 0.0], [79.6, 0.0], [79.7, 0.0], [79.8, 0.0], [79.9, 0.0], [80.0, 0.0], [80.1, 0.0], [80.2, 0.0], [80.3, 0.0], [80.4, 0.0], [80.5, 0.0], [80.6, 0.0], [80.7, 0.0], [80.8, 0.0], [80.9, 0.0], [81.0, 0.0], [81.1, 0.0], [81.2, 0.0], [81.3, 0.0], [81.4, 0.0], [81.5, 0.0], [81.6, 0.0], [81.7, 0.0], [81.8, 0.0], [81.9, 0.0], [82.0, 0.0], [82.1, 0.0], [82.2, 0.0], [82.3, 0.0], [82.4, 0.0], [82.5, 0.0], [82.6, 0.0], [82.7, 0.0], [82.8, 0.0], [82.9, 0.0], [83.0, 0.0], [83.1, 0.0], [83.2, 0.0], [83.3, 0.0], [83.4, 0.0], [83.5, 0.0], [83.6, 0.0], [83.7, 0.0], [83.8, 0.0], [83.9, 0.0], [84.0, 0.0], [84.1, 0.0], [84.2, 0.0], [84.3, 0.0], [84.4, 0.0], [84.5, 0.0], [84.6, 0.0], [84.7, 0.0], [84.8, 0.0], [84.9, 0.0], [85.0, 0.0], [85.1, 0.0], [85.2, 0.0], [85.3, 0.0], [85.4, 0.0], [85.5, 0.0], [85.6, 0.0], [85.7, 0.0], [85.8, 0.0], [85.9, 0.0], [86.0, 0.0], [86.1, 0.0], [86.2, 0.0], [86.3, 0.0], [86.4, 0.0], [86.5, 0.0], [86.6, 0.0], [86.7, 0.0], [86.8, 0.0], [86.9, 0.0], [87.0, 0.0], [87.1, 0.0], [87.2, 0.0], [87.3, 0.0], [87.4, 0.0], [87.5, 0.0], [87.6, 0.0], [87.7, 0.0], [87.8, 0.0], [87.9, 0.0], [88.0, 0.0], [88.1, 0.0], [88.2, 0.0], [88.3, 0.0], [88.4, 0.0], [88.5, 0.0], [88.6, 0.0], [88.7, 0.0], [88.8, 0.0], [88.9, 0.0], [89.0, 0.0], [89.1, 0.0], [89.2, 0.0], [89.3, 0.0], [89.4, 0.0], [89.5, 0.0], [89.6, 0.0], [89.7, 0.0], [89.8, 0.0], [89.9, 0.0], [90.0, 0.0], [90.1, 0.0], [90.2, 0.0], [90.3, 0.0], [90.4, 0.0], [90.5, 0.0], [90.6, 0.0], [90.7, 0.0], [90.8, 0.0], [90.9, 0.0], [91.0, 0.0], [91.1, 0.0], [91.2, 0.0], [91.3, 0.0], [91.4, 0.0], [91.5, 0.0], [91.6, 0.0], [91.7, 0.0], [91.8, 0.0], [91.9, 0.0], [92.0, 0.0], [92.1, 0.0], [92.2, 0.0], [92.3, 0.0], [92.4, 0.0], [92.5, 0.0], [92.6, 0.0], [92.7, 0.0], [92.8, 0.0], [92.9, 0.0], [93.0, 0.0], [93.1, 0.0], [93.2, 0.0], [93.3, 0.0], [93.4, 0.0], [93.5, 0.0], [93.6, 0.0], [93.7, 0.0], [93.8, 0.0], [93.9, 0.0], [94.0, 0.0], [94.1, 0.0], [94.2, 0.0], [94.3, 0.0], [94.4, 0.0], [94.5, 0.0], [94.6, 0.0], [94.7, 0.0], [94.8, 0.0], [94.9, 0.0], [95.0, 0.0], [95.1, 0.0], [95.2, 0.0], [95.3, 0.0], [95.4, 0.0], [95.5, 0.0], [95.6, 0.0], [95.7, 0.0], [95.8, 0.0], [95.9, 0.0], [96.0, 0.0], [96.1, 0.0], [96.2, 0.0], [96.3, 0.0], [96.4, 0.0], [96.5, 0.0], [96.6, 0.0], [96.7, 0.0], [96.8, 0.0], [96.9, 0.0], [97.0, 0.0], [97.1, 0.0], [97.2, 0.0], [97.3, 0.0], [97.4, 0.0], [97.5, 0.0], [97.6, 0.0], [97.7, 0.0], [97.8, 0.0], [97.9, 0.0], [98.0, 0.0], [98.1, 0.0], [98.2, 0.0], [98.3, 0.0], [98.4, 0.0], [98.5, 0.0], [98.6, 0.0], [98.7, 0.0], [98.8, 0.0], [98.9, 0.0], [99.0, 0.0], [99.1, 0.0], [99.2, 0.0], [99.3, 0.0], [99.4, 0.0], [99.5, 0.0], [99.6, 0.0], [99.7, 0.0], [99.8, 0.0], [99.9, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3268.0, "series": [{"data": [[0.0, 215.0], [600.0, 142.0], [700.0, 182.0], [800.0, 152.0], [900.0, 38.0], [1000.0, 7.0], [1400.0, 1.0], [1600.0, 3.0], [1700.0, 10.0], [1800.0, 15.0], [1900.0, 21.0], [2000.0, 24.0], [2100.0, 19.0], [2200.0, 22.0], [2300.0, 18.0], [2400.0, 26.0], [2500.0, 30.0], [2600.0, 39.0], [2800.0, 30.0], [2700.0, 25.0], [2900.0, 31.0], [3000.0, 33.0], [3100.0, 30.0], [3300.0, 21.0], [3200.0, 33.0], [3400.0, 28.0], [3500.0, 16.0], [3700.0, 32.0], [3600.0, 22.0], [3800.0, 16.0], [3900.0, 21.0], [4000.0, 120.0], [4100.0, 42.0], [4200.0, 14.0], [4300.0, 8.0], [4400.0, 8.0], [4500.0, 15.0], [4600.0, 12.0], [4700.0, 9.0], [4800.0, 13.0], [5000.0, 497.0], [5100.0, 218.0], [4900.0, 8.0], [5200.0, 29.0], [5300.0, 19.0], [5400.0, 18.0], [5500.0, 2.0], [5600.0, 8.0], [5700.0, 5.0], [5800.0, 1.0], [5900.0, 6.0], [6100.0, 8.0], [6000.0, 6.0], [6200.0, 4.0], [6300.0, 3.0], [6400.0, 3.0], [6500.0, 5.0], [6700.0, 2.0], [6800.0, 2.0], [7000.0, 37.0], [7100.0, 56.0], [7200.0, 34.0], [7300.0, 44.0], [7400.0, 25.0], [7500.0, 11.0], [7600.0, 2.0], [8000.0, 1.0], [9100.0, 3.0], [9200.0, 4.0], [9500.0, 1.0], [9700.0, 1.0], [10000.0, 36.0], [9800.0, 6.0], [9900.0, 4.0], [10300.0, 15.0], [100.0, 303.0], [200.0, 620.0], [300.0, 251.0], [400.0, 157.0], [500.0, 117.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[0.0, 2112.0], [300.0, 133.0], [100.0, 554.0], [200.0, 185.0], [400.0, 78.0], [500.0, 56.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 3268.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 691.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7872.0, "series": [{"data": [[0.0, 7872.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 691.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1091.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 847.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 903.99542900676, "minX": 1.65473292E12, "maxY": 903.99542900676, "series": [{"data": [[1.65473292E12, 903.99542900676]], "isOverall": false, "label": "Background Connection Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473292E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 10348.0, "series": [{"data": [[6.0, 6196.0], [9.0, 6188.0], [12.0, 6523.0], [15.0, 6185.0], [22.0, 6515.0], [26.0, 6469.0], [31.0, 6509.0], [48.0, 3045.0], [51.0, 6264.5], [50.0, 6064.5], [56.0, 6053.0], [66.0, 6087.0], [70.0, 705.3333333333334], [69.0, 40.0], [72.0, 41.0], [79.0, 3548.5], [76.0, 3005.0], [85.0, 3294.3333333333335], [95.0, 5093.4], [92.0, 46.5], [102.0, 2397.0], [101.0, 2974.5], [100.0, 1791.3333333333337], [107.0, 2847.6], [111.0, 5331.666666666667], [110.0, 7008.0], [109.0, 5772.0], [114.0, 6828.0], [119.0, 4827.0], [116.0, 5132.333333333333], [120.0, 5099.0], [126.0, 5691.0], [124.0, 5140.0], [132.0, 5464.666666666667], [131.0, 5125.5], [129.0, 5109.5], [128.0, 6658.0], [143.0, 4980.0], [142.0, 5205.5], [140.0, 5411.5], [138.0, 5056.0], [137.0, 5617.0], [136.0, 5144.666666666667], [151.0, 4913.0], [147.0, 5819.333333333333], [159.0, 5117.333333333333], [155.0, 4950.0], [154.0, 4625.0], [152.0, 5058.0], [167.0, 5225.666666666667], [163.0, 5145.5], [175.0, 5149.666666666667], [173.0, 4813.0], [172.0, 5965.0], [170.0, 5048.0], [169.0, 6540.0], [182.0, 6396.0], [181.0, 5045.0], [179.0, 5310.0], [178.0, 5051.0], [189.0, 5788.0], [187.0, 5102.666666666667], [186.0, 4412.866666666667], [185.0, 6433.0], [184.0, 5054.0], [199.0, 5341.0], [197.0, 5007.666666666667], [194.0, 4999.5], [193.0, 4786.0], [204.0, 5017.0], [202.0, 4839.5], [200.0, 5218.0], [214.0, 4889.5], [212.0, 4989.0], [211.0, 5028.666666666667], [210.0, 4858.5], [223.0, 4655.5], [217.0, 4495.0], [216.0, 4817.0], [230.0, 5069.0], [224.0, 4543.0], [239.0, 5056.0], [238.0, 5038.0], [235.0, 6197.0], [233.0, 6288.0], [247.0, 5052.0], [246.0, 5020.0], [245.0, 5048.714285714285], [241.0, 5103.0], [253.0, 5228.0], [251.0, 5035.0], [249.0, 4914.25], [248.0, 5053.0], [271.0, 4494.260869565217], [270.0, 4564.5], [266.0, 4565.428571428572], [264.0, 2974.5], [260.0, 4252.099999999999], [259.0, 5116.75], [257.0, 4889.166666666667], [285.0, 4661.0], [287.0, 4048.0], [284.0, 5781.0], [274.0, 4226.833333333333], [273.0, 4286.538461538461], [272.0, 5069.5], [283.0, 4048.625], [282.0, 5546.0], [280.0, 4441.5], [279.0, 4384.666666666667], [277.0, 4117.444444444445], [276.0, 5390.0], [299.0, 3961.0], [297.0, 4427.857142857143], [290.0, 3982.6666666666665], [289.0, 4631.0], [318.0, 3962.6666666666665], [316.0, 3621.0], [313.0, 4393.0], [311.0, 4107.0], [307.0, 4062.75], [305.0, 4110.4], [304.0, 3813.0], [333.0, 3692.0], [334.0, 5564.5], [332.0, 4383.0], [330.0, 4243.5], [328.0, 3799.0], [327.0, 4078.75], [324.0, 4631.0], [323.0, 3984.0], [320.0, 3933.75], [351.0, 3439.5], [348.0, 3838.0], [346.0, 3709.0], [343.0, 4623.5], [342.0, 3631.0], [341.0, 4372.0], [340.0, 4098.0], [338.0, 3986.0], [336.0, 4801.5], [367.0, 3738.5], [364.0, 3851.0], [361.0, 4685.5], [358.0, 5094.0], [356.0, 4437.0], [354.0, 3754.3333333333335], [353.0, 3470.0], [383.0, 4422.0], [379.0, 3312.6666666666665], [377.0, 3595.4], [372.0, 3429.0], [370.0, 3931.0], [368.0, 4048.0], [398.0, 3668.0], [397.0, 3609.0], [395.0, 3524.0], [394.0, 3746.5], [390.0, 3655.6666666666665], [389.0, 3715.5], [385.0, 4117.0], [414.0, 3655.0], [413.0, 4075.5], [408.0, 3189.0], [407.0, 3360.6666666666665], [404.0, 4147.666666666667], [403.0, 3664.0], [429.0, 3387.0], [427.0, 3770.0], [423.0, 4670.5], [421.0, 3914.5], [420.0, 3512.0], [417.0, 5192.0], [444.0, 3105.0], [443.0, 3648.5], [441.0, 3864.0], [440.0, 3288.0], [439.0, 3435.0], [437.0, 3870.0], [433.0, 3711.3333333333335], [462.0, 3641.0], [463.0, 4916.0], [461.0, 3730.0], [459.0, 3012.0], [458.0, 3844.0], [456.0, 3800.5], [455.0, 3472.2], [451.0, 3255.0], [449.0, 3188.5], [477.0, 614.0], [469.0, 435.0], [468.0, 601.7142857142858], [470.0, 508.0], [465.0, 3365.0], [474.0, 1078.25], [475.0, 1437.3333333333335], [479.0, 246.0], [476.0, 3302.0], [467.0, 3353.0], [473.0, 3391.5], [472.0, 3133.6666666666665], [481.0, 499.44444444444446], [480.0, 2466.8333333333335], [482.0, 584.157894736842], [483.0, 3821.0], [485.0, 1515.5555555555557], [486.0, 606.0], [487.0, 671.4285714285714], [488.0, 554.5384615384617], [489.0, 470.85714285714283], [491.0, 770.8181818181818], [492.0, 2752.833333333333], [493.0, 2816.5], [494.0, 666.1666666666666], [495.0, 630.2777777777777], [498.0, 1611.5], [499.0, 1009.0], [500.0, 1069.8], [501.0, 624.9473684210527], [502.0, 508.0], [503.0, 1435.1000000000001], [505.0, 298.0], [506.0, 1024.7857142857142], [508.0, 582.0], [509.0, 2633.25], [510.0, 453.5], [511.0, 1699.875], [504.0, 3274.0], [519.0, 547.1666666666666], [515.0, 862.0000000000001], [512.0, 632.5], [526.0, 1311.5833333333333], [527.0, 572.6666666666666], [524.0, 1001.8571428571429], [525.0, 754.2222222222222], [513.0, 849.0], [514.0, 2342.6666666666665], [516.0, 2808.0], [517.0, 899.4285714285713], [518.0, 403.9166666666667], [528.0, 693.8000000000001], [540.0, 729.3076923076924], [539.0, 4621.5], [541.0, 1107.125], [536.0, 439.44444444444446], [538.0, 364.7142857142858], [529.0, 840.0], [530.0, 893.4736842105266], [532.0, 775.5999999999999], [533.0, 2446.0], [535.0, 847.2666666666667], [521.0, 940.9473684210527], [520.0, 3173.0], [523.0, 824.0], [569.0, 3262.0], [544.0, 366.375], [545.0, 3195.6], [546.0, 1931.25], [547.0, 228.0], [550.0, 3791.0], [548.0, 2696.0], [574.0, 10004.0], [567.0, 10025.333333333334], [566.0, 10027.25], [562.0, 2716.0], [559.0, 3430.0], [558.0, 3118.0], [557.0, 3464.0], [555.0, 2649.0], [554.0, 2650.0], [553.0, 3451.5], [552.0, 3507.0], [593.0, 3383.75], [589.0, 6788.666666666667], [588.0, 10031.0], [586.0, 8218.75], [590.0, 10030.333333333334], [594.0, 1832.0], [596.0, 772.5714285714286], [599.0, 3356.0], [598.0, 4422.0], [597.0, 2596.0], [602.0, 308.0], [604.0, 280.0], [605.0, 2765.0], [592.0, 3361.0], [603.0, 9939.0], [600.0, 2748.5], [577.0, 3522.0], [591.0, 7898.428571428572], [614.0, 264.0], [609.0, 311.0], [608.0, 314.57142857142856], [610.0, 4252.8], [611.0, 528.0909090909091], [613.0, 279.14285714285717], [612.0, 3224.0], [638.0, 2414.0], [625.0, 3511.5], [629.0, 2692.0], [627.0, 2968.5], [631.0, 3267.0], [630.0, 3245.0], [637.0, 2824.5], [634.0, 2702.0], [633.0, 3116.3333333333335], [632.0, 9897.0], [615.0, 2812.5], [616.0, 1917.25], [617.0, 3453.0], [619.0, 266.3333333333333], [621.0, 3478.0], [620.0, 6353.5], [622.0, 2538.0], [623.0, 270.0], [667.0, 2416.0], [649.0, 325.3333333333333], [648.0, 4080.0], [650.0, 5439.666666666666], [652.0, 2883.0], [651.0, 3140.5], [653.0, 1424.6666666666665], [663.0, 3965.25], [671.0, 2757.0], [670.0, 3217.0], [666.0, 2493.0], [665.0, 2651.0], [655.0, 9822.0], [645.0, 3486.0], [642.0, 3062.0], [640.0, 3435.0], [654.0, 4294.0], [662.0, 3032.6666666666665], [661.0, 4347.0], [660.0, 3065.0], [698.0, 6264.0], [689.0, 350.0], [691.0, 1149.2], [701.0, 2554.3333333333335], [697.0, 3167.0], [694.0, 2779.0], [690.0, 2851.1666666666665], [688.0, 4211.333333333333], [687.0, 2958.75], [674.0, 2686.0], [673.0, 4412.0], [678.0, 3124.0], [675.0, 2382.0], [679.0, 2957.0], [733.0, 2758.25], [715.0, 765.875], [711.0, 2784.0], [710.0, 3337.0], [709.0, 2498.5], [707.0, 3119.0], [706.0, 3107.0], [705.0, 2818.5], [704.0, 2576.3333333333335], [712.0, 2331.5], [721.0, 2024.714285714286], [722.0, 424.75], [724.0, 2777.0], [725.0, 890.5], [726.0, 3101.0], [728.0, 2067.2], [729.0, 467.5714285714286], [735.0, 404.6666666666667], [731.0, 3044.0], [741.0, 737.8125], [736.0, 399.55555555555554], [737.0, 2578.0], [751.0, 2384.0], [749.0, 2747.5], [748.0, 2955.0], [747.0, 2662.0], [746.0, 2363.5], [738.0, 1130.0], [740.0, 388.0], [739.0, 2664.5], [754.0, 763.1428571428571], [752.0, 2363.0], [755.0, 594.6], [757.0, 358.7142857142857], [764.0, 977.5], [762.0, 2859.0], [761.0, 2788.5], [765.0, 337.6], [795.0, 269.0], [780.0, 272.8333333333333], [768.0, 1094.5], [769.0, 1831.0], [770.0, 629.0], [772.0, 589.0], [774.0, 2372.0], [773.0, 4070.0], [794.0, 2661.0], [793.0, 2285.5], [776.0, 285.0], [777.0, 2742.0], [778.0, 667.5], [779.0, 285.5], [781.0, 302.0], [783.0, 2851.5], [786.0, 268.25], [785.0, 3300.0], [784.0, 3048.0], [787.0, 2506.0], [790.0, 3120.0], [788.0, 2725.0], [799.0, 250.5], [798.0, 5993.5], [796.0, 507.4000000000001], [797.0, 249.0], [801.0, 856.0], [800.0, 240.8], [802.0, 218.0], [803.0, 587.4285714285714], [807.0, 204.16666666666666], [806.0, 2495.5], [805.0, 2706.0], [804.0, 2273.0], [825.0, 2918.0], [824.0, 2588.75], [808.0, 210.57142857142858], [809.0, 1546.7142857142858], [811.0, 192.0], [810.0, 2054.0], [814.0, 2477.25], [815.0, 2615.0], [816.0, 902.25], [821.0, 2706.0], [819.0, 2437.0], [829.0, 3081.75], [859.0, 206.33333333333334], [832.0, 1040.2307692307693], [838.0, 2206.5], [836.0, 1996.0], [835.0, 2388.0], [833.0, 2185.0], [847.0, 2230.625], [858.0, 2746.3333333333335], [856.0, 2052.0], [844.0, 214.75], [840.0, 2188.0], [846.0, 205.0], [848.0, 208.16666666666669], [855.0, 897.0], [853.0, 3111.0], [850.0, 2352.0], [860.0, 212.0], [862.0, 834.3333333333334], [861.0, 2043.0], [888.0, 1127.5], [866.0, 212.0], [867.0, 735.8571428571429], [871.0, 2617.75], [876.0, 213.5], [875.0, 2667.5], [874.0, 2596.0], [878.0, 2043.5], [865.0, 2515.5], [864.0, 4933.666666666666], [881.0, 1356.0], [884.0, 210.5], [883.0, 2140.0], [887.0, 906.7142857142858], [885.0, 2428.0], [891.0, 1528.3333333333333], [892.0, 455.0], [893.0, 411.7], [894.0, 5960.0], [898.0, 740.8571428571429], [903.0, 177.5], [902.0, 3743.0], [901.0, 2192.0], [900.0, 2342.0], [904.0, 162.85714285714286], [905.0, 387.22222222222223], [906.0, 1496.5], [907.0, 1951.5], [908.0, 119.0], [911.0, 130.0], [910.0, 1875.0], [909.0, 1840.0], [913.0, 638.7272727272727], [919.0, 2004.0], [917.0, 2005.0], [916.0, 2139.5], [914.0, 2386.25], [925.0, 635.1111111111111], [922.0, 116.4], [923.0, 2321.5], [924.0, 108.0], [921.0, 863.375], [954.0, 99.4], [930.0, 490.8888888888889], [932.0, 334.57142857142856], [935.0, 2023.0], [934.0, 6184.0], [953.0, 2192.5], [952.0, 4601.666666666667], [936.0, 97.0], [937.0, 4305.333333333333], [940.0, 2218.0], [939.0, 1970.0], [943.0, 279.1111111111111], [929.0, 2267.0], [928.0, 2441.5], [941.0, 1709.0], [946.0, 96.0], [947.0, 1624.0], [951.0, 2087.0], [958.0, 940.0], [957.0, 2215.5], [959.0, 2328.0], [945.0, 2145.5], [944.0, 2510.0], [975.0, 694.0], [972.0, 112.0], [969.0, 2185.6666666666665], [968.0, 2185.6666666666665], [973.0, 473.8], [974.0, 116.0], [977.0, 5221.5], [978.0, 2081.6], [979.0, 10029.0], [982.0, 7336.0], [981.0, 10028.0], [991.0, 10008.0], [976.0, 10348.0], [989.0, 10327.0], [987.0, 10012.0], [986.0, 10327.5], [985.0, 10010.0], [984.0, 2110.3333333333335], [965.0, 1762.0], [964.0, 3702.0], [961.0, 5375.5], [992.0, 1761.8333333333333], [995.0, 832.0], [1000.0, 2632.0406732117804], [998.0, 10324.0], [993.0, 10325.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[802.0726609963557, 2446.871931956258]], "isOverall": false, "label": "MQTT Connect -Aggregated", "isController": false}, {"data": [[1000.0, 105.4521259331387], [70.0, 19.333333333333332], [72.0, 19.0], [85.0, 21.0], [364.0, 22.0], [89.0, 23.0], [95.0, 21.666666666666668], [409.0, 19.0], [103.0, 30.0], [102.0, 22.57142857142857], [100.0, 24.666666666666668], [107.0, 22.0], [111.0, 97.0], [109.0, 21.25], [455.0, 19.0], [116.0, 78.0], [511.0, 20.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[990.029826812059, 104.52661962796674]], "isOverall": false, "label": "MQTT DisConnect-Aggregated", "isController": false}, {"data": [[3.0, 0.0], [6.0, 0.0], [10.0, 0.0], [11.0, 0.0], [15.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [25.0, 0.0], [27.0, 0.0], [28.0, 0.0], [44.0, 0.0], [49.0, 0.0], [48.0, 0.0], [51.0, 0.0], [50.0, 0.0], [53.0, 0.0], [52.0, 0.0], [55.0, 0.0], [57.0, 0.0], [56.0, 0.0], [59.0, 0.0], [58.0, 0.0], [60.0, 0.0], [63.0, 0.0], [67.0, 0.0], [66.0, 0.0], [65.0, 0.0], [70.0, 0.0], [69.0, 0.0], [68.0, 0.0], [75.0, 0.0], [74.0, 0.0], [72.0, 0.0], [79.0, 0.0], [76.0, 0.0], [83.0, 0.0], [82.0, 0.0], [86.0, 0.0], [85.0, 0.0], [89.0, 0.0], [88.0, 0.0], [95.0, 0.0], [92.0, 0.0], [97.0, 0.0], [96.0, 0.0], [103.0, 0.0], [102.0, 0.0], [100.0, 0.0], [107.0, 0.0], [111.0, 0.0], [109.0, 0.0], [114.0, 0.0], [113.0, 0.0], [117.0, 0.0], [116.0, 0.0], [120.0, 0.0], [126.0, 0.0], [124.0, 0.0], [131.0, 0.0], [130.0, 0.0], [129.0, 0.0], [128.0, 0.0], [140.0, 0.0], [138.0, 0.0], [136.0, 0.0], [151.0, 0.0], [149.0, 0.0], [147.0, 0.0], [159.0, 0.0], [155.0, 0.0], [167.0, 0.0], [163.0, 0.0], [161.0, 0.0], [175.0, 0.0], [174.0, 0.0], [169.0, 0.0], [182.0, 0.0], [181.0, 0.0], [179.0, 0.0], [178.0, 0.0], [189.0, 0.0], [187.0, 0.0], [199.0, 0.0], [193.0, 0.0], [192.0, 0.0], [204.0, 0.0], [200.0, 0.0], [212.0, 0.0], [208.0, 0.0], [216.0, 0.0], [229.0, 0.0], [225.0, 0.0], [224.0, 0.0], [237.0, 0.0], [235.0, 0.0], [234.0, 0.0], [246.0, 0.0], [241.0, 0.0], [253.0, 0.0], [251.0, 0.0], [250.0, 0.0], [259.0, 0.0], [256.0, 0.0], [275.0, 0.0], [368.0, 0.0], [414.0, 0.0], [461.0, 0.0], [523.0, 0.0], [514.0, 0.0], [738.0, 0.0], [1000.0, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}, {"data": [[950.249082007344, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.65473292E12, "maxY": 2579.35, "series": [{"data": [[1.65473292E12, 2579.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65473292E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473292E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65473292E12, "maxY": 2446.871931956258, "series": [{"data": [[1.65473292E12, 2446.871931956258]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[1.65473292E12, 104.52661962796674]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.65473292E12, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473292E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65473292E12, "maxY": 4.9E-324, "series": [{"data": [[1.65473292E12, 0.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[1.65473292E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.65473292E12, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473292E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65473292E12, "maxY": 4.9E-324, "series": [{"data": [[1.65473292E12, 0.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[1.65473292E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.65473292E12, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473292E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65473292E12, "maxY": 8081.0, "series": [{"data": [[1.65473292E12, 8081.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65473292E12, 4123.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65473292E12, 7251.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65473292E12, 5094.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65473292E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65473292E12, 46.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473292E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 6054.0, "series": [{"data": [[590.0, 21.0], [705.0, 5080.0], [57.0, 4075.0], [235.0, 9.5], [252.0, 0.0], [1.0, 3043.0], [1130.0, 20.0], [278.0, 4062.0], [1287.0, 119.0], [1371.0, 22.0], [418.0, 2042.0], [1747.0, 245.0], [459.0, 556.0], [1896.0, 41.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[278.0, 4950.0], [75.0, 2535.0], [418.0, 2796.0], [235.0, 3705.0], [252.0, 6054.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1896.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4.9E-324, "series": [{"data": [[590.0, 0.0], [705.0, 0.0], [57.0, 0.0], [235.0, 0.0], [252.0, 0.0], [1.0, 0.0], [1130.0, 0.0], [278.0, 0.0], [1287.0, 0.0], [1371.0, 0.0], [418.0, 0.0], [1747.0, 0.0], [459.0, 0.0], [1896.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[278.0, 0.0], [75.0, 0.0], [418.0, 0.0], [235.0, 0.0], [252.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1896.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 175.01666666666668, "minX": 1.65473292E12, "maxY": 175.01666666666668, "series": [{"data": [[1.65473292E12, 175.01666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473292E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.65473292E12, "maxY": 160.9, "series": [{"data": [[1.65473292E12, 160.9]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65473292E12, 0.05]], "isOverall": false, "label": "501", "isController": false}, {"data": [[1.65473292E12, 14.066666666666666]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473292E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.65473292E12, "maxY": 54.516666666666666, "series": [{"data": [[1.65473292E12, 54.516666666666666]], "isOverall": false, "label": "MQTT Connect -success", "isController": false}, {"data": [[1.65473292E12, 14.066666666666666]], "isOverall": false, "label": "MQTT Connect -failure", "isController": false}, {"data": [[1.65473292E12, 51.916666666666664]], "isOverall": false, "label": "MQTT DisConnect-success", "isController": false}, {"data": [[1.65473292E12, 0.05]], "isOverall": false, "label": "MQTT DisConnect-failure", "isController": false}, {"data": [[1.65473292E12, 54.46666666666667]], "isOverall": false, "label": "MQTT Sub Sampler-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473292E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 14.116666666666667, "minX": 1.65473292E12, "maxY": 160.9, "series": [{"data": [[1.65473292E12, 160.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65473292E12, 14.116666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473292E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

