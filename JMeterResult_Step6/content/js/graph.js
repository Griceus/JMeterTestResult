/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 10485.0, "series": [{"data": [[0.0, 40.0], [0.1, 40.0], [0.2, 41.0], [0.3, 41.0], [0.4, 76.0], [0.5, 106.0], [0.6, 131.0], [0.7, 133.0], [0.8, 141.0], [0.9, 156.0], [1.0, 165.0], [1.1, 200.0], [1.2, 212.0], [1.3, 240.0], [1.4, 273.0], [1.5, 282.0], [1.6, 286.0], [1.7, 290.0], [1.8, 292.0], [1.9, 298.0], [2.0, 302.0], [2.1, 312.0], [2.2, 313.0], [2.3, 315.0], [2.4, 316.0], [2.5, 319.0], [2.6, 320.0], [2.7, 324.0], [2.8, 325.0], [2.9, 330.0], [3.0, 331.0], [3.1, 331.0], [3.2, 339.0], [3.3, 340.0], [3.4, 344.0], [3.5, 344.0], [3.6, 356.0], [3.7, 357.0], [3.8, 364.0], [3.9, 365.0], [4.0, 373.0], [4.1, 378.0], [4.2, 378.0], [4.3, 387.0], [4.4, 390.0], [4.5, 391.0], [4.6, 391.0], [4.7, 395.0], [4.8, 397.0], [4.9, 406.0], [5.0, 410.0], [5.1, 418.0], [5.2, 421.0], [5.3, 424.0], [5.4, 427.0], [5.5, 428.0], [5.6, 431.0], [5.7, 434.0], [5.8, 437.0], [5.9, 437.0], [6.0, 438.0], [6.1, 438.0], [6.2, 441.0], [6.3, 441.0], [6.4, 449.0], [6.5, 452.0], [6.6, 455.0], [6.7, 467.0], [6.8, 467.0], [6.9, 471.0], [7.0, 481.0], [7.1, 482.0], [7.2, 483.0], [7.3, 490.0], [7.4, 490.0], [7.5, 495.0], [7.6, 495.0], [7.7, 503.0], [7.8, 509.0], [7.9, 511.0], [8.0, 515.0], [8.1, 516.0], [8.2, 520.0], [8.3, 522.0], [8.4, 526.0], [8.5, 526.0], [8.6, 532.0], [8.7, 533.0], [8.8, 533.0], [8.9, 537.0], [9.0, 539.0], [9.1, 540.0], [9.2, 541.0], [9.3, 547.0], [9.4, 551.0], [9.5, 554.0], [9.6, 564.0], [9.7, 566.0], [9.8, 568.0], [9.9, 570.0], [10.0, 570.0], [10.1, 577.0], [10.2, 577.0], [10.3, 583.0], [10.4, 584.0], [10.5, 586.0], [10.6, 586.0], [10.7, 586.0], [10.8, 591.0], [10.9, 593.0], [11.0, 598.0], [11.1, 598.0], [11.2, 598.0], [11.3, 601.0], [11.4, 601.0], [11.5, 603.0], [11.6, 610.0], [11.7, 611.0], [11.8, 619.0], [11.9, 628.0], [12.0, 628.0], [12.1, 631.0], [12.2, 632.0], [12.3, 634.0], [12.4, 636.0], [12.5, 644.0], [12.6, 646.0], [12.7, 647.0], [12.8, 648.0], [12.9, 652.0], [13.0, 652.0], [13.1, 656.0], [13.2, 660.0], [13.3, 664.0], [13.4, 668.0], [13.5, 670.0], [13.6, 671.0], [13.7, 671.0], [13.8, 679.0], [13.9, 680.0], [14.0, 686.0], [14.1, 686.0], [14.2, 692.0], [14.3, 694.0], [14.4, 696.0], [14.5, 700.0], [14.6, 700.0], [14.7, 709.0], [14.8, 710.0], [14.9, 714.0], [15.0, 720.0], [15.1, 720.0], [15.2, 730.0], [15.3, 740.0], [15.4, 740.0], [15.5, 742.0], [15.6, 747.0], [15.7, 750.0], [15.8, 750.0], [15.9, 751.0], [16.0, 751.0], [16.1, 753.0], [16.2, 756.0], [16.3, 757.0], [16.4, 758.0], [16.5, 759.0], [16.6, 762.0], [16.7, 763.0], [16.8, 768.0], [16.9, 768.0], [17.0, 770.0], [17.1, 776.0], [17.2, 776.0], [17.3, 777.0], [17.4, 779.0], [17.5, 783.0], [17.6, 783.0], [17.7, 788.0], [17.8, 789.0], [17.9, 792.0], [18.0, 797.0], [18.1, 799.0], [18.2, 799.0], [18.3, 813.0], [18.4, 818.0], [18.5, 820.0], [18.6, 823.0], [18.7, 825.0], [18.8, 825.0], [18.9, 826.0], [19.0, 827.0], [19.1, 830.0], [19.2, 830.0], [19.3, 831.0], [19.4, 848.0], [19.5, 848.0], [19.6, 850.0], [19.7, 851.0], [19.8, 857.0], [19.9, 861.0], [20.0, 863.0], [20.1, 864.0], [20.2, 864.0], [20.3, 864.0], [20.4, 869.0], [20.5, 873.0], [20.6, 887.0], [20.7, 899.0], [20.8, 903.0], [20.9, 904.0], [21.0, 910.0], [21.1, 915.0], [21.2, 922.0], [21.3, 922.0], [21.4, 922.0], [21.5, 923.0], [21.6, 931.0], [21.7, 932.0], [21.8, 936.0], [21.9, 939.0], [22.0, 950.0], [22.1, 955.0], [22.2, 961.0], [22.3, 971.0], [22.4, 983.0], [22.5, 988.0], [22.6, 988.0], [22.7, 993.0], [22.8, 993.0], [22.9, 997.0], [23.0, 1000.0], [23.1, 1012.0], [23.2, 1024.0], [23.3, 1030.0], [23.4, 1040.0], [23.5, 1045.0], [23.6, 1053.0], [23.7, 1067.0], [23.8, 1071.0], [23.9, 1082.0], [24.0, 1097.0], [24.1, 1099.0], [24.2, 1118.0], [24.3, 1126.0], [24.4, 1162.0], [24.5, 1178.0], [24.6, 1218.0], [24.7, 1229.0], [24.8, 1276.0], [24.9, 1318.0], [25.0, 1349.0], [25.1, 1384.0], [25.2, 1399.0], [25.3, 1424.0], [25.4, 1425.0], [25.5, 1450.0], [25.6, 1460.0], [25.7, 1476.0], [25.8, 1488.0], [25.9, 1517.0], [26.0, 1522.0], [26.1, 1540.0], [26.2, 1586.0], [26.3, 1638.0], [26.4, 1658.0], [26.5, 1692.0], [26.6, 1706.0], [26.7, 1713.0], [26.8, 1733.0], [26.9, 1768.0], [27.0, 1868.0], [27.1, 1876.0], [27.2, 1900.0], [27.3, 1931.0], [27.4, 1952.0], [27.5, 1965.0], [27.6, 2037.0], [27.7, 2045.0], [27.8, 2067.0], [27.9, 2079.0], [28.0, 2107.0], [28.1, 2132.0], [28.2, 2137.0], [28.3, 2142.0], [28.4, 2149.0], [28.5, 2210.0], [28.6, 2277.0], [28.7, 2302.0], [28.8, 2328.0], [28.9, 2373.0], [29.0, 2463.0], [29.1, 2535.0], [29.2, 2606.0], [29.3, 2623.0], [29.4, 2796.0], [29.5, 2797.0], [29.6, 2811.0], [29.7, 2826.0], [29.8, 2847.0], [29.9, 2854.0], [30.0, 2892.0], [30.1, 2910.0], [30.2, 2952.0], [30.3, 2986.0], [30.4, 2987.0], [30.5, 3025.0], [30.6, 3044.0], [30.7, 3067.0], [30.8, 3071.0], [30.9, 3114.0], [31.0, 3123.0], [31.1, 3157.0], [31.2, 3171.0], [31.3, 3183.0], [31.4, 3200.0], [31.5, 3312.0], [31.6, 3386.0], [31.7, 3412.0], [31.8, 3456.0], [31.9, 3479.0], [32.0, 3555.0], [32.1, 3566.0], [32.2, 3609.0], [32.3, 3610.0], [32.4, 3820.0], [32.5, 3930.0], [32.6, 3969.0], [32.7, 3976.0], [32.8, 4047.0], [32.9, 4083.0], [33.0, 4205.0], [33.1, 4352.0], [33.2, 4369.0], [33.3, 4494.0], [33.4, 5019.0], [33.5, 5030.0], [33.6, 5047.0], [33.7, 5057.0], [33.8, 5064.0], [33.9, 5084.0], [34.0, 5094.0], [34.1, 5173.0], [34.2, 5195.0], [34.3, 5315.0], [34.4, 5408.0], [34.5, 5436.0], [34.6, 5738.0], [34.7, 5878.0], [34.8, 6063.0], [34.9, 6172.0], [35.0, 6298.0], [35.1, 6549.0], [35.2, 7045.0], [35.3, 7045.0], [35.4, 7046.0], [35.5, 7046.0], [35.6, 7047.0], [35.7, 7047.0], [35.8, 7047.0], [35.9, 7047.0], [36.0, 7048.0], [36.1, 7048.0], [36.2, 7048.0], [36.3, 7048.0], [36.4, 7048.0], [36.5, 7048.0], [36.6, 7048.0], [36.7, 7048.0], [36.8, 7048.0], [36.9, 7049.0], [37.0, 7049.0], [37.1, 7049.0], [37.2, 7049.0], [37.3, 7049.0], [37.4, 7049.0], [37.5, 7049.0], [37.6, 7050.0], [37.7, 7050.0], [37.8, 7050.0], [37.9, 7050.0], [38.0, 7050.0], [38.1, 7050.0], [38.2, 7050.0], [38.3, 7050.0], [38.4, 7050.0], [38.5, 7051.0], [38.6, 7051.0], [38.7, 7051.0], [38.8, 7051.0], [38.9, 7051.0], [39.0, 7051.0], [39.1, 7051.0], [39.2, 7051.0], [39.3, 7051.0], [39.4, 7051.0], [39.5, 7052.0], [39.6, 7052.0], [39.7, 7052.0], [39.8, 7052.0], [39.9, 7052.0], [40.0, 7052.0], [40.1, 7052.0], [40.2, 7052.0], [40.3, 7052.0], [40.4, 7052.0], [40.5, 7052.0], [40.6, 7053.0], [40.7, 7053.0], [40.8, 7053.0], [40.9, 7053.0], [41.0, 7053.0], [41.1, 7053.0], [41.2, 7053.0], [41.3, 7053.0], [41.4, 7054.0], [41.5, 7054.0], [41.6, 7054.0], [41.7, 7054.0], [41.8, 7054.0], [41.9, 7054.0], [42.0, 7054.0], [42.1, 7054.0], [42.2, 7055.0], [42.3, 7055.0], [42.4, 7055.0], [42.5, 7055.0], [42.6, 7055.0], [42.7, 7055.0], [42.8, 7055.0], [42.9, 7055.0], [43.0, 7056.0], [43.1, 7056.0], [43.2, 7056.0], [43.3, 7056.0], [43.4, 7057.0], [43.5, 7057.0], [43.6, 7057.0], [43.7, 7057.0], [43.8, 7057.0], [43.9, 7057.0], [44.0, 7057.0], [44.1, 7058.0], [44.2, 7058.0], [44.3, 7058.0], [44.4, 7059.0], [44.5, 7059.0], [44.6, 7059.0], [44.7, 7061.0], [44.8, 7061.0], [44.9, 7062.0], [45.0, 7062.0], [45.1, 7063.0], [45.2, 7066.0], [45.3, 7066.0], [45.4, 7087.0], [45.5, 7095.0], [45.6, 7096.0], [45.7, 7135.0], [45.8, 7164.0], [45.9, 7166.0], [46.0, 7167.0], [46.1, 7167.0], [46.2, 7167.0], [46.3, 7168.0], [46.4, 7187.0], [46.5, 7189.0], [46.6, 7189.0], [46.7, 7190.0], [46.8, 8200.0], [46.9, 8425.0], [47.0, 8437.0], [47.1, 8501.0], [47.2, 8502.0], [47.3, 8510.0], [47.4, 8550.0], [47.5, 8576.0], [47.6, 8621.0], [47.7, 8621.0], [47.8, 8645.0], [47.9, 8659.0], [48.0, 8670.0], [48.1, 8676.0], [48.2, 8691.0], [48.3, 8691.0], [48.4, 8696.0], [48.5, 8705.0], [48.6, 8715.0], [48.7, 8721.0], [48.8, 8738.0], [48.9, 8746.0], [49.0, 8748.0], [49.1, 8778.0], [49.2, 8790.0], [49.3, 8793.0], [49.4, 8799.0], [49.5, 8803.0], [49.6, 8809.0], [49.7, 8818.0], [49.8, 8821.0], [49.9, 8856.0], [50.0, 8857.0], [50.1, 8871.0], [50.2, 8894.0], [50.3, 8895.0], [50.4, 8924.0], [50.5, 8936.0], [50.6, 8962.0], [50.7, 8962.0], [50.8, 8968.0], [50.9, 8985.0], [51.0, 9017.0], [51.1, 9022.0], [51.2, 9040.0], [51.3, 9050.0], [51.4, 9079.0], [51.5, 9089.0], [51.6, 9091.0], [51.7, 9100.0], [51.8, 9102.0], [51.9, 9116.0], [52.0, 9125.0], [52.1, 9128.0], [52.2, 9143.0], [52.3, 9146.0], [52.4, 9150.0], [52.5, 9156.0], [52.6, 9157.0], [52.7, 9167.0], [52.8, 9181.0], [52.9, 9181.0], [53.0, 9215.0], [53.1, 9222.0], [53.2, 9226.0], [53.3, 9228.0], [53.4, 9234.0], [53.5, 9237.0], [53.6, 9242.0], [53.7, 9245.0], [53.8, 9247.0], [53.9, 9255.0], [54.0, 9265.0], [54.1, 9270.0], [54.2, 9272.0], [54.3, 9292.0], [54.4, 9293.0], [54.5, 9305.0], [54.6, 9311.0], [54.7, 9320.0], [54.8, 9322.0], [54.9, 9343.0], [55.0, 9353.0], [55.1, 9360.0], [55.2, 9362.0], [55.3, 9373.0], [55.4, 9380.0], [55.5, 9382.0], [55.6, 9387.0], [55.7, 9402.0], [55.8, 9420.0], [55.9, 9422.0], [56.0, 9433.0], [56.1, 9434.0], [56.2, 9436.0], [56.3, 9438.0], [56.4, 9444.0], [56.5, 9444.0], [56.6, 9454.0], [56.7, 9465.0], [56.8, 9466.0], [56.9, 9485.0], [57.0, 9495.0], [57.1, 9513.0], [57.2, 9516.0], [57.3, 9526.0], [57.4, 9530.0], [57.5, 9542.0], [57.6, 9542.0], [57.7, 9545.0], [57.8, 9553.0], [57.9, 9554.0], [58.0, 9556.0], [58.1, 9558.0], [58.2, 9582.0], [58.3, 9582.0], [58.4, 9603.0], [58.5, 9607.0], [58.6, 9625.0], [58.7, 9626.0], [58.8, 9632.0], [58.9, 9640.0], [59.0, 9652.0], [59.1, 9654.0], [59.2, 9659.0], [59.3, 9667.0], [59.4, 9671.0], [59.5, 9678.0], [59.6, 9681.0], [59.7, 9698.0], [59.8, 9714.0], [59.9, 9722.0], [60.0, 9723.0], [60.1, 9726.0], [60.2, 9729.0], [60.3, 9736.0], [60.4, 9737.0], [60.5, 9739.0], [60.6, 9747.0], [60.7, 9748.0], [60.8, 9762.0], [60.9, 9762.0], [61.0, 9773.0], [61.1, 9776.0], [61.2, 9790.0], [61.3, 9791.0], [61.4, 9806.0], [61.5, 9807.0], [61.6, 9813.0], [61.7, 9820.0], [61.8, 9822.0], [61.9, 9824.0], [62.0, 9824.0], [62.1, 9824.0], [62.2, 9826.0], [62.3, 9841.0], [62.4, 9841.0], [62.5, 9842.0], [62.6, 9847.0], [62.7, 9865.0], [62.8, 9868.0], [62.9, 9878.0], [63.0, 9878.0], [63.1, 9887.0], [63.2, 9890.0], [63.3, 9894.0], [63.4, 9902.0], [63.5, 9909.0], [63.6, 9915.0], [63.7, 9918.0], [63.8, 9926.0], [63.9, 9927.0], [64.0, 9929.0], [64.1, 9937.0], [64.2, 9947.0], [64.3, 9950.0], [64.4, 9958.0], [64.5, 9970.0], [64.6, 9974.0], [64.7, 9975.0], [64.8, 9979.0], [64.9, 9985.0], [65.0, 9993.0], [65.1, 10000.0], [65.2, 10000.0], [65.3, 10000.0], [65.4, 10000.0], [65.5, 10000.0], [65.6, 10000.0], [65.7, 10001.0], [65.8, 10001.0], [65.9, 10001.0], [66.0, 10001.0], [66.1, 10001.0], [66.2, 10001.0], [66.3, 10001.0], [66.4, 10001.0], [66.5, 10001.0], [66.6, 10001.0], [66.7, 10001.0], [66.8, 10001.0], [66.9, 10001.0], [67.0, 10001.0], [67.1, 10001.0], [67.2, 10001.0], [67.3, 10001.0], [67.4, 10001.0], [67.5, 10001.0], [67.6, 10001.0], [67.7, 10001.0], [67.8, 10001.0], [67.9, 10001.0], [68.0, 10001.0], [68.1, 10001.0], [68.2, 10001.0], [68.3, 10001.0], [68.4, 10001.0], [68.5, 10001.0], [68.6, 10001.0], [68.7, 10001.0], [68.8, 10001.0], [68.9, 10001.0], [69.0, 10002.0], [69.1, 10002.0], [69.2, 10002.0], [69.3, 10002.0], [69.4, 10002.0], [69.5, 10002.0], [69.6, 10002.0], [69.7, 10002.0], [69.8, 10002.0], [69.9, 10002.0], [70.0, 10002.0], [70.1, 10002.0], [70.2, 10002.0], [70.3, 10002.0], [70.4, 10002.0], [70.5, 10002.0], [70.6, 10002.0], [70.7, 10002.0], [70.8, 10002.0], [70.9, 10002.0], [71.0, 10002.0], [71.1, 10002.0], [71.2, 10002.0], [71.3, 10002.0], [71.4, 10002.0], [71.5, 10002.0], [71.6, 10002.0], [71.7, 10002.0], [71.8, 10002.0], [71.9, 10002.0], [72.0, 10002.0], [72.1, 10002.0], [72.2, 10002.0], [72.3, 10002.0], [72.4, 10002.0], [72.5, 10002.0], [72.6, 10002.0], [72.7, 10003.0], [72.8, 10003.0], [72.9, 10003.0], [73.0, 10003.0], [73.1, 10003.0], [73.2, 10003.0], [73.3, 10003.0], [73.4, 10003.0], [73.5, 10003.0], [73.6, 10003.0], [73.7, 10003.0], [73.8, 10003.0], [73.9, 10003.0], [74.0, 10003.0], [74.1, 10003.0], [74.2, 10003.0], [74.3, 10003.0], [74.4, 10003.0], [74.5, 10003.0], [74.6, 10003.0], [74.7, 10003.0], [74.8, 10003.0], [74.9, 10003.0], [75.0, 10003.0], [75.1, 10003.0], [75.2, 10003.0], [75.3, 10003.0], [75.4, 10003.0], [75.5, 10003.0], [75.6, 10003.0], [75.7, 10003.0], [75.8, 10003.0], [75.9, 10003.0], [76.0, 10003.0], [76.1, 10003.0], [76.2, 10003.0], [76.3, 10004.0], [76.4, 10004.0], [76.5, 10004.0], [76.6, 10004.0], [76.7, 10004.0], [76.8, 10004.0], [76.9, 10004.0], [77.0, 10004.0], [77.1, 10004.0], [77.2, 10004.0], [77.3, 10004.0], [77.4, 10004.0], [77.5, 10004.0], [77.6, 10004.0], [77.7, 10004.0], [77.8, 10004.0], [77.9, 10004.0], [78.0, 10004.0], [78.1, 10004.0], [78.2, 10004.0], [78.3, 10004.0], [78.4, 10004.0], [78.5, 10004.0], [78.6, 10004.0], [78.7, 10004.0], [78.8, 10004.0], [78.9, 10004.0], [79.0, 10004.0], [79.1, 10004.0], [79.2, 10004.0], [79.3, 10004.0], [79.4, 10004.0], [79.5, 10004.0], [79.6, 10004.0], [79.7, 10004.0], [79.8, 10004.0], [79.9, 10004.0], [80.0, 10004.0], [80.1, 10004.0], [80.2, 10004.0], [80.3, 10004.0], [80.4, 10004.0], [80.5, 10004.0], [80.6, 10004.0], [80.7, 10004.0], [80.8, 10004.0], [80.9, 10004.0], [81.0, 10004.0], [81.1, 10004.0], [81.2, 10004.0], [81.3, 10004.0], [81.4, 10004.0], [81.5, 10004.0], [81.6, 10004.0], [81.7, 10004.0], [81.8, 10004.0], [81.9, 10004.0], [82.0, 10005.0], [82.1, 10005.0], [82.2, 10005.0], [82.3, 10005.0], [82.4, 10005.0], [82.5, 10005.0], [82.6, 10005.0], [82.7, 10005.0], [82.8, 10005.0], [82.9, 10005.0], [83.0, 10005.0], [83.1, 10005.0], [83.2, 10005.0], [83.3, 10005.0], [83.4, 10005.0], [83.5, 10005.0], [83.6, 10005.0], [83.7, 10005.0], [83.8, 10005.0], [83.9, 10005.0], [84.0, 10005.0], [84.1, 10005.0], [84.2, 10005.0], [84.3, 10005.0], [84.4, 10005.0], [84.5, 10005.0], [84.6, 10005.0], [84.7, 10005.0], [84.8, 10005.0], [84.9, 10005.0], [85.0, 10005.0], [85.1, 10005.0], [85.2, 10005.0], [85.3, 10005.0], [85.4, 10005.0], [85.5, 10005.0], [85.6, 10005.0], [85.7, 10005.0], [85.8, 10005.0], [85.9, 10005.0], [86.0, 10005.0], [86.1, 10005.0], [86.2, 10005.0], [86.3, 10005.0], [86.4, 10005.0], [86.5, 10005.0], [86.6, 10005.0], [86.7, 10005.0], [86.8, 10005.0], [86.9, 10005.0], [87.0, 10005.0], [87.1, 10005.0], [87.2, 10005.0], [87.3, 10005.0], [87.4, 10005.0], [87.5, 10005.0], [87.6, 10005.0], [87.7, 10005.0], [87.8, 10005.0], [87.9, 10005.0], [88.0, 10005.0], [88.1, 10005.0], [88.2, 10005.0], [88.3, 10005.0], [88.4, 10005.0], [88.5, 10005.0], [88.6, 10005.0], [88.7, 10006.0], [88.8, 10006.0], [88.9, 10006.0], [89.0, 10006.0], [89.1, 10006.0], [89.2, 10006.0], [89.3, 10006.0], [89.4, 10006.0], [89.5, 10006.0], [89.6, 10006.0], [89.7, 10006.0], [89.8, 10006.0], [89.9, 10006.0], [90.0, 10006.0], [90.1, 10006.0], [90.2, 10006.0], [90.3, 10006.0], [90.4, 10006.0], [90.5, 10006.0], [90.6, 10006.0], [90.7, 10006.0], [90.8, 10006.0], [90.9, 10006.0], [91.0, 10006.0], [91.1, 10006.0], [91.2, 10006.0], [91.3, 10006.0], [91.4, 10006.0], [91.5, 10006.0], [91.6, 10006.0], [91.7, 10006.0], [91.8, 10006.0], [91.9, 10007.0], [92.0, 10007.0], [92.1, 10007.0], [92.2, 10007.0], [92.3, 10007.0], [92.4, 10007.0], [92.5, 10007.0], [92.6, 10007.0], [92.7, 10007.0], [92.8, 10007.0], [92.9, 10007.0], [93.0, 10007.0], [93.1, 10007.0], [93.2, 10007.0], [93.3, 10008.0], [93.4, 10008.0], [93.5, 10008.0], [93.6, 10008.0], [93.7, 10009.0], [93.8, 10009.0], [93.9, 10009.0], [94.0, 10009.0], [94.1, 10010.0], [94.2, 10010.0], [94.3, 10010.0], [94.4, 10010.0], [94.5, 10011.0], [94.6, 10011.0], [94.7, 10011.0], [94.8, 10012.0], [94.9, 10012.0], [95.0, 10012.0], [95.1, 10012.0], [95.2, 10012.0], [95.3, 10012.0], [95.4, 10012.0], [95.5, 10012.0], [95.6, 10012.0], [95.7, 10012.0], [95.8, 10013.0], [95.9, 10013.0], [96.0, 10013.0], [96.1, 10013.0], [96.2, 10013.0], [96.3, 10013.0], [96.4, 10013.0], [96.5, 10014.0], [96.6, 10014.0], [96.7, 10014.0], [96.8, 10014.0], [96.9, 10015.0], [97.0, 10015.0], [97.1, 10016.0], [97.2, 10016.0], [97.3, 10016.0], [97.4, 10016.0], [97.5, 10017.0], [97.6, 10017.0], [97.7, 10018.0], [97.8, 10019.0], [97.9, 10020.0], [98.0, 10020.0], [98.1, 10021.0], [98.2, 10022.0], [98.3, 10023.0], [98.4, 10024.0], [98.5, 10024.0], [98.6, 10024.0], [98.7, 10025.0], [98.8, 10025.0], [98.9, 10028.0], [99.0, 10028.0], [99.1, 10029.0], [99.2, 10030.0], [99.3, 10036.0], [99.4, 10038.0], [99.5, 10156.0], [99.6, 10181.0], [99.7, 10255.0], [99.8, 10348.0], [99.9, 10437.0], [100.0, 10485.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[0.0, 19.0], [0.1, 19.0], [0.2, 19.0], [0.3, 19.0], [0.4, 19.0], [0.5, 19.0], [0.6, 19.0], [0.7, 19.0], [0.8, 19.0], [0.9, 19.0], [1.0, 19.0], [1.1, 19.0], [1.2, 19.0], [1.3, 19.0], [1.4, 19.0], [1.5, 19.0], [1.6, 19.0], [1.7, 19.0], [1.8, 19.0], [1.9, 20.0], [2.0, 20.0], [2.1, 20.0], [2.2, 20.0], [2.3, 20.0], [2.4, 20.0], [2.5, 20.0], [2.6, 20.0], [2.7, 20.0], [2.8, 20.0], [2.9, 20.0], [3.0, 20.0], [3.1, 20.0], [3.2, 20.0], [3.3, 20.0], [3.4, 20.0], [3.5, 20.0], [3.6, 20.0], [3.7, 20.0], [3.8, 20.0], [3.9, 20.0], [4.0, 20.0], [4.1, 20.0], [4.2, 20.0], [4.3, 20.0], [4.4, 20.0], [4.5, 20.0], [4.6, 20.0], [4.7, 20.0], [4.8, 20.0], [4.9, 20.0], [5.0, 20.0], [5.1, 20.0], [5.2, 20.0], [5.3, 20.0], [5.4, 20.0], [5.5, 20.0], [5.6, 20.0], [5.7, 20.0], [5.8, 20.0], [5.9, 20.0], [6.0, 20.0], [6.1, 20.0], [6.2, 20.0], [6.3, 20.0], [6.4, 20.0], [6.5, 20.0], [6.6, 20.0], [6.7, 20.0], [6.8, 20.0], [6.9, 21.0], [7.0, 21.0], [7.1, 21.0], [7.2, 21.0], [7.3, 21.0], [7.4, 21.0], [7.5, 21.0], [7.6, 21.0], [7.7, 21.0], [7.8, 21.0], [7.9, 21.0], [8.0, 21.0], [8.1, 21.0], [8.2, 21.0], [8.3, 21.0], [8.4, 21.0], [8.5, 21.0], [8.6, 21.0], [8.7, 21.0], [8.8, 21.0], [8.9, 21.0], [9.0, 21.0], [9.1, 21.0], [9.2, 21.0], [9.3, 21.0], [9.4, 21.0], [9.5, 21.0], [9.6, 21.0], [9.7, 22.0], [9.8, 22.0], [9.9, 22.0], [10.0, 22.0], [10.1, 22.0], [10.2, 22.0], [10.3, 22.0], [10.4, 22.0], [10.5, 22.0], [10.6, 22.0], [10.7, 22.0], [10.8, 22.0], [10.9, 22.0], [11.0, 22.0], [11.1, 22.0], [11.2, 22.0], [11.3, 22.0], [11.4, 22.0], [11.5, 22.0], [11.6, 22.0], [11.7, 22.0], [11.8, 22.0], [11.9, 22.0], [12.0, 22.0], [12.1, 22.0], [12.2, 22.0], [12.3, 22.0], [12.4, 22.0], [12.5, 22.0], [12.6, 22.0], [12.7, 22.0], [12.8, 22.0], [12.9, 22.0], [13.0, 22.0], [13.1, 22.0], [13.2, 22.0], [13.3, 22.0], [13.4, 22.0], [13.5, 22.0], [13.6, 22.0], [13.7, 22.0], [13.8, 22.0], [13.9, 22.0], [14.0, 22.0], [14.1, 22.0], [14.2, 22.0], [14.3, 22.0], [14.4, 22.0], [14.5, 23.0], [14.6, 23.0], [14.7, 23.0], [14.8, 23.0], [14.9, 23.0], [15.0, 23.0], [15.1, 23.0], [15.2, 23.0], [15.3, 23.0], [15.4, 23.0], [15.5, 23.0], [15.6, 23.0], [15.7, 23.0], [15.8, 23.0], [15.9, 23.0], [16.0, 23.0], [16.1, 23.0], [16.2, 23.0], [16.3, 23.0], [16.4, 23.0], [16.5, 23.0], [16.6, 23.0], [16.7, 23.0], [16.8, 23.0], [16.9, 23.0], [17.0, 23.0], [17.1, 24.0], [17.2, 24.0], [17.3, 24.0], [17.4, 24.0], [17.5, 24.0], [17.6, 24.0], [17.7, 24.0], [17.8, 24.0], [17.9, 25.0], [18.0, 25.0], [18.1, 25.0], [18.2, 25.0], [18.3, 25.0], [18.4, 25.0], [18.5, 25.0], [18.6, 25.0], [18.7, 25.0], [18.8, 25.0], [18.9, 25.0], [19.0, 25.0], [19.1, 25.0], [19.2, 25.0], [19.3, 25.0], [19.4, 25.0], [19.5, 25.0], [19.6, 25.0], [19.7, 25.0], [19.8, 25.0], [19.9, 26.0], [20.0, 26.0], [20.1, 26.0], [20.2, 26.0], [20.3, 26.0], [20.4, 26.0], [20.5, 26.0], [20.6, 26.0], [20.7, 26.0], [20.8, 26.0], [20.9, 26.0], [21.0, 26.0], [21.1, 26.0], [21.2, 28.0], [21.3, 28.0], [21.4, 28.0], [21.5, 28.0], [21.6, 28.0], [21.7, 28.0], [21.8, 28.0], [21.9, 29.0], [22.0, 29.0], [22.1, 29.0], [22.2, 29.0], [22.3, 30.0], [22.4, 30.0], [22.5, 31.0], [22.6, 31.0], [22.7, 31.0], [22.8, 31.0], [22.9, 32.0], [23.0, 32.0], [23.1, 34.0], [23.2, 34.0], [23.3, 34.0], [23.4, 34.0], [23.5, 34.0], [23.6, 34.0], [23.7, 34.0], [23.8, 34.0], [23.9, 34.0], [24.0, 34.0], [24.1, 34.0], [24.2, 34.0], [24.3, 34.0], [24.4, 35.0], [24.5, 36.0], [24.6, 36.0], [24.7, 37.0], [24.8, 37.0], [24.9, 37.0], [25.0, 37.0], [25.1, 38.0], [25.2, 38.0], [25.3, 38.0], [25.4, 38.0], [25.5, 39.0], [25.6, 39.0], [25.7, 39.0], [25.8, 39.0], [25.9, 39.0], [26.0, 39.0], [26.1, 39.0], [26.2, 39.0], [26.3, 39.0], [26.4, 40.0], [26.5, 40.0], [26.6, 40.0], [26.7, 40.0], [26.8, 40.0], [26.9, 40.0], [27.0, 40.0], [27.1, 40.0], [27.2, 40.0], [27.3, 40.0], [27.4, 40.0], [27.5, 40.0], [27.6, 40.0], [27.7, 40.0], [27.8, 40.0], [27.9, 40.0], [28.0, 40.0], [28.1, 40.0], [28.2, 40.0], [28.3, 40.0], [28.4, 41.0], [28.5, 41.0], [28.6, 41.0], [28.7, 41.0], [28.8, 42.0], [28.9, 42.0], [29.0, 42.0], [29.1, 42.0], [29.2, 42.0], [29.3, 42.0], [29.4, 42.0], [29.5, 42.0], [29.6, 42.0], [29.7, 42.0], [29.8, 42.0], [29.9, 42.0], [30.0, 42.0], [30.1, 42.0], [30.2, 42.0], [30.3, 42.0], [30.4, 42.0], [30.5, 42.0], [30.6, 42.0], [30.7, 42.0], [30.8, 43.0], [30.9, 43.0], [31.0, 43.0], [31.1, 43.0], [31.2, 43.0], [31.3, 43.0], [31.4, 43.0], [31.5, 43.0], [31.6, 44.0], [31.7, 44.0], [31.8, 44.0], [31.9, 44.0], [32.0, 44.0], [32.1, 45.0], [32.2, 45.0], [32.3, 45.0], [32.4, 45.0], [32.5, 45.0], [32.6, 45.0], [32.7, 45.0], [32.8, 45.0], [32.9, 46.0], [33.0, 46.0], [33.1, 47.0], [33.2, 47.0], [33.3, 47.0], [33.4, 47.0], [33.5, 47.0], [33.6, 47.0], [33.7, 47.0], [33.8, 47.0], [33.9, 47.0], [34.0, 47.0], [34.1, 47.0], [34.2, 47.0], [34.3, 47.0], [34.4, 47.0], [34.5, 47.0], [34.6, 47.0], [34.7, 47.0], [34.8, 47.0], [34.9, 47.0], [35.0, 47.0], [35.1, 47.0], [35.2, 47.0], [35.3, 47.0], [35.4, 47.0], [35.5, 48.0], [35.6, 48.0], [35.7, 48.0], [35.8, 48.0], [35.9, 48.0], [36.0, 48.0], [36.1, 48.0], [36.2, 48.0], [36.3, 48.0], [36.4, 48.0], [36.5, 48.0], [36.6, 48.0], [36.7, 48.0], [36.8, 48.0], [36.9, 48.0], [37.0, 49.0], [37.1, 49.0], [37.2, 49.0], [37.3, 49.0], [37.4, 49.0], [37.5, 49.0], [37.6, 49.0], [37.7, 49.0], [37.8, 49.0], [37.9, 49.0], [38.0, 49.0], [38.1, 49.0], [38.2, 49.0], [38.3, 49.0], [38.4, 49.0], [38.5, 49.0], [38.6, 50.0], [38.7, 50.0], [38.8, 50.0], [38.9, 50.0], [39.0, 50.0], [39.1, 50.0], [39.2, 50.0], [39.3, 50.0], [39.4, 50.0], [39.5, 50.0], [39.6, 50.0], [39.7, 50.0], [39.8, 50.0], [39.9, 51.0], [40.0, 51.0], [40.1, 51.0], [40.2, 51.0], [40.3, 51.0], [40.4, 51.0], [40.5, 51.0], [40.6, 51.0], [40.7, 51.0], [40.8, 51.0], [40.9, 51.0], [41.0, 51.0], [41.1, 51.0], [41.2, 52.0], [41.3, 52.0], [41.4, 53.0], [41.5, 53.0], [41.6, 53.0], [41.7, 53.0], [41.8, 54.0], [41.9, 54.0], [42.0, 54.0], [42.1, 54.0], [42.2, 54.0], [42.3, 54.0], [42.4, 56.0], [42.5, 57.0], [42.6, 57.0], [42.7, 57.0], [42.8, 57.0], [42.9, 58.0], [43.0, 58.0], [43.1, 58.0], [43.2, 58.0], [43.3, 58.0], [43.4, 58.0], [43.5, 58.0], [43.6, 58.0], [43.7, 58.0], [43.8, 58.0], [43.9, 58.0], [44.0, 59.0], [44.1, 59.0], [44.2, 59.0], [44.3, 59.0], [44.4, 59.0], [44.5, 59.0], [44.6, 60.0], [44.7, 60.0], [44.8, 60.0], [44.9, 60.0], [45.0, 60.0], [45.1, 61.0], [45.2, 61.0], [45.3, 61.0], [45.4, 61.0], [45.5, 61.0], [45.6, 61.0], [45.7, 61.0], [45.8, 61.0], [45.9, 61.0], [46.0, 61.0], [46.1, 61.0], [46.2, 62.0], [46.3, 62.0], [46.4, 62.0], [46.5, 62.0], [46.6, 62.0], [46.7, 62.0], [46.8, 63.0], [46.9, 63.0], [47.0, 64.0], [47.1, 64.0], [47.2, 65.0], [47.3, 65.0], [47.4, 65.0], [47.5, 65.0], [47.6, 65.0], [47.7, 66.0], [47.8, 66.0], [47.9, 66.0], [48.0, 66.0], [48.1, 67.0], [48.2, 67.0], [48.3, 67.0], [48.4, 67.0], [48.5, 67.0], [48.6, 67.0], [48.7, 68.0], [48.8, 68.0], [48.9, 68.0], [49.0, 68.0], [49.1, 68.0], [49.2, 68.0], [49.3, 68.0], [49.4, 68.0], [49.5, 68.0], [49.6, 69.0], [49.7, 69.0], [49.8, 69.0], [49.9, 69.0], [50.0, 69.0], [50.1, 69.0], [50.2, 69.0], [50.3, 69.0], [50.4, 69.0], [50.5, 69.0], [50.6, 69.0], [50.7, 69.0], [50.8, 69.0], [50.9, 69.0], [51.0, 69.0], [51.1, 70.0], [51.2, 70.0], [51.3, 70.0], [51.4, 70.0], [51.5, 70.0], [51.6, 70.0], [51.7, 70.0], [51.8, 71.0], [51.9, 71.0], [52.0, 71.0], [52.1, 71.0], [52.2, 71.0], [52.3, 71.0], [52.4, 71.0], [52.5, 71.0], [52.6, 71.0], [52.7, 71.0], [52.8, 71.0], [52.9, 71.0], [53.0, 71.0], [53.1, 71.0], [53.2, 71.0], [53.3, 71.0], [53.4, 71.0], [53.5, 71.0], [53.6, 71.0], [53.7, 71.0], [53.8, 71.0], [53.9, 72.0], [54.0, 72.0], [54.1, 72.0], [54.2, 72.0], [54.3, 72.0], [54.4, 72.0], [54.5, 72.0], [54.6, 72.0], [54.7, 72.0], [54.8, 72.0], [54.9, 72.0], [55.0, 72.0], [55.1, 72.0], [55.2, 72.0], [55.3, 72.0], [55.4, 72.0], [55.5, 72.0], [55.6, 72.0], [55.7, 72.0], [55.8, 72.0], [55.9, 72.0], [56.0, 72.0], [56.1, 73.0], [56.2, 73.0], [56.3, 73.0], [56.4, 73.0], [56.5, 73.0], [56.6, 73.0], [56.7, 73.0], [56.8, 73.0], [56.9, 73.0], [57.0, 73.0], [57.1, 73.0], [57.2, 73.0], [57.3, 73.0], [57.4, 73.0], [57.5, 73.0], [57.6, 73.0], [57.7, 73.0], [57.8, 73.0], [57.9, 73.0], [58.0, 73.0], [58.1, 73.0], [58.2, 73.0], [58.3, 73.0], [58.4, 73.0], [58.5, 73.0], [58.6, 73.0], [58.7, 73.0], [58.8, 73.0], [58.9, 73.0], [59.0, 74.0], [59.1, 74.0], [59.2, 74.0], [59.3, 74.0], [59.4, 74.0], [59.5, 74.0], [59.6, 74.0], [59.7, 74.0], [59.8, 74.0], [59.9, 74.0], [60.0, 74.0], [60.1, 74.0], [60.2, 74.0], [60.3, 74.0], [60.4, 74.0], [60.5, 74.0], [60.6, 74.0], [60.7, 74.0], [60.8, 74.0], [60.9, 74.0], [61.0, 74.0], [61.1, 74.0], [61.2, 74.0], [61.3, 75.0], [61.4, 75.0], [61.5, 75.0], [61.6, 75.0], [61.7, 75.0], [61.8, 75.0], [61.9, 75.0], [62.0, 75.0], [62.1, 75.0], [62.2, 75.0], [62.3, 75.0], [62.4, 75.0], [62.5, 75.0], [62.6, 76.0], [62.7, 76.0], [62.8, 76.0], [62.9, 76.0], [63.0, 76.0], [63.1, 76.0], [63.2, 76.0], [63.3, 77.0], [63.4, 77.0], [63.5, 77.0], [63.6, 77.0], [63.7, 77.0], [63.8, 77.0], [63.9, 78.0], [64.0, 78.0], [64.1, 79.0], [64.2, 79.0], [64.3, 79.0], [64.4, 79.0], [64.5, 79.0], [64.6, 80.0], [64.7, 80.0], [64.8, 80.0], [64.9, 80.0], [65.0, 80.0], [65.1, 80.0], [65.2, 80.0], [65.3, 80.0], [65.4, 80.0], [65.5, 81.0], [65.6, 81.0], [65.7, 85.0], [65.8, 85.0], [65.9, 85.0], [66.0, 85.0], [66.1, 87.0], [66.2, 87.0], [66.3, 88.0], [66.4, 88.0], [66.5, 88.0], [66.6, 88.0], [66.7, 88.0], [66.8, 88.0], [66.9, 88.0], [67.0, 88.0], [67.1, 88.0], [67.2, 88.0], [67.3, 88.0], [67.4, 88.0], [67.5, 88.0], [67.6, 88.0], [67.7, 88.0], [67.8, 88.0], [67.9, 88.0], [68.0, 88.0], [68.1, 88.0], [68.2, 88.0], [68.3, 89.0], [68.4, 89.0], [68.5, 91.0], [68.6, 91.0], [68.7, 92.0], [68.8, 92.0], [68.9, 92.0], [69.0, 92.0], [69.1, 93.0], [69.2, 93.0], [69.3, 95.0], [69.4, 95.0], [69.5, 95.0], [69.6, 96.0], [69.7, 96.0], [69.8, 96.0], [69.9, 96.0], [70.0, 97.0], [70.1, 97.0], [70.2, 99.0], [70.3, 99.0], [70.4, 100.0], [70.5, 100.0], [70.6, 100.0], [70.7, 101.0], [70.8, 101.0], [70.9, 102.0], [71.0, 102.0], [71.1, 103.0], [71.2, 103.0], [71.3, 103.0], [71.4, 103.0], [71.5, 104.0], [71.6, 104.0], [71.7, 104.0], [71.8, 104.0], [71.9, 104.0], [72.0, 105.0], [72.1, 105.0], [72.2, 107.0], [72.3, 107.0], [72.4, 107.0], [72.5, 107.0], [72.6, 107.0], [72.7, 107.0], [72.8, 109.0], [72.9, 109.0], [73.0, 110.0], [73.1, 110.0], [73.2, 110.0], [73.3, 111.0], [73.4, 111.0], [73.5, 112.0], [73.6, 112.0], [73.7, 112.0], [73.8, 112.0], [73.9, 113.0], [74.0, 113.0], [74.1, 113.0], [74.2, 113.0], [74.3, 113.0], [74.4, 113.0], [74.5, 113.0], [74.6, 114.0], [74.7, 114.0], [74.8, 114.0], [74.9, 114.0], [75.0, 114.0], [75.1, 114.0], [75.2, 114.0], [75.3, 114.0], [75.4, 115.0], [75.5, 115.0], [75.6, 115.0], [75.7, 115.0], [75.8, 115.0], [75.9, 115.0], [76.0, 115.0], [76.1, 115.0], [76.2, 115.0], [76.3, 115.0], [76.4, 115.0], [76.5, 115.0], [76.6, 115.0], [76.7, 115.0], [76.8, 115.0], [76.9, 115.0], [77.0, 115.0], [77.1, 115.0], [77.2, 115.0], [77.3, 115.0], [77.4, 115.0], [77.5, 115.0], [77.6, 115.0], [77.7, 115.0], [77.8, 115.0], [77.9, 115.0], [78.0, 115.0], [78.1, 115.0], [78.2, 116.0], [78.3, 116.0], [78.4, 116.0], [78.5, 116.0], [78.6, 116.0], [78.7, 116.0], [78.8, 116.0], [78.9, 116.0], [79.0, 116.0], [79.1, 117.0], [79.2, 117.0], [79.3, 117.0], [79.4, 117.0], [79.5, 117.0], [79.6, 118.0], [79.7, 118.0], [79.8, 118.0], [79.9, 118.0], [80.0, 118.0], [80.1, 118.0], [80.2, 119.0], [80.3, 119.0], [80.4, 122.0], [80.5, 122.0], [80.6, 122.0], [80.7, 122.0], [80.8, 122.0], [80.9, 122.0], [81.0, 122.0], [81.1, 122.0], [81.2, 122.0], [81.3, 122.0], [81.4, 122.0], [81.5, 123.0], [81.6, 123.0], [81.7, 123.0], [81.8, 123.0], [81.9, 123.0], [82.0, 123.0], [82.1, 123.0], [82.2, 124.0], [82.3, 124.0], [82.4, 124.0], [82.5, 124.0], [82.6, 124.0], [82.7, 124.0], [82.8, 125.0], [82.9, 125.0], [83.0, 125.0], [83.1, 125.0], [83.2, 125.0], [83.3, 125.0], [83.4, 125.0], [83.5, 125.0], [83.6, 125.0], [83.7, 125.0], [83.8, 125.0], [83.9, 125.0], [84.0, 125.0], [84.1, 126.0], [84.2, 126.0], [84.3, 126.0], [84.4, 126.0], [84.5, 126.0], [84.6, 126.0], [84.7, 126.0], [84.8, 126.0], [84.9, 126.0], [85.0, 126.0], [85.1, 126.0], [85.2, 126.0], [85.3, 126.0], [85.4, 126.0], [85.5, 126.0], [85.6, 128.0], [85.7, 128.0], [85.8, 128.0], [85.9, 129.0], [86.0, 129.0], [86.1, 129.0], [86.2, 129.0], [86.3, 129.0], [86.4, 129.0], [86.5, 130.0], [86.6, 130.0], [86.7, 131.0], [86.8, 131.0], [86.9, 132.0], [87.0, 132.0], [87.1, 133.0], [87.2, 134.0], [87.3, 134.0], [87.4, 134.0], [87.5, 134.0], [87.6, 134.0], [87.7, 134.0], [87.8, 134.0], [87.9, 134.0], [88.0, 134.0], [88.1, 134.0], [88.2, 136.0], [88.3, 136.0], [88.4, 136.0], [88.5, 136.0], [88.6, 136.0], [88.7, 136.0], [88.8, 136.0], [88.9, 136.0], [89.0, 136.0], [89.1, 136.0], [89.2, 136.0], [89.3, 136.0], [89.4, 136.0], [89.5, 137.0], [89.6, 137.0], [89.7, 137.0], [89.8, 137.0], [89.9, 137.0], [90.0, 138.0], [90.1, 138.0], [90.2, 138.0], [90.3, 138.0], [90.4, 138.0], [90.5, 138.0], [90.6, 138.0], [90.7, 138.0], [90.8, 138.0], [90.9, 138.0], [91.0, 139.0], [91.1, 139.0], [91.2, 139.0], [91.3, 139.0], [91.4, 139.0], [91.5, 139.0], [91.6, 139.0], [91.7, 139.0], [91.8, 139.0], [91.9, 140.0], [92.0, 140.0], [92.1, 140.0], [92.2, 140.0], [92.3, 141.0], [92.4, 142.0], [92.5, 142.0], [92.6, 143.0], [92.7, 143.0], [92.8, 145.0], [92.9, 145.0], [93.0, 145.0], [93.1, 145.0], [93.2, 145.0], [93.3, 145.0], [93.4, 145.0], [93.5, 145.0], [93.6, 145.0], [93.7, 146.0], [93.8, 146.0], [93.9, 146.0], [94.0, 146.0], [94.1, 146.0], [94.2, 146.0], [94.3, 146.0], [94.4, 146.0], [94.5, 146.0], [94.6, 146.0], [94.7, 146.0], [94.8, 146.0], [94.9, 146.0], [95.0, 147.0], [95.1, 147.0], [95.2, 147.0], [95.3, 147.0], [95.4, 148.0], [95.5, 148.0], [95.6, 149.0], [95.7, 149.0], [95.8, 149.0], [95.9, 149.0], [96.0, 150.0], [96.1, 150.0], [96.2, 157.0], [96.3, 157.0], [96.4, 157.0], [96.5, 157.0], [96.6, 157.0], [96.7, 157.0], [96.8, 157.0], [96.9, 157.0], [97.0, 157.0], [97.1, 157.0], [97.2, 157.0], [97.3, 157.0], [97.4, 157.0], [97.5, 158.0], [97.6, 165.0], [97.7, 165.0], [97.8, 165.0], [97.9, 165.0], [98.0, 165.0], [98.1, 165.0], [98.2, 166.0], [98.3, 166.0], [98.4, 166.0], [98.5, 166.0], [98.6, 166.0], [98.7, 166.0], [98.8, 168.0], [98.9, 173.0], [99.0, 173.0], [99.1, 173.0], [99.2, 173.0], [99.3, 181.0], [99.4, 181.0], [99.5, 7225.0], [99.6, 7225.0], [99.7, 9640.0], [99.8, 9640.0], [99.9, 9731.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 0.0], [40.1, 0.0], [40.2, 0.0], [40.3, 0.0], [40.4, 0.0], [40.5, 0.0], [40.6, 0.0], [40.7, 0.0], [40.8, 0.0], [40.9, 0.0], [41.0, 0.0], [41.1, 0.0], [41.2, 0.0], [41.3, 0.0], [41.4, 0.0], [41.5, 0.0], [41.6, 0.0], [41.7, 0.0], [41.8, 0.0], [41.9, 0.0], [42.0, 0.0], [42.1, 0.0], [42.2, 0.0], [42.3, 0.0], [42.4, 0.0], [42.5, 0.0], [42.6, 0.0], [42.7, 0.0], [42.8, 0.0], [42.9, 0.0], [43.0, 0.0], [43.1, 0.0], [43.2, 0.0], [43.3, 0.0], [43.4, 0.0], [43.5, 0.0], [43.6, 0.0], [43.7, 0.0], [43.8, 0.0], [43.9, 0.0], [44.0, 0.0], [44.1, 0.0], [44.2, 0.0], [44.3, 0.0], [44.4, 0.0], [44.5, 0.0], [44.6, 0.0], [44.7, 0.0], [44.8, 0.0], [44.9, 0.0], [45.0, 0.0], [45.1, 0.0], [45.2, 0.0], [45.3, 0.0], [45.4, 0.0], [45.5, 0.0], [45.6, 0.0], [45.7, 0.0], [45.8, 0.0], [45.9, 0.0], [46.0, 0.0], [46.1, 0.0], [46.2, 0.0], [46.3, 0.0], [46.4, 0.0], [46.5, 0.0], [46.6, 0.0], [46.7, 0.0], [46.8, 0.0], [46.9, 0.0], [47.0, 0.0], [47.1, 0.0], [47.2, 0.0], [47.3, 0.0], [47.4, 0.0], [47.5, 0.0], [47.6, 0.0], [47.7, 0.0], [47.8, 0.0], [47.9, 0.0], [48.0, 0.0], [48.1, 0.0], [48.2, 0.0], [48.3, 0.0], [48.4, 0.0], [48.5, 0.0], [48.6, 0.0], [48.7, 0.0], [48.8, 0.0], [48.9, 0.0], [49.0, 0.0], [49.1, 0.0], [49.2, 0.0], [49.3, 0.0], [49.4, 0.0], [49.5, 0.0], [49.6, 0.0], [49.7, 0.0], [49.8, 0.0], [49.9, 0.0], [50.0, 0.0], [50.1, 0.0], [50.2, 0.0], [50.3, 0.0], [50.4, 0.0], [50.5, 0.0], [50.6, 0.0], [50.7, 0.0], [50.8, 0.0], [50.9, 0.0], [51.0, 0.0], [51.1, 0.0], [51.2, 0.0], [51.3, 0.0], [51.4, 0.0], [51.5, 0.0], [51.6, 0.0], [51.7, 0.0], [51.8, 0.0], [51.9, 0.0], [52.0, 0.0], [52.1, 0.0], [52.2, 0.0], [52.3, 0.0], [52.4, 0.0], [52.5, 0.0], [52.6, 0.0], [52.7, 0.0], [52.8, 0.0], [52.9, 0.0], [53.0, 0.0], [53.1, 0.0], [53.2, 0.0], [53.3, 0.0], [53.4, 0.0], [53.5, 0.0], [53.6, 0.0], [53.7, 0.0], [53.8, 0.0], [53.9, 0.0], [54.0, 0.0], [54.1, 0.0], [54.2, 0.0], [54.3, 0.0], [54.4, 0.0], [54.5, 0.0], [54.6, 0.0], [54.7, 0.0], [54.8, 0.0], [54.9, 0.0], [55.0, 0.0], [55.1, 0.0], [55.2, 0.0], [55.3, 0.0], [55.4, 0.0], [55.5, 0.0], [55.6, 0.0], [55.7, 0.0], [55.8, 0.0], [55.9, 0.0], [56.0, 0.0], [56.1, 0.0], [56.2, 0.0], [56.3, 0.0], [56.4, 0.0], [56.5, 0.0], [56.6, 0.0], [56.7, 0.0], [56.8, 0.0], [56.9, 0.0], [57.0, 0.0], [57.1, 0.0], [57.2, 0.0], [57.3, 0.0], [57.4, 0.0], [57.5, 0.0], [57.6, 0.0], [57.7, 0.0], [57.8, 0.0], [57.9, 0.0], [58.0, 0.0], [58.1, 0.0], [58.2, 0.0], [58.3, 0.0], [58.4, 0.0], [58.5, 0.0], [58.6, 0.0], [58.7, 0.0], [58.8, 0.0], [58.9, 0.0], [59.0, 0.0], [59.1, 0.0], [59.2, 0.0], [59.3, 0.0], [59.4, 0.0], [59.5, 0.0], [59.6, 0.0], [59.7, 0.0], [59.8, 0.0], [59.9, 0.0], [60.0, 0.0], [60.1, 0.0], [60.2, 0.0], [60.3, 0.0], [60.4, 0.0], [60.5, 0.0], [60.6, 0.0], [60.7, 0.0], [60.8, 0.0], [60.9, 0.0], [61.0, 0.0], [61.1, 0.0], [61.2, 0.0], [61.3, 0.0], [61.4, 0.0], [61.5, 0.0], [61.6, 0.0], [61.7, 0.0], [61.8, 0.0], [61.9, 0.0], [62.0, 0.0], [62.1, 0.0], [62.2, 0.0], [62.3, 0.0], [62.4, 0.0], [62.5, 0.0], [62.6, 0.0], [62.7, 0.0], [62.8, 0.0], [62.9, 0.0], [63.0, 0.0], [63.1, 0.0], [63.2, 0.0], [63.3, 0.0], [63.4, 0.0], [63.5, 0.0], [63.6, 0.0], [63.7, 0.0], [63.8, 0.0], [63.9, 0.0], [64.0, 0.0], [64.1, 0.0], [64.2, 0.0], [64.3, 0.0], [64.4, 0.0], [64.5, 0.0], [64.6, 0.0], [64.7, 0.0], [64.8, 0.0], [64.9, 0.0], [65.0, 0.0], [65.1, 0.0], [65.2, 0.0], [65.3, 0.0], [65.4, 0.0], [65.5, 0.0], [65.6, 0.0], [65.7, 0.0], [65.8, 0.0], [65.9, 0.0], [66.0, 0.0], [66.1, 0.0], [66.2, 0.0], [66.3, 0.0], [66.4, 0.0], [66.5, 0.0], [66.6, 0.0], [66.7, 0.0], [66.8, 0.0], [66.9, 0.0], [67.0, 0.0], [67.1, 0.0], [67.2, 0.0], [67.3, 0.0], [67.4, 0.0], [67.5, 0.0], [67.6, 0.0], [67.7, 0.0], [67.8, 0.0], [67.9, 0.0], [68.0, 0.0], [68.1, 0.0], [68.2, 0.0], [68.3, 0.0], [68.4, 0.0], [68.5, 0.0], [68.6, 0.0], [68.7, 0.0], [68.8, 0.0], [68.9, 0.0], [69.0, 0.0], [69.1, 0.0], [69.2, 0.0], [69.3, 0.0], [69.4, 0.0], [69.5, 0.0], [69.6, 0.0], [69.7, 0.0], [69.8, 0.0], [69.9, 0.0], [70.0, 0.0], [70.1, 0.0], [70.2, 0.0], [70.3, 0.0], [70.4, 0.0], [70.5, 0.0], [70.6, 0.0], [70.7, 0.0], [70.8, 0.0], [70.9, 0.0], [71.0, 0.0], [71.1, 0.0], [71.2, 0.0], [71.3, 0.0], [71.4, 0.0], [71.5, 0.0], [71.6, 0.0], [71.7, 0.0], [71.8, 0.0], [71.9, 0.0], [72.0, 0.0], [72.1, 0.0], [72.2, 0.0], [72.3, 0.0], [72.4, 0.0], [72.5, 0.0], [72.6, 0.0], [72.7, 0.0], [72.8, 0.0], [72.9, 0.0], [73.0, 0.0], [73.1, 0.0], [73.2, 0.0], [73.3, 0.0], [73.4, 0.0], [73.5, 0.0], [73.6, 0.0], [73.7, 0.0], [73.8, 0.0], [73.9, 0.0], [74.0, 0.0], [74.1, 0.0], [74.2, 0.0], [74.3, 0.0], [74.4, 0.0], [74.5, 0.0], [74.6, 0.0], [74.7, 0.0], [74.8, 0.0], [74.9, 0.0], [75.0, 0.0], [75.1, 0.0], [75.2, 0.0], [75.3, 0.0], [75.4, 0.0], [75.5, 0.0], [75.6, 0.0], [75.7, 0.0], [75.8, 0.0], [75.9, 0.0], [76.0, 0.0], [76.1, 0.0], [76.2, 0.0], [76.3, 0.0], [76.4, 0.0], [76.5, 0.0], [76.6, 0.0], [76.7, 0.0], [76.8, 0.0], [76.9, 0.0], [77.0, 0.0], [77.1, 0.0], [77.2, 0.0], [77.3, 0.0], [77.4, 0.0], [77.5, 0.0], [77.6, 0.0], [77.7, 0.0], [77.8, 0.0], [77.9, 0.0], [78.0, 0.0], [78.1, 0.0], [78.2, 0.0], [78.3, 0.0], [78.4, 0.0], [78.5, 0.0], [78.6, 0.0], [78.7, 0.0], [78.8, 0.0], [78.9, 0.0], [79.0, 0.0], [79.1, 0.0], [79.2, 0.0], [79.3, 0.0], [79.4, 0.0], [79.5, 0.0], [79.6, 0.0], [79.7, 0.0], [79.8, 0.0], [79.9, 0.0], [80.0, 0.0], [80.1, 0.0], [80.2, 0.0], [80.3, 0.0], [80.4, 0.0], [80.5, 0.0], [80.6, 0.0], [80.7, 0.0], [80.8, 0.0], [80.9, 0.0], [81.0, 0.0], [81.1, 0.0], [81.2, 0.0], [81.3, 0.0], [81.4, 0.0], [81.5, 0.0], [81.6, 0.0], [81.7, 0.0], [81.8, 0.0], [81.9, 0.0], [82.0, 0.0], [82.1, 0.0], [82.2, 0.0], [82.3, 0.0], [82.4, 0.0], [82.5, 0.0], [82.6, 0.0], [82.7, 0.0], [82.8, 0.0], [82.9, 0.0], [83.0, 0.0], [83.1, 0.0], [83.2, 0.0], [83.3, 0.0], [83.4, 0.0], [83.5, 0.0], [83.6, 0.0], [83.7, 0.0], [83.8, 0.0], [83.9, 0.0], [84.0, 0.0], [84.1, 0.0], [84.2, 0.0], [84.3, 0.0], [84.4, 0.0], [84.5, 0.0], [84.6, 0.0], [84.7, 0.0], [84.8, 0.0], [84.9, 0.0], [85.0, 0.0], [85.1, 0.0], [85.2, 0.0], [85.3, 0.0], [85.4, 0.0], [85.5, 0.0], [85.6, 0.0], [85.7, 0.0], [85.8, 0.0], [85.9, 0.0], [86.0, 0.0], [86.1, 0.0], [86.2, 0.0], [86.3, 0.0], [86.4, 0.0], [86.5, 0.0], [86.6, 0.0], [86.7, 0.0], [86.8, 0.0], [86.9, 0.0], [87.0, 0.0], [87.1, 0.0], [87.2, 0.0], [87.3, 0.0], [87.4, 0.0], [87.5, 0.0], [87.6, 0.0], [87.7, 0.0], [87.8, 0.0], [87.9, 0.0], [88.0, 0.0], [88.1, 0.0], [88.2, 0.0], [88.3, 0.0], [88.4, 0.0], [88.5, 0.0], [88.6, 0.0], [88.7, 0.0], [88.8, 0.0], [88.9, 0.0], [89.0, 0.0], [89.1, 0.0], [89.2, 0.0], [89.3, 0.0], [89.4, 0.0], [89.5, 0.0], [89.6, 0.0], [89.7, 0.0], [89.8, 0.0], [89.9, 0.0], [90.0, 0.0], [90.1, 0.0], [90.2, 0.0], [90.3, 0.0], [90.4, 0.0], [90.5, 0.0], [90.6, 0.0], [90.7, 0.0], [90.8, 0.0], [90.9, 0.0], [91.0, 0.0], [91.1, 0.0], [91.2, 0.0], [91.3, 0.0], [91.4, 0.0], [91.5, 0.0], [91.6, 0.0], [91.7, 0.0], [91.8, 0.0], [91.9, 0.0], [92.0, 0.0], [92.1, 0.0], [92.2, 0.0], [92.3, 0.0], [92.4, 0.0], [92.5, 0.0], [92.6, 0.0], [92.7, 0.0], [92.8, 0.0], [92.9, 0.0], [93.0, 0.0], [93.1, 0.0], [93.2, 0.0], [93.3, 0.0], [93.4, 0.0], [93.5, 0.0], [93.6, 0.0], [93.7, 0.0], [93.8, 0.0], [93.9, 0.0], [94.0, 0.0], [94.1, 0.0], [94.2, 0.0], [94.3, 0.0], [94.4, 0.0], [94.5, 0.0], [94.6, 0.0], [94.7, 0.0], [94.8, 0.0], [94.9, 0.0], [95.0, 0.0], [95.1, 0.0], [95.2, 0.0], [95.3, 0.0], [95.4, 0.0], [95.5, 0.0], [95.6, 0.0], [95.7, 0.0], [95.8, 0.0], [95.9, 0.0], [96.0, 0.0], [96.1, 0.0], [96.2, 0.0], [96.3, 0.0], [96.4, 0.0], [96.5, 0.0], [96.6, 0.0], [96.7, 0.0], [96.8, 0.0], [96.9, 0.0], [97.0, 0.0], [97.1, 0.0], [97.2, 0.0], [97.3, 0.0], [97.4, 0.0], [97.5, 0.0], [97.6, 0.0], [97.7, 0.0], [97.8, 0.0], [97.9, 0.0], [98.0, 0.0], [98.1, 0.0], [98.2, 0.0], [98.3, 0.0], [98.4, 0.0], [98.5, 0.0], [98.6, 0.0], [98.7, 0.0], [98.8, 0.0], [98.9, 0.0], [99.0, 0.0], [99.1, 0.0], [99.2, 0.0], [99.3, 0.0], [99.4, 0.0], [99.5, 0.0], [99.6, 0.0], [99.7, 0.0], [99.8, 0.0], [99.9, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 553.0, "series": [{"data": [[0.0, 7.0], [600.0, 49.0], [700.0, 58.0], [800.0, 39.0], [900.0, 34.0], [1000.0, 18.0], [1100.0, 6.0], [1200.0, 5.0], [1300.0, 6.0], [1400.0, 10.0], [1500.0, 5.0], [1600.0, 6.0], [1700.0, 6.0], [1800.0, 3.0], [1900.0, 6.0], [2000.0, 6.0], [2100.0, 8.0], [2200.0, 3.0], [2300.0, 5.0], [2400.0, 1.0], [2500.0, 2.0], [2600.0, 3.0], [2800.0, 7.0], [2700.0, 3.0], [2900.0, 6.0], [3000.0, 6.0], [3100.0, 8.0], [3200.0, 2.0], [3300.0, 3.0], [3400.0, 4.0], [3500.0, 4.0], [3600.0, 3.0], [3800.0, 1.0], [3900.0, 4.0], [4000.0, 4.0], [4200.0, 2.0], [4300.0, 2.0], [4400.0, 2.0], [5000.0, 10.0], [5100.0, 3.0], [5300.0, 2.0], [5200.0, 1.0], [5400.0, 3.0], [5800.0, 1.0], [5700.0, 1.0], [5900.0, 1.0], [6100.0, 2.0], [6000.0, 1.0], [6200.0, 1.0], [6500.0, 1.0], [6600.0, 1.0], [7000.0, 161.0], [7100.0, 17.0], [8500.0, 8.0], [8300.0, 1.0], [8700.0, 15.0], [8600.0, 13.0], [8400.0, 3.0], [8200.0, 1.0], [8900.0, 9.0], [8800.0, 15.0], [9000.0, 11.0], [9100.0, 19.0], [9200.0, 23.0], [9600.0, 22.0], [9400.0, 21.0], [9500.0, 20.0], [9300.0, 19.0], [9700.0, 24.0], [10200.0, 2.0], [10100.0, 3.0], [10000.0, 528.0], [9800.0, 32.0], [9900.0, 26.0], [10400.0, 3.0], [10300.0, 1.0], [100.0, 9.0], [200.0, 14.0], [300.0, 44.0], [400.0, 44.0], [500.0, 55.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[0.0, 379.0], [9700.0, 1.0], [9600.0, 1.0], [100.0, 157.0], [7200.0, 1.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 553.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 197.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1201.0, "series": [{"data": [[0.0, 1201.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 246.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 197.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 986.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 114.79746835443044, "minX": 1.6547331E12, "maxY": 776.8515372168279, "series": [{"data": [[1.65473316E12, 114.79746835443044], [1.6547331E12, 776.8515372168279]], "isOverall": false, "label": "Background Connection Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473316E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 50.0, "maxY": 10429.0, "series": [{"data": [[60.0, 7045.0], [67.0, 212.0], [87.0, 7087.0], [86.0, 7063.666666666667], [90.0, 2453.666666666667], [88.0, 7135.0], [94.0, 1040.0], [93.0, 6360.5], [92.0, 6621.0], [101.0, 4928.625], [106.0, 3349.0], [111.0, 5183.454545454545], [114.0, 5085.5], [117.0, 4467.0], [122.0, 3579.8333333333335], [121.0, 3797.8571428571427], [127.0, 3232.9166666666665], [125.0, 5331.5], [134.0, 6500.5], [133.0, 7533.0], [132.0, 8680.444444444445], [131.0, 7982.758620689655], [130.0, 2796.6666666666665], [137.0, 4615.5], [175.0, 7066.0], [174.0, 8726.333333333334], [173.0, 10003.4], [172.0, 10004.0], [171.0, 10004.666666666666], [170.0, 2811.0], [177.0, 9941.166666666668], [198.0, 10004.0], [202.0, 6389.0], [209.0, 7165.333333333333], [223.0, 10002.0], [231.0, 10005.5], [244.0, 10005.0], [243.0, 10005.0], [242.0, 10006.0], [241.0, 10006.0], [240.0, 10006.5], [255.0, 10014.0], [254.0, 10018.4], [270.0, 10012.0], [271.0, 10011.0], [269.0, 10012.0], [268.0, 10012.0], [267.0, 10012.5], [266.0, 10013.5], [265.0, 10012.777777777777], [263.0, 10020.428571428572], [256.0, 10009.0], [259.0, 10013.0], [258.0, 10019.2], [262.0, 10023.0], [261.0, 10021.0], [260.0, 10016.142857142859], [282.0, 10010.0], [283.0, 10009.333333333334], [281.0, 10009.666666666666], [279.0, 10005.0], [278.0, 10005.0], [277.0, 10004.666666666666], [276.0, 10003.0], [273.0, 5833.0], [272.0, 10009.0], [303.0, 10005.0], [300.0, 10004.0], [289.0, 10003.0], [299.0, 9739.0], [298.0, 9975.0], [297.0, 76.0], [296.0, 10003.5], [295.0, 9952.5], [294.0, 9856.5], [293.0, 9672.0], [292.0, 10001.6], [317.0, 10002.5], [314.0, 9938.0], [312.0, 10002.5], [307.0, 10003.5], [306.0, 9955.0], [305.0, 10003.5], [335.0, 10003.0], [332.0, 10003.5], [327.0, 9914.0], [326.0, 9799.0], [325.0, 7523.0], [323.0, 10004.0], [321.0, 10005.333333333334], [350.0, 10003.666666666666], [349.0, 10004.0], [347.0, 9748.0], [346.0, 10003.5], [340.0, 7514.0], [338.0, 8979.444444444445], [337.0, 10012.0], [367.0, 9752.0], [366.0, 9842.0], [365.0, 10004.25], [362.0, 5746.0], [361.0, 9816.0], [356.0, 9846.0], [352.0, 7365.0], [382.0, 10004.4], [379.0, 10001.0], [376.0, 10003.0], [374.0, 9690.0], [370.0, 10005.0], [368.0, 10004.0], [399.0, 10003.0], [397.0, 9697.5], [395.0, 7969.5], [393.0, 6194.0], [391.0, 9773.0], [389.0, 10003.75], [387.0, 9791.75], [386.0, 10004.0], [412.0, 9737.0], [411.0, 7851.75], [410.0, 10001.0], [407.0, 10001.0], [400.0, 10004.0], [430.0, 9733.5], [427.0, 9664.0], [425.0, 8423.0], [424.0, 9485.0], [423.0, 10000.0], [417.0, 10004.0], [416.0, 10003.0], [422.0, 10005.0], [421.0, 10002.0], [419.0, 9723.0], [418.0, 8727.0], [434.0, 753.0], [432.0, 509.4583333333332], [433.0, 10005.0], [435.0, 2850.75], [436.0, 3260.285714285714], [437.0, 597.0], [438.0, 1236.5625], [443.0, 1723.111111111111], [444.0, 3664.666666666667], [446.0, 557.2222222222222], [442.0, 10005.0], [451.0, 2589.3846153846152], [462.0, 2313.090909090909], [463.0, 10003.0], [459.0, 10005.0], [458.0, 9526.0], [457.0, 2137.0], [450.0, 10001.0], [476.0, 619.0], [471.0, 710.0], [467.0, 6868.666666666667], [466.0, 9929.2], [465.0, 9776.0], [464.0, 10004.0], [468.0, 653.3076923076923], [472.0, 3178.0], [473.0, 640.2142857142858], [474.0, 689.0], [475.0, 1301.75], [479.0, 10002.0], [478.0, 10001.666666666666], [477.0, 9787.5], [480.0, 3876.5000000000005], [484.0, 475.0], [485.0, 592.6250000000001], [492.0, 1190.896551724138], [494.0, 3513.35], [491.0, 10001.0], [488.0, 10002.0], [483.0, 2157.0], [510.0, 5892.0], [503.0, 4181.333333333334], [504.0, 595.2857142857143], [505.0, 719.3333333333334], [511.0, 10001.0], [509.0, 9934.5], [499.0, 10004.0], [497.0, 10002.333333333334], [506.0, 9522.333333333334], [502.0, 10001.0], [501.0, 9498.0], [514.0, 770.5], [513.0, 906.5], [512.0, 9641.0], [518.0, 5241.0], [516.0, 9791.5], [522.0, 732.5333333333332], [521.0, 9372.5], [520.0, 10002.5], [523.0, 9422.0], [524.0, 783.5], [526.0, 1523.6363636363635], [527.0, 7785.0], [536.0, 768.0], [539.0, 700.0], [538.0, 10002.333333333334], [537.0, 10004.0], [540.0, 1952.25], [543.0, 9622.0], [533.0, 2277.0], [532.0, 10004.0], [530.0, 5659.0], [541.0, 9936.5], [555.0, 683.5], [544.0, 728.3333333333334], [546.0, 5250.5], [547.0, 4235.2], [548.0, 817.25], [563.0, 2735.222222222222], [571.0, 979.2], [569.0, 9691.833333333334], [551.0, 10003.666666666666], [574.0, 3136.5], [575.0, 9079.0], [562.0, 10003.0], [560.0, 10005.0], [565.0, 3507.1428571428573], [564.0, 9716.0], [552.0, 706.0], [553.0, 2378.0], [554.0, 1157.0], [556.0, 743.0], [557.0, 3695.666666666667], [605.0, 2223.5], [576.0, 900.0], [583.0, 3107.5], [580.0, 9360.0], [579.0, 10000.5], [577.0, 10003.5], [604.0, 10002.0], [600.0, 9050.0], [584.0, 844.0], [585.0, 6473.0], [586.0, 720.0], [588.0, 10002.0], [587.0, 7747.5], [591.0, 9840.666666666666], [589.0, 9630.5], [593.0, 5180.25], [596.0, 859.6666666666666], [598.0, 5625.833333333333], [606.0, 9561.0], [635.0, 10005.0], [613.0, 1353.0], [623.0, 1082.0], [609.0, 10001.0], [608.0, 10001.0], [612.0, 8493.666666666666], [611.0, 10000.0], [632.0, 5935.5], [615.0, 10005.0], [614.0, 9436.0], [630.0, 10003.666666666666], [629.0, 1952.0], [627.0, 9222.5], [626.0, 1450.0], [622.0, 9412.0], [621.0, 9228.0], [618.0, 9937.0], [616.0, 9484.5], [669.0, 5572.0], [649.0, 936.0], [648.0, 8302.0], [651.0, 9779.5], [650.0, 10004.0], [654.0, 8818.0], [652.0, 10005.0], [671.0, 9702.666666666666], [666.0, 10006.0], [665.0, 9711.666666666666], [664.0, 10002.5], [647.0, 5309.5], [643.0, 9794.333333333334], [655.0, 9580.5], [662.0, 9145.0], [660.0, 9574.0], [657.0, 7086.333333333333], [699.0, 10003.0], [702.0, 9551.0], [697.0, 9393.0], [694.0, 8314.666666666666], [693.0, 9582.0], [688.0, 7448.25], [685.0, 10002.5], [683.0, 9430.0], [679.0, 1517.0], [677.0, 9147.333333333334], [675.0, 10006.0], [674.0, 10001.0], [721.0, 5328.5], [735.0, 7239.666666666666], [734.0, 9494.5], [733.0, 10003.0], [729.0, 8871.0], [718.0, 9735.0], [707.0, 9343.0], [705.0, 9265.0], [710.0, 10001.5], [709.0, 8696.0], [717.0, 10001.0], [715.0, 1384.0], [712.0, 9729.666666666666], [726.0, 9835.5], [725.0, 7219.0], [724.0, 10002.0], [720.0, 6644.0], [766.0, 9333.5], [761.0, 9478.25], [739.0, 9572.5], [736.0, 5061.5], [759.0, 5295.0], [758.0, 10005.5], [757.0, 10002.0], [756.0, 4654.5], [751.0, 8716.0], [749.0, 10008.0], [748.0, 9941.333333333334], [746.0, 41.0], [744.0, 9655.8], [794.0, 5398.0], [799.0, 9627.0], [793.0, 10005.0], [775.0, 9679.333333333334], [772.0, 10002.75], [771.0, 10001.0], [791.0, 9874.0], [790.0, 9648.0], [788.0, 7019.0], [786.0, 10002.0], [782.0, 9779.5], [780.0, 10004.666666666666], [776.0, 7885.0], [829.0, 9774.5], [831.0, 5993.0], [828.0, 10004.5], [827.0, 10002.0], [826.0, 8581.0], [807.0, 1638.0], [806.0, 10005.0], [802.0, 10007.5], [800.0, 10004.0], [815.0, 10004.0], [811.0, 7558.0], [809.0, 1540.0], [808.0, 9215.0], [821.0, 5678.75], [819.0, 8598.5], [818.0, 9030.0], [817.0, 10006.25], [860.0, 10004.0], [863.0, 9255.0], [859.0, 8790.0], [858.0, 10005.0], [856.0, 10006.0], [837.0, 9695.75], [836.0, 9841.0], [834.0, 10005.0], [833.0, 10005.0], [847.0, 7165.666666666666], [845.0, 8531.0], [843.0, 10004.0], [841.0, 10005.0], [855.0, 10004.0], [853.0, 6325.0], [852.0, 9226.0], [849.0, 9765.2], [871.0, 9398.0], [892.0, 8752.0], [889.0, 6929.0], [885.0, 10004.0], [883.0, 9665.833333333334], [882.0, 10008.666666666666], [875.0, 9114.0], [874.0, 10006.0], [870.0, 9998.666666666666], [866.0, 10003.0], [864.0, 5731.5], [921.0, 10003.5], [925.0, 6627.666666666667], [926.0, 6448.0], [923.0, 10002.25], [919.0, 9303.8], [915.0, 10006.0], [911.0, 10018.5], [896.0, 10001.0], [910.0, 10015.666666666666], [909.0, 10019.5], [908.0, 10012.0], [907.0, 8738.0], [906.0, 9631.75], [905.0, 10002.0], [904.0, 10004.5], [955.0, 9438.0], [959.0, 7535.0], [954.0, 7546.6], [953.0, 8425.0], [951.0, 8803.0], [950.0, 9950.0], [946.0, 6919.5], [943.0, 8936.0], [928.0, 9318.5], [933.0, 8691.0], [931.0, 9262.0], [935.0, 6299.0], [934.0, 9353.0], [941.0, 9047.0], [939.0, 4901.5], [938.0, 9001.0], [937.0, 9293.0], [989.0, 4941.5], [990.0, 8311.0], [988.0, 7524.25], [986.0, 1099.0], [981.0, 5519.5], [979.0, 9625.0], [978.0, 1307.0], [976.0, 9402.0], [975.0, 8968.0], [965.0, 8734.333333333334], [961.0, 8670.0], [967.0, 9447.0], [966.0, 8826.0], [973.0, 9454.0], [972.0, 9160.5], [970.0, 292.0], [969.0, 9190.0], [968.0, 9525.0], [1000.0, 6304.2682926829275], [997.0, 10348.0], [995.0, 9162.666666666666], [994.0, 266.0], [993.0, 10181.0], [992.0, 10429.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[574.2360208062424, 6508.080624187262]], "isOverall": false, "label": "MQTT Connect -Aggregated", "isController": false}, {"data": [[604.0, 19.0], [600.0, 20.0], [664.0, 20.0], [175.0, 20.0], [173.0, 20.0], [170.0, 7225.0], [712.0, 20.0], [776.0, 25.0], [988.0, 55.0], [991.0, 69.0], [992.0, 64.75862068965516], [993.0, 68.6470588235294], [994.0, 63.88888888888889], [996.0, 73.0], [999.0, 48.52380952380951], [1000.0, 77.77142857142854], [338.0, 28.0], [90.0, 58.0], [101.0, 20.0], [111.0, 9685.5]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[979.4174397031541, 121.49536178107604]], "isOverall": false, "label": "MQTT DisConnect-Aggregated", "isController": false}, {"data": [[612.0, 0.0], [609.0, 0.0], [669.0, 0.0], [724.0, 0.0], [794.0, 0.0], [51.0, 0.0], [50.0, 0.0], [53.0, 0.0], [52.0, 0.0], [55.0, 0.0], [54.0, 0.0], [57.0, 0.0], [56.0, 0.0], [957.0, 0.0], [958.0, 0.0], [959.0, 0.0], [58.0, 0.0], [975.0, 0.0], [961.0, 0.0], [962.0, 0.0], [963.0, 0.0], [986.0, 0.0], [987.0, 0.0], [968.0, 0.0], [969.0, 0.0], [974.0, 0.0], [976.0, 0.0], [973.0, 0.0], [977.0, 0.0], [978.0, 0.0], [982.0, 0.0], [983.0, 0.0], [993.0, 0.0], [994.0, 0.0], [995.0, 0.0], [996.0, 0.0], [1000.0, 0.0], [91.0, 0.0], [90.0, 0.0], [93.0, 0.0], [102.0, 0.0], [130.0, 0.0], [175.0, 0.0], [177.0, 0.0], [346.0, 0.0], [367.0, 0.0], [469.0, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}, {"data": [[953.7703435804698, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.6547331E12, "maxY": 1064.1, "series": [{"data": [[1.65473316E12, 117.15], [1.6547331E12, 1064.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65473316E12, 0.0], [1.6547331E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473316E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6547331E12, "maxY": 6557.20684736092, "series": [{"data": [[1.65473316E12, 6001.647058823531], [1.6547331E12, 6557.20684736092]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[1.65473316E12, 3260.8333333333335], [1.6547331E12, 86.15572232645401]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.65473316E12, 0.0], [1.6547331E12, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473316E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6547331E12, "maxY": 4.9E-324, "series": [{"data": [[1.65473316E12, 0.0], [1.6547331E12, 0.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[1.65473316E12, 0.0], [1.6547331E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.65473316E12, 0.0], [1.6547331E12, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473316E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6547331E12, "maxY": 4.9E-324, "series": [{"data": [[1.65473316E12, 0.0], [1.6547331E12, 0.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[1.65473316E12, 0.0], [1.6547331E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.65473316E12, 0.0], [1.6547331E12, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473316E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6547331E12, "maxY": 9731.0, "series": [{"data": [[1.65473316E12, 9731.0], [1.6547331E12, 7190.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65473316E12, 7103.0], [1.6547331E12, 7047.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65473316E12, 9731.0], [1.6547331E12, 7158.560000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65473316E12, 9649.1], [1.6547331E12, 7053.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65473316E12, 0.0], [1.6547331E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65473316E12, 45.0], [1.6547331E12, 68.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473316E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 10002.0, "series": [{"data": [[514.0, 0.0], [560.0, 0.0], [9.0, 0.0], [178.0, 7049.0], [12.0, 1035.5], [3.0, 5047.0], [50.0, 7051.0], [270.0, 21.0], [18.0, 5094.0], [318.0, 635.0], [19.0, 0.0], [90.0, 0.0], [23.0, 53.0], [433.0, 20.0], [7.0, 67.0], [118.0, 131.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[514.0, 10002.0], [8.0, 4278.5], [18.0, 5195.0], [19.0, 6117.5], [90.0, 9878.0], [23.0, 7095.0], [433.0, 9832.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 560.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 4.9E-324, "series": [{"data": [[514.0, 0.0], [560.0, 0.0], [9.0, 0.0], [178.0, 0.0], [12.0, 0.0], [3.0, 0.0], [50.0, 0.0], [270.0, 0.0], [18.0, 0.0], [318.0, 0.0], [19.0, 0.0], [90.0, 0.0], [23.0, 0.0], [433.0, 0.0], [7.0, 0.0], [118.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[514.0, 0.0], [8.0, 0.0], [18.0, 0.0], [19.0, 0.0], [90.0, 0.0], [23.0, 0.0], [433.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 560.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.43333333333333335, "minX": 1.6547331E12, "maxY": 43.4, "series": [{"data": [[1.65473316E12, 0.43333333333333335], [1.6547331E12, 43.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473316E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6547331E12, "maxY": 26.783333333333335, "series": [{"data": [[1.65473316E12, 0.6166666666666667], [1.6547331E12, 26.783333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6547331E12, 0.016666666666666666]], "isOverall": false, "label": "501", "isController": false}, {"data": [[1.65473316E12, 2.0166666666666666], [1.6547331E12, 14.4]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473316E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6547331E12, "maxY": 14.4, "series": [{"data": [[1.65473316E12, 0.25], [1.6547331E12, 8.966666666666667]], "isOverall": false, "label": "MQTT Connect -success", "isController": false}, {"data": [[1.65473316E12, 2.0166666666666666], [1.6547331E12, 14.4]], "isOverall": false, "label": "MQTT Connect -failure", "isController": false}, {"data": [[1.65473316E12, 0.1], [1.6547331E12, 8.866666666666667]], "isOverall": false, "label": "MQTT DisConnect-success", "isController": false}, {"data": [[1.6547331E12, 0.016666666666666666]], "isOverall": false, "label": "MQTT DisConnect-failure", "isController": false}, {"data": [[1.65473316E12, 0.26666666666666666], [1.6547331E12, 8.95]], "isOverall": false, "label": "MQTT Sub Sampler-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473316E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6166666666666667, "minX": 1.6547331E12, "maxY": 26.783333333333335, "series": [{"data": [[1.65473316E12, 0.6166666666666667], [1.6547331E12, 26.783333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65473316E12, 2.0166666666666666], [1.6547331E12, 14.416666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473316E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

