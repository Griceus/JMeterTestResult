/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 10037.0, "series": [{"data": [[0.0, 13.0], [0.1, 38.0], [0.2, 38.0], [0.3, 38.0], [0.4, 39.0], [0.5, 39.0], [0.6, 39.0], [0.7, 39.0], [0.8, 39.0], [0.9, 39.0], [1.0, 39.0], [1.1, 39.0], [1.2, 39.0], [1.3, 39.0], [1.4, 39.0], [1.5, 40.0], [1.6, 40.0], [1.7, 40.0], [1.8, 40.0], [1.9, 40.0], [2.0, 40.0], [2.1, 40.0], [2.2, 40.0], [2.3, 40.0], [2.4, 40.0], [2.5, 40.0], [2.6, 40.0], [2.7, 40.0], [2.8, 40.0], [2.9, 40.0], [3.0, 40.0], [3.1, 40.0], [3.2, 41.0], [3.3, 41.0], [3.4, 41.0], [3.5, 41.0], [3.6, 41.0], [3.7, 41.0], [3.8, 41.0], [3.9, 41.0], [4.0, 41.0], [4.1, 41.0], [4.2, 41.0], [4.3, 41.0], [4.4, 41.0], [4.5, 41.0], [4.6, 41.0], [4.7, 41.0], [4.8, 41.0], [4.9, 41.0], [5.0, 41.0], [5.1, 41.0], [5.2, 41.0], [5.3, 42.0], [5.4, 42.0], [5.5, 42.0], [5.6, 42.0], [5.7, 42.0], [5.8, 42.0], [5.9, 42.0], [6.0, 42.0], [6.1, 42.0], [6.2, 42.0], [6.3, 42.0], [6.4, 42.0], [6.5, 42.0], [6.6, 42.0], [6.7, 42.0], [6.8, 42.0], [6.9, 42.0], [7.0, 42.0], [7.1, 43.0], [7.2, 43.0], [7.3, 43.0], [7.4, 43.0], [7.5, 43.0], [7.6, 43.0], [7.7, 43.0], [7.8, 43.0], [7.9, 43.0], [8.0, 43.0], [8.1, 43.0], [8.2, 43.0], [8.3, 43.0], [8.4, 43.0], [8.5, 43.0], [8.6, 43.0], [8.7, 44.0], [8.8, 44.0], [8.9, 44.0], [9.0, 44.0], [9.1, 44.0], [9.2, 44.0], [9.3, 44.0], [9.4, 44.0], [9.5, 44.0], [9.6, 44.0], [9.7, 44.0], [9.8, 44.0], [9.9, 44.0], [10.0, 44.0], [10.1, 44.0], [10.2, 44.0], [10.3, 44.0], [10.4, 44.0], [10.5, 44.0], [10.6, 44.0], [10.7, 45.0], [10.8, 45.0], [10.9, 45.0], [11.0, 45.0], [11.1, 45.0], [11.2, 45.0], [11.3, 45.0], [11.4, 45.0], [11.5, 45.0], [11.6, 45.0], [11.7, 45.0], [11.8, 45.0], [11.9, 45.0], [12.0, 45.0], [12.1, 45.0], [12.2, 45.0], [12.3, 45.0], [12.4, 46.0], [12.5, 46.0], [12.6, 46.0], [12.7, 46.0], [12.8, 46.0], [12.9, 46.0], [13.0, 46.0], [13.1, 46.0], [13.2, 46.0], [13.3, 46.0], [13.4, 46.0], [13.5, 46.0], [13.6, 46.0], [13.7, 46.0], [13.8, 46.0], [13.9, 46.0], [14.0, 46.0], [14.1, 47.0], [14.2, 47.0], [14.3, 47.0], [14.4, 47.0], [14.5, 47.0], [14.6, 47.0], [14.7, 47.0], [14.8, 47.0], [14.9, 47.0], [15.0, 47.0], [15.1, 47.0], [15.2, 47.0], [15.3, 47.0], [15.4, 47.0], [15.5, 47.0], [15.6, 47.0], [15.7, 47.0], [15.8, 47.0], [15.9, 48.0], [16.0, 48.0], [16.1, 48.0], [16.2, 48.0], [16.3, 48.0], [16.4, 48.0], [16.5, 48.0], [16.6, 48.0], [16.7, 48.0], [16.8, 48.0], [16.9, 48.0], [17.0, 48.0], [17.1, 48.0], [17.2, 48.0], [17.3, 48.0], [17.4, 48.0], [17.5, 48.0], [17.6, 49.0], [17.7, 49.0], [17.8, 49.0], [17.9, 49.0], [18.0, 49.0], [18.1, 49.0], [18.2, 49.0], [18.3, 49.0], [18.4, 49.0], [18.5, 49.0], [18.6, 49.0], [18.7, 49.0], [18.8, 49.0], [18.9, 49.0], [19.0, 49.0], [19.1, 49.0], [19.2, 49.0], [19.3, 50.0], [19.4, 50.0], [19.5, 50.0], [19.6, 50.0], [19.7, 50.0], [19.8, 50.0], [19.9, 50.0], [20.0, 50.0], [20.1, 50.0], [20.2, 50.0], [20.3, 50.0], [20.4, 50.0], [20.5, 50.0], [20.6, 50.0], [20.7, 50.0], [20.8, 50.0], [20.9, 50.0], [21.0, 50.0], [21.1, 50.0], [21.2, 50.0], [21.3, 50.0], [21.4, 51.0], [21.5, 51.0], [21.6, 51.0], [21.7, 51.0], [21.8, 51.0], [21.9, 51.0], [22.0, 51.0], [22.1, 51.0], [22.2, 51.0], [22.3, 51.0], [22.4, 51.0], [22.5, 51.0], [22.6, 51.0], [22.7, 51.0], [22.8, 51.0], [22.9, 52.0], [23.0, 52.0], [23.1, 52.0], [23.2, 52.0], [23.3, 52.0], [23.4, 52.0], [23.5, 52.0], [23.6, 52.0], [23.7, 52.0], [23.8, 52.0], [23.9, 52.0], [24.0, 52.0], [24.1, 52.0], [24.2, 52.0], [24.3, 52.0], [24.4, 52.0], [24.5, 52.0], [24.6, 52.0], [24.7, 53.0], [24.8, 53.0], [24.9, 53.0], [25.0, 53.0], [25.1, 53.0], [25.2, 53.0], [25.3, 53.0], [25.4, 53.0], [25.5, 53.0], [25.6, 53.0], [25.7, 53.0], [25.8, 53.0], [25.9, 53.0], [26.0, 54.0], [26.1, 54.0], [26.2, 54.0], [26.3, 54.0], [26.4, 54.0], [26.5, 54.0], [26.6, 54.0], [26.7, 54.0], [26.8, 54.0], [26.9, 54.0], [27.0, 54.0], [27.1, 55.0], [27.2, 55.0], [27.3, 55.0], [27.4, 55.0], [27.5, 55.0], [27.6, 55.0], [27.7, 55.0], [27.8, 55.0], [27.9, 55.0], [28.0, 55.0], [28.1, 55.0], [28.2, 55.0], [28.3, 55.0], [28.4, 56.0], [28.5, 56.0], [28.6, 56.0], [28.7, 56.0], [28.8, 56.0], [28.9, 56.0], [29.0, 56.0], [29.1, 56.0], [29.2, 56.0], [29.3, 56.0], [29.4, 56.0], [29.5, 56.0], [29.6, 56.0], [29.7, 56.0], [29.8, 57.0], [29.9, 57.0], [30.0, 57.0], [30.1, 57.0], [30.2, 57.0], [30.3, 57.0], [30.4, 57.0], [30.5, 57.0], [30.6, 57.0], [30.7, 58.0], [30.8, 58.0], [30.9, 58.0], [31.0, 58.0], [31.1, 58.0], [31.2, 59.0], [31.3, 59.0], [31.4, 59.0], [31.5, 59.0], [31.6, 59.0], [31.7, 59.0], [31.8, 59.0], [31.9, 60.0], [32.0, 60.0], [32.1, 60.0], [32.2, 60.0], [32.3, 60.0], [32.4, 61.0], [32.5, 61.0], [32.6, 61.0], [32.7, 61.0], [32.8, 61.0], [32.9, 61.0], [33.0, 62.0], [33.1, 62.0], [33.2, 62.0], [33.3, 62.0], [33.4, 62.0], [33.5, 63.0], [33.6, 63.0], [33.7, 63.0], [33.8, 63.0], [33.9, 63.0], [34.0, 63.0], [34.1, 64.0], [34.2, 64.0], [34.3, 64.0], [34.4, 64.0], [34.5, 64.0], [34.6, 65.0], [34.7, 65.0], [34.8, 65.0], [34.9, 65.0], [35.0, 65.0], [35.1, 65.0], [35.2, 66.0], [35.3, 66.0], [35.4, 66.0], [35.5, 66.0], [35.6, 66.0], [35.7, 66.0], [35.8, 67.0], [35.9, 67.0], [36.0, 67.0], [36.1, 67.0], [36.2, 67.0], [36.3, 68.0], [36.4, 68.0], [36.5, 68.0], [36.6, 68.0], [36.7, 68.0], [36.8, 69.0], [36.9, 69.0], [37.0, 69.0], [37.1, 69.0], [37.2, 70.0], [37.3, 70.0], [37.4, 70.0], [37.5, 70.0], [37.6, 71.0], [37.7, 71.0], [37.8, 71.0], [37.9, 71.0], [38.0, 71.0], [38.1, 72.0], [38.2, 72.0], [38.3, 72.0], [38.4, 72.0], [38.5, 72.0], [38.6, 73.0], [38.7, 73.0], [38.8, 73.0], [38.9, 73.0], [39.0, 73.0], [39.1, 73.0], [39.2, 73.0], [39.3, 73.0], [39.4, 73.0], [39.5, 73.0], [39.6, 74.0], [39.7, 74.0], [39.8, 74.0], [39.9, 74.0], [40.0, 74.0], [40.1, 75.0], [40.2, 75.0], [40.3, 75.0], [40.4, 75.0], [40.5, 75.0], [40.6, 75.0], [40.7, 76.0], [40.8, 76.0], [40.9, 76.0], [41.0, 76.0], [41.1, 77.0], [41.2, 77.0], [41.3, 77.0], [41.4, 77.0], [41.5, 77.0], [41.6, 78.0], [41.7, 78.0], [41.8, 78.0], [41.9, 78.0], [42.0, 79.0], [42.1, 79.0], [42.2, 79.0], [42.3, 79.0], [42.4, 79.0], [42.5, 79.0], [42.6, 79.0], [42.7, 80.0], [42.8, 81.0], [42.9, 82.0], [43.0, 82.0], [43.1, 83.0], [43.2, 83.0], [43.3, 83.0], [43.4, 84.0], [43.5, 84.0], [43.6, 85.0], [43.7, 85.0], [43.8, 85.0], [43.9, 85.0], [44.0, 85.0], [44.1, 85.0], [44.2, 85.0], [44.3, 86.0], [44.4, 87.0], [44.5, 87.0], [44.6, 87.0], [44.7, 87.0], [44.8, 88.0], [44.9, 88.0], [45.0, 88.0], [45.1, 88.0], [45.2, 89.0], [45.3, 89.0], [45.4, 89.0], [45.5, 90.0], [45.6, 90.0], [45.7, 91.0], [45.8, 91.0], [45.9, 91.0], [46.0, 91.0], [46.1, 92.0], [46.2, 93.0], [46.3, 93.0], [46.4, 94.0], [46.5, 94.0], [46.6, 95.0], [46.7, 96.0], [46.8, 96.0], [46.9, 97.0], [47.0, 98.0], [47.1, 100.0], [47.2, 101.0], [47.3, 102.0], [47.4, 103.0], [47.5, 103.0], [47.6, 106.0], [47.7, 108.0], [47.8, 109.0], [47.9, 109.0], [48.0, 111.0], [48.1, 113.0], [48.2, 116.0], [48.3, 117.0], [48.4, 119.0], [48.5, 119.0], [48.6, 133.0], [48.7, 136.0], [48.8, 145.0], [48.9, 152.0], [49.0, 159.0], [49.1, 162.0], [49.2, 166.0], [49.3, 171.0], [49.4, 190.0], [49.5, 201.0], [49.6, 204.0], [49.7, 205.0], [49.8, 212.0], [49.9, 214.0], [50.0, 217.0], [50.1, 221.0], [50.2, 222.0], [50.3, 225.0], [50.4, 234.0], [50.5, 238.0], [50.6, 240.0], [50.7, 247.0], [50.8, 264.0], [50.9, 287.0], [51.0, 340.0], [51.1, 359.0], [51.2, 520.0], [51.3, 628.0], [51.4, 699.0], [51.5, 818.0], [51.6, 843.0], [51.7, 922.0], [51.8, 1026.0], [51.9, 1039.0], [52.0, 1040.0], [52.1, 1040.0], [52.2, 1040.0], [52.3, 1040.0], [52.4, 1041.0], [52.5, 1041.0], [52.6, 1041.0], [52.7, 1041.0], [52.8, 1042.0], [52.9, 1042.0], [53.0, 1042.0], [53.1, 1042.0], [53.2, 1042.0], [53.3, 1042.0], [53.4, 1043.0], [53.5, 1044.0], [53.6, 1044.0], [53.7, 1045.0], [53.8, 1045.0], [53.9, 1045.0], [54.0, 1046.0], [54.1, 1046.0], [54.2, 1046.0], [54.3, 1047.0], [54.4, 1047.0], [54.5, 1047.0], [54.6, 1047.0], [54.7, 1048.0], [54.8, 1048.0], [54.9, 1048.0], [55.0, 1048.0], [55.1, 1049.0], [55.2, 1050.0], [55.3, 1050.0], [55.4, 1051.0], [55.5, 1051.0], [55.6, 1051.0], [55.7, 1052.0], [55.8, 1053.0], [55.9, 1053.0], [56.0, 1053.0], [56.1, 1054.0], [56.2, 1055.0], [56.3, 1055.0], [56.4, 1056.0], [56.5, 1056.0], [56.6, 1057.0], [56.7, 1057.0], [56.8, 1057.0], [56.9, 1058.0], [57.0, 1058.0], [57.1, 1059.0], [57.2, 1063.0], [57.3, 1065.0], [57.4, 1067.0], [57.5, 1069.0], [57.6, 1072.0], [57.7, 1073.0], [57.8, 1075.0], [57.9, 1076.0], [58.0, 1081.0], [58.1, 1089.0], [58.2, 1098.0], [58.3, 1196.0], [58.4, 1358.0], [58.5, 1427.0], [58.6, 1524.0], [58.7, 1609.0], [58.8, 2039.0], [58.9, 2041.0], [59.0, 2041.0], [59.1, 2042.0], [59.2, 2043.0], [59.3, 2043.0], [59.4, 2044.0], [59.5, 2044.0], [59.6, 2045.0], [59.7, 2046.0], [59.8, 2046.0], [59.9, 2047.0], [60.0, 2047.0], [60.1, 2048.0], [60.2, 2048.0], [60.3, 2049.0], [60.4, 2049.0], [60.5, 2050.0], [60.6, 2051.0], [60.7, 2052.0], [60.8, 2052.0], [60.9, 2053.0], [61.0, 2054.0], [61.1, 2055.0], [61.2, 2056.0], [61.3, 2057.0], [61.4, 2058.0], [61.5, 2060.0], [61.6, 2061.0], [61.7, 2062.0], [61.8, 2063.0], [61.9, 2063.0], [62.0, 2067.0], [62.1, 2069.0], [62.2, 2070.0], [62.3, 2073.0], [62.4, 2079.0], [62.5, 2085.0], [62.6, 2237.0], [62.7, 2310.0], [62.8, 2375.0], [62.9, 2431.0], [63.0, 2441.0], [63.1, 2458.0], [63.2, 2473.0], [63.3, 2489.0], [63.4, 2505.0], [63.5, 2533.0], [63.6, 2549.0], [63.7, 2560.0], [63.8, 2576.0], [63.9, 2583.0], [64.0, 2590.0], [64.1, 2604.0], [64.2, 2613.0], [64.3, 2623.0], [64.4, 2632.0], [64.5, 2646.0], [64.6, 2662.0], [64.7, 2685.0], [64.8, 2690.0], [64.9, 2699.0], [65.0, 2705.0], [65.1, 2715.0], [65.2, 2719.0], [65.3, 2726.0], [65.4, 2735.0], [65.5, 2741.0], [65.6, 2749.0], [65.7, 2754.0], [65.8, 2759.0], [65.9, 2776.0], [66.0, 2782.0], [66.1, 2789.0], [66.2, 2801.0], [66.3, 2815.0], [66.4, 2817.0], [66.5, 2823.0], [66.6, 2831.0], [66.7, 2836.0], [66.8, 2841.0], [66.9, 2846.0], [67.0, 2860.0], [67.1, 2881.0], [67.2, 2890.0], [67.3, 2897.0], [67.4, 2904.0], [67.5, 2915.0], [67.6, 2923.0], [67.7, 2930.0], [67.8, 2940.0], [67.9, 2944.0], [68.0, 2954.0], [68.1, 2975.0], [68.2, 2989.0], [68.3, 3010.0], [68.4, 3018.0], [68.5, 3029.0], [68.6, 3038.0], [68.7, 3041.0], [68.8, 3042.0], [68.9, 3043.0], [69.0, 3043.0], [69.1, 3043.0], [69.2, 3043.0], [69.3, 3044.0], [69.4, 3044.0], [69.5, 3044.0], [69.6, 3044.0], [69.7, 3045.0], [69.8, 3045.0], [69.9, 3045.0], [70.0, 3045.0], [70.1, 3045.0], [70.2, 3045.0], [70.3, 3046.0], [70.4, 3046.0], [70.5, 3046.0], [70.6, 3046.0], [70.7, 3046.0], [70.8, 3046.0], [70.9, 3046.0], [71.0, 3047.0], [71.1, 3047.0], [71.2, 3047.0], [71.3, 3047.0], [71.4, 3047.0], [71.5, 3047.0], [71.6, 3047.0], [71.7, 3048.0], [71.8, 3048.0], [71.9, 3048.0], [72.0, 3048.0], [72.1, 3048.0], [72.2, 3048.0], [72.3, 3048.0], [72.4, 3049.0], [72.5, 3049.0], [72.6, 3049.0], [72.7, 3049.0], [72.8, 3049.0], [72.9, 3049.0], [73.0, 3050.0], [73.1, 3050.0], [73.2, 3050.0], [73.3, 3050.0], [73.4, 3050.0], [73.5, 3051.0], [73.6, 3051.0], [73.7, 3051.0], [73.8, 3052.0], [73.9, 3052.0], [74.0, 3053.0], [74.1, 3053.0], [74.2, 3053.0], [74.3, 3054.0], [74.4, 3054.0], [74.5, 3054.0], [74.6, 3054.0], [74.7, 3055.0], [74.8, 3055.0], [74.9, 3056.0], [75.0, 3056.0], [75.1, 3056.0], [75.2, 3057.0], [75.3, 3057.0], [75.4, 3057.0], [75.5, 3057.0], [75.6, 3058.0], [75.7, 3058.0], [75.8, 3059.0], [75.9, 3059.0], [76.0, 3060.0], [76.1, 3061.0], [76.2, 3061.0], [76.3, 3062.0], [76.4, 3063.0], [76.5, 3065.0], [76.6, 3067.0], [76.7, 3068.0], [76.8, 3070.0], [76.9, 3072.0], [77.0, 3075.0], [77.1, 3076.0], [77.2, 3077.0], [77.3, 3078.0], [77.4, 3080.0], [77.5, 3081.0], [77.6, 3083.0], [77.7, 3086.0], [77.8, 3087.0], [77.9, 3091.0], [78.0, 3094.0], [78.1, 3108.0], [78.2, 3111.0], [78.3, 3140.0], [78.4, 3148.0], [78.5, 3156.0], [78.6, 3165.0], [78.7, 3179.0], [78.8, 3208.0], [78.9, 3232.0], [79.0, 3252.0], [79.1, 3267.0], [79.2, 3281.0], [79.3, 3289.0], [79.4, 3306.0], [79.5, 3322.0], [79.6, 3330.0], [79.7, 3349.0], [79.8, 3375.0], [79.9, 3390.0], [80.0, 3403.0], [80.1, 3449.0], [80.2, 3473.0], [80.3, 3499.0], [80.4, 3554.0], [80.5, 3573.0], [80.6, 3628.0], [80.7, 3646.0], [80.8, 3667.0], [80.9, 3684.0], [81.0, 3701.0], [81.1, 3730.0], [81.2, 3753.0], [81.3, 3775.0], [81.4, 3817.0], [81.5, 3850.0], [81.6, 3856.0], [81.7, 3869.0], [81.8, 3881.0], [81.9, 3911.0], [82.0, 3937.0], [82.1, 3963.0], [82.2, 3969.0], [82.3, 3987.0], [82.4, 4005.0], [82.5, 4021.0], [82.6, 4042.0], [82.7, 4045.0], [82.8, 4046.0], [82.9, 4047.0], [83.0, 4047.0], [83.1, 4048.0], [83.2, 4049.0], [83.3, 4050.0], [83.4, 4051.0], [83.5, 4052.0], [83.6, 4056.0], [83.7, 4057.0], [83.8, 4063.0], [83.9, 4074.0], [84.0, 4075.0], [84.1, 4078.0], [84.2, 4081.0], [84.3, 4085.0], [84.4, 4086.0], [84.5, 4087.0], [84.6, 4089.0], [84.7, 4092.0], [84.8, 4094.0], [84.9, 4095.0], [85.0, 4096.0], [85.1, 4097.0], [85.2, 4102.0], [85.3, 4121.0], [85.4, 4148.0], [85.5, 4204.0], [85.6, 4241.0], [85.7, 4269.0], [85.8, 4329.0], [85.9, 4361.0], [86.0, 4370.0], [86.1, 4391.0], [86.2, 4436.0], [86.3, 4490.0], [86.4, 4523.0], [86.5, 4560.0], [86.6, 4606.0], [86.7, 4676.0], [86.8, 4711.0], [86.9, 4788.0], [87.0, 4840.0], [87.1, 4859.0], [87.2, 4925.0], [87.3, 4958.0], [87.4, 5010.0], [87.5, 5027.0], [87.6, 5066.0], [87.7, 5067.0], [87.8, 5071.0], [87.9, 5079.0], [88.0, 5087.0], [88.1, 5092.0], [88.2, 5104.0], [88.3, 5112.0], [88.4, 5143.0], [88.5, 5228.0], [88.6, 5259.0], [88.7, 5324.0], [88.8, 5385.0], [88.9, 5426.0], [89.0, 5449.0], [89.1, 5485.0], [89.2, 5525.0], [89.3, 5587.0], [89.4, 5651.0], [89.5, 5683.0], [89.6, 5707.0], [89.7, 5753.0], [89.8, 5792.0], [89.9, 5876.0], [90.0, 5958.0], [90.1, 5987.0], [90.2, 6046.0], [90.3, 6097.0], [90.4, 6163.0], [90.5, 6181.0], [90.6, 6210.0], [90.7, 6235.0], [90.8, 6247.0], [90.9, 6291.0], [91.0, 6323.0], [91.1, 6346.0], [91.2, 6374.0], [91.3, 6388.0], [91.4, 6407.0], [91.5, 6437.0], [91.6, 6517.0], [91.7, 6532.0], [91.8, 6577.0], [91.9, 6634.0], [92.0, 6751.0], [92.1, 6854.0], [92.2, 6912.0], [92.3, 6992.0], [92.4, 7053.0], [92.5, 7060.0], [92.6, 7143.0], [92.7, 7320.0], [92.8, 7521.0], [92.9, 7590.0], [93.0, 7667.0], [93.1, 7682.0], [93.2, 7723.0], [93.3, 7756.0], [93.4, 7777.0], [93.5, 7822.0], [93.6, 7833.0], [93.7, 7859.0], [93.8, 7880.0], [93.9, 7929.0], [94.0, 7968.0], [94.1, 7986.0], [94.2, 7994.0], [94.3, 8011.0], [94.4, 8031.0], [94.5, 8047.0], [94.6, 8083.0], [94.7, 8115.0], [94.8, 8149.0], [94.9, 8164.0], [95.0, 8174.0], [95.1, 8181.0], [95.2, 8208.0], [95.3, 8237.0], [95.4, 8261.0], [95.5, 8281.0], [95.6, 8308.0], [95.7, 8335.0], [95.8, 8377.0], [95.9, 8416.0], [96.0, 8430.0], [96.1, 8443.0], [96.2, 8463.0], [96.3, 8483.0], [96.4, 8510.0], [96.5, 8541.0], [96.6, 8549.0], [96.7, 8579.0], [96.8, 8609.0], [96.9, 8633.0], [97.0, 8678.0], [97.1, 8793.0], [97.2, 8908.0], [97.3, 8937.0], [97.4, 8999.0], [97.5, 9084.0], [97.6, 9491.0], [97.7, 9672.0], [97.8, 9759.0], [97.9, 9829.0], [98.0, 9857.0], [98.1, 9918.0], [98.2, 9981.0], [98.3, 10001.0], [98.4, 10001.0], [98.5, 10001.0], [98.6, 10002.0], [98.7, 10002.0], [98.8, 10004.0], [98.9, 10005.0], [99.0, 10005.0], [99.1, 10006.0], [99.2, 10007.0], [99.3, 10009.0], [99.4, 10010.0], [99.5, 10012.0], [99.6, 10018.0], [99.7, 10025.0], [99.8, 10026.0], [99.9, 10027.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[0.0, 9.0], [0.1, 18.0], [0.2, 19.0], [0.3, 19.0], [0.4, 19.0], [0.5, 19.0], [0.6, 19.0], [0.7, 19.0], [0.8, 19.0], [0.9, 19.0], [1.0, 19.0], [1.1, 19.0], [1.2, 19.0], [1.3, 19.0], [1.4, 19.0], [1.5, 19.0], [1.6, 19.0], [1.7, 19.0], [1.8, 19.0], [1.9, 19.0], [2.0, 19.0], [2.1, 19.0], [2.2, 19.0], [2.3, 19.0], [2.4, 19.0], [2.5, 19.0], [2.6, 19.0], [2.7, 19.0], [2.8, 19.0], [2.9, 19.0], [3.0, 19.0], [3.1, 19.0], [3.2, 19.0], [3.3, 19.0], [3.4, 20.0], [3.5, 20.0], [3.6, 20.0], [3.7, 20.0], [3.8, 20.0], [3.9, 20.0], [4.0, 20.0], [4.1, 20.0], [4.2, 20.0], [4.3, 20.0], [4.4, 20.0], [4.5, 20.0], [4.6, 20.0], [4.7, 20.0], [4.8, 20.0], [4.9, 20.0], [5.0, 20.0], [5.1, 20.0], [5.2, 20.0], [5.3, 20.0], [5.4, 20.0], [5.5, 20.0], [5.6, 20.0], [5.7, 20.0], [5.8, 20.0], [5.9, 20.0], [6.0, 20.0], [6.1, 20.0], [6.2, 20.0], [6.3, 20.0], [6.4, 20.0], [6.5, 20.0], [6.6, 20.0], [6.7, 20.0], [6.8, 20.0], [6.9, 20.0], [7.0, 20.0], [7.1, 20.0], [7.2, 20.0], [7.3, 20.0], [7.4, 20.0], [7.5, 20.0], [7.6, 20.0], [7.7, 20.0], [7.8, 20.0], [7.9, 20.0], [8.0, 20.0], [8.1, 20.0], [8.2, 20.0], [8.3, 20.0], [8.4, 20.0], [8.5, 20.0], [8.6, 20.0], [8.7, 20.0], [8.8, 20.0], [8.9, 20.0], [9.0, 20.0], [9.1, 20.0], [9.2, 20.0], [9.3, 20.0], [9.4, 20.0], [9.5, 20.0], [9.6, 20.0], [9.7, 20.0], [9.8, 20.0], [9.9, 21.0], [10.0, 21.0], [10.1, 21.0], [10.2, 21.0], [10.3, 21.0], [10.4, 21.0], [10.5, 21.0], [10.6, 21.0], [10.7, 21.0], [10.8, 21.0], [10.9, 21.0], [11.0, 21.0], [11.1, 21.0], [11.2, 21.0], [11.3, 21.0], [11.4, 21.0], [11.5, 21.0], [11.6, 21.0], [11.7, 21.0], [11.8, 21.0], [11.9, 21.0], [12.0, 21.0], [12.1, 21.0], [12.2, 21.0], [12.3, 21.0], [12.4, 21.0], [12.5, 21.0], [12.6, 21.0], [12.7, 21.0], [12.8, 21.0], [12.9, 21.0], [13.0, 21.0], [13.1, 21.0], [13.2, 21.0], [13.3, 21.0], [13.4, 21.0], [13.5, 21.0], [13.6, 21.0], [13.7, 21.0], [13.8, 21.0], [13.9, 21.0], [14.0, 21.0], [14.1, 21.0], [14.2, 21.0], [14.3, 21.0], [14.4, 21.0], [14.5, 21.0], [14.6, 21.0], [14.7, 21.0], [14.8, 21.0], [14.9, 21.0], [15.0, 21.0], [15.1, 21.0], [15.2, 21.0], [15.3, 21.0], [15.4, 21.0], [15.5, 21.0], [15.6, 21.0], [15.7, 21.0], [15.8, 21.0], [15.9, 21.0], [16.0, 21.0], [16.1, 21.0], [16.2, 21.0], [16.3, 21.0], [16.4, 21.0], [16.5, 21.0], [16.6, 21.0], [16.7, 21.0], [16.8, 21.0], [16.9, 21.0], [17.0, 21.0], [17.1, 21.0], [17.2, 21.0], [17.3, 21.0], [17.4, 21.0], [17.5, 21.0], [17.6, 21.0], [17.7, 21.0], [17.8, 21.0], [17.9, 22.0], [18.0, 22.0], [18.1, 22.0], [18.2, 22.0], [18.3, 22.0], [18.4, 22.0], [18.5, 22.0], [18.6, 22.0], [18.7, 22.0], [18.8, 22.0], [18.9, 22.0], [19.0, 22.0], [19.1, 22.0], [19.2, 22.0], [19.3, 22.0], [19.4, 22.0], [19.5, 22.0], [19.6, 22.0], [19.7, 22.0], [19.8, 22.0], [19.9, 22.0], [20.0, 22.0], [20.1, 22.0], [20.2, 22.0], [20.3, 22.0], [20.4, 22.0], [20.5, 22.0], [20.6, 22.0], [20.7, 22.0], [20.8, 22.0], [20.9, 22.0], [21.0, 22.0], [21.1, 22.0], [21.2, 22.0], [21.3, 22.0], [21.4, 22.0], [21.5, 22.0], [21.6, 22.0], [21.7, 22.0], [21.8, 22.0], [21.9, 22.0], [22.0, 22.0], [22.1, 22.0], [22.2, 22.0], [22.3, 22.0], [22.4, 22.0], [22.5, 22.0], [22.6, 22.0], [22.7, 22.0], [22.8, 22.0], [22.9, 22.0], [23.0, 22.0], [23.1, 22.0], [23.2, 22.0], [23.3, 22.0], [23.4, 22.0], [23.5, 22.0], [23.6, 22.0], [23.7, 22.0], [23.8, 22.0], [23.9, 22.0], [24.0, 22.0], [24.1, 22.0], [24.2, 22.0], [24.3, 22.0], [24.4, 22.0], [24.5, 22.0], [24.6, 22.0], [24.7, 22.0], [24.8, 22.0], [24.9, 22.0], [25.0, 22.0], [25.1, 22.0], [25.2, 22.0], [25.3, 22.0], [25.4, 22.0], [25.5, 22.0], [25.6, 22.0], [25.7, 22.0], [25.8, 22.0], [25.9, 22.0], [26.0, 22.0], [26.1, 23.0], [26.2, 23.0], [26.3, 23.0], [26.4, 23.0], [26.5, 23.0], [26.6, 23.0], [26.7, 23.0], [26.8, 23.0], [26.9, 23.0], [27.0, 23.0], [27.1, 23.0], [27.2, 23.0], [27.3, 23.0], [27.4, 23.0], [27.5, 23.0], [27.6, 23.0], [27.7, 23.0], [27.8, 23.0], [27.9, 23.0], [28.0, 23.0], [28.1, 23.0], [28.2, 23.0], [28.3, 23.0], [28.4, 23.0], [28.5, 23.0], [28.6, 23.0], [28.7, 23.0], [28.8, 23.0], [28.9, 23.0], [29.0, 23.0], [29.1, 23.0], [29.2, 23.0], [29.3, 23.0], [29.4, 23.0], [29.5, 23.0], [29.6, 23.0], [29.7, 23.0], [29.8, 23.0], [29.9, 23.0], [30.0, 23.0], [30.1, 23.0], [30.2, 23.0], [30.3, 23.0], [30.4, 23.0], [30.5, 23.0], [30.6, 23.0], [30.7, 23.0], [30.8, 23.0], [30.9, 23.0], [31.0, 23.0], [31.1, 23.0], [31.2, 23.0], [31.3, 23.0], [31.4, 23.0], [31.5, 23.0], [31.6, 23.0], [31.7, 23.0], [31.8, 23.0], [31.9, 23.0], [32.0, 23.0], [32.1, 23.0], [32.2, 23.0], [32.3, 23.0], [32.4, 23.0], [32.5, 23.0], [32.6, 23.0], [32.7, 23.0], [32.8, 23.0], [32.9, 23.0], [33.0, 23.0], [33.1, 23.0], [33.2, 23.0], [33.3, 24.0], [33.4, 24.0], [33.5, 24.0], [33.6, 24.0], [33.7, 24.0], [33.8, 24.0], [33.9, 24.0], [34.0, 24.0], [34.1, 24.0], [34.2, 24.0], [34.3, 24.0], [34.4, 24.0], [34.5, 24.0], [34.6, 24.0], [34.7, 24.0], [34.8, 24.0], [34.9, 24.0], [35.0, 24.0], [35.1, 24.0], [35.2, 24.0], [35.3, 24.0], [35.4, 24.0], [35.5, 24.0], [35.6, 24.0], [35.7, 24.0], [35.8, 24.0], [35.9, 24.0], [36.0, 24.0], [36.1, 24.0], [36.2, 24.0], [36.3, 24.0], [36.4, 24.0], [36.5, 24.0], [36.6, 24.0], [36.7, 24.0], [36.8, 24.0], [36.9, 24.0], [37.0, 24.0], [37.1, 24.0], [37.2, 24.0], [37.3, 24.0], [37.4, 24.0], [37.5, 24.0], [37.6, 24.0], [37.7, 24.0], [37.8, 24.0], [37.9, 24.0], [38.0, 24.0], [38.1, 24.0], [38.2, 24.0], [38.3, 24.0], [38.4, 24.0], [38.5, 24.0], [38.6, 24.0], [38.7, 24.0], [38.8, 24.0], [38.9, 24.0], [39.0, 24.0], [39.1, 25.0], [39.2, 25.0], [39.3, 25.0], [39.4, 25.0], [39.5, 25.0], [39.6, 25.0], [39.7, 25.0], [39.8, 25.0], [39.9, 25.0], [40.0, 25.0], [40.1, 25.0], [40.2, 25.0], [40.3, 25.0], [40.4, 25.0], [40.5, 25.0], [40.6, 25.0], [40.7, 25.0], [40.8, 25.0], [40.9, 25.0], [41.0, 25.0], [41.1, 25.0], [41.2, 25.0], [41.3, 25.0], [41.4, 25.0], [41.5, 25.0], [41.6, 25.0], [41.7, 25.0], [41.8, 25.0], [41.9, 25.0], [42.0, 25.0], [42.1, 25.0], [42.2, 25.0], [42.3, 25.0], [42.4, 25.0], [42.5, 25.0], [42.6, 25.0], [42.7, 25.0], [42.8, 25.0], [42.9, 25.0], [43.0, 25.0], [43.1, 25.0], [43.2, 25.0], [43.3, 25.0], [43.4, 25.0], [43.5, 25.0], [43.6, 25.0], [43.7, 25.0], [43.8, 25.0], [43.9, 25.0], [44.0, 25.0], [44.1, 25.0], [44.2, 25.0], [44.3, 25.0], [44.4, 25.0], [44.5, 25.0], [44.6, 25.0], [44.7, 25.0], [44.8, 25.0], [44.9, 25.0], [45.0, 25.0], [45.1, 25.0], [45.2, 26.0], [45.3, 26.0], [45.4, 26.0], [45.5, 26.0], [45.6, 26.0], [45.7, 26.0], [45.8, 26.0], [45.9, 26.0], [46.0, 26.0], [46.1, 26.0], [46.2, 26.0], [46.3, 26.0], [46.4, 26.0], [46.5, 26.0], [46.6, 26.0], [46.7, 26.0], [46.8, 26.0], [46.9, 26.0], [47.0, 26.0], [47.1, 26.0], [47.2, 26.0], [47.3, 26.0], [47.4, 26.0], [47.5, 26.0], [47.6, 26.0], [47.7, 26.0], [47.8, 26.0], [47.9, 26.0], [48.0, 26.0], [48.1, 26.0], [48.2, 26.0], [48.3, 26.0], [48.4, 26.0], [48.5, 26.0], [48.6, 26.0], [48.7, 26.0], [48.8, 26.0], [48.9, 26.0], [49.0, 26.0], [49.1, 26.0], [49.2, 26.0], [49.3, 26.0], [49.4, 26.0], [49.5, 26.0], [49.6, 26.0], [49.7, 26.0], [49.8, 26.0], [49.9, 26.0], [50.0, 26.0], [50.1, 27.0], [50.2, 27.0], [50.3, 27.0], [50.4, 27.0], [50.5, 27.0], [50.6, 27.0], [50.7, 27.0], [50.8, 27.0], [50.9, 27.0], [51.0, 27.0], [51.1, 27.0], [51.2, 27.0], [51.3, 27.0], [51.4, 27.0], [51.5, 27.0], [51.6, 27.0], [51.7, 27.0], [51.8, 27.0], [51.9, 27.0], [52.0, 27.0], [52.1, 27.0], [52.2, 27.0], [52.3, 27.0], [52.4, 27.0], [52.5, 27.0], [52.6, 27.0], [52.7, 28.0], [52.8, 28.0], [52.9, 28.0], [53.0, 28.0], [53.1, 28.0], [53.2, 28.0], [53.3, 28.0], [53.4, 28.0], [53.5, 28.0], [53.6, 28.0], [53.7, 28.0], [53.8, 28.0], [53.9, 28.0], [54.0, 28.0], [54.1, 28.0], [54.2, 28.0], [54.3, 28.0], [54.4, 28.0], [54.5, 28.0], [54.6, 28.0], [54.7, 28.0], [54.8, 28.0], [54.9, 28.0], [55.0, 28.0], [55.1, 29.0], [55.2, 29.0], [55.3, 29.0], [55.4, 29.0], [55.5, 29.0], [55.6, 29.0], [55.7, 29.0], [55.8, 29.0], [55.9, 29.0], [56.0, 29.0], [56.1, 29.0], [56.2, 29.0], [56.3, 29.0], [56.4, 29.0], [56.5, 29.0], [56.6, 29.0], [56.7, 29.0], [56.8, 29.0], [56.9, 29.0], [57.0, 29.0], [57.1, 29.0], [57.2, 29.0], [57.3, 29.0], [57.4, 29.0], [57.5, 29.0], [57.6, 29.0], [57.7, 30.0], [57.8, 30.0], [57.9, 30.0], [58.0, 30.0], [58.1, 30.0], [58.2, 30.0], [58.3, 30.0], [58.4, 30.0], [58.5, 30.0], [58.6, 30.0], [58.7, 30.0], [58.8, 30.0], [58.9, 30.0], [59.0, 30.0], [59.1, 30.0], [59.2, 30.0], [59.3, 30.0], [59.4, 30.0], [59.5, 30.0], [59.6, 30.0], [59.7, 30.0], [59.8, 30.0], [59.9, 30.0], [60.0, 30.0], [60.1, 30.0], [60.2, 31.0], [60.3, 31.0], [60.4, 31.0], [60.5, 31.0], [60.6, 31.0], [60.7, 31.0], [60.8, 31.0], [60.9, 31.0], [61.0, 31.0], [61.1, 31.0], [61.2, 31.0], [61.3, 31.0], [61.4, 31.0], [61.5, 31.0], [61.6, 31.0], [61.7, 31.0], [61.8, 31.0], [61.9, 31.0], [62.0, 32.0], [62.1, 32.0], [62.2, 32.0], [62.3, 32.0], [62.4, 32.0], [62.5, 32.0], [62.6, 32.0], [62.7, 32.0], [62.8, 32.0], [62.9, 32.0], [63.0, 32.0], [63.1, 32.0], [63.2, 32.0], [63.3, 33.0], [63.4, 33.0], [63.5, 33.0], [63.6, 33.0], [63.7, 33.0], [63.8, 33.0], [63.9, 33.0], [64.0, 33.0], [64.1, 33.0], [64.2, 33.0], [64.3, 33.0], [64.4, 33.0], [64.5, 33.0], [64.6, 33.0], [64.7, 33.0], [64.8, 34.0], [64.9, 34.0], [65.0, 34.0], [65.1, 34.0], [65.2, 34.0], [65.3, 34.0], [65.4, 34.0], [65.5, 34.0], [65.6, 34.0], [65.7, 34.0], [65.8, 35.0], [65.9, 35.0], [66.0, 35.0], [66.1, 35.0], [66.2, 35.0], [66.3, 35.0], [66.4, 35.0], [66.5, 35.0], [66.6, 35.0], [66.7, 35.0], [66.8, 35.0], [66.9, 35.0], [67.0, 35.0], [67.1, 35.0], [67.2, 35.0], [67.3, 35.0], [67.4, 35.0], [67.5, 35.0], [67.6, 36.0], [67.7, 36.0], [67.8, 36.0], [67.9, 36.0], [68.0, 36.0], [68.1, 36.0], [68.2, 36.0], [68.3, 36.0], [68.4, 36.0], [68.5, 36.0], [68.6, 36.0], [68.7, 36.0], [68.8, 36.0], [68.9, 36.0], [69.0, 36.0], [69.1, 36.0], [69.2, 36.0], [69.3, 36.0], [69.4, 36.0], [69.5, 37.0], [69.6, 37.0], [69.7, 37.0], [69.8, 37.0], [69.9, 37.0], [70.0, 37.0], [70.1, 37.0], [70.2, 37.0], [70.3, 37.0], [70.4, 37.0], [70.5, 37.0], [70.6, 37.0], [70.7, 37.0], [70.8, 38.0], [70.9, 38.0], [71.0, 38.0], [71.1, 38.0], [71.2, 38.0], [71.3, 38.0], [71.4, 38.0], [71.5, 38.0], [71.6, 38.0], [71.7, 38.0], [71.8, 38.0], [71.9, 39.0], [72.0, 39.0], [72.1, 39.0], [72.2, 39.0], [72.3, 39.0], [72.4, 40.0], [72.5, 40.0], [72.6, 40.0], [72.7, 40.0], [72.8, 40.0], [72.9, 40.0], [73.0, 40.0], [73.1, 41.0], [73.2, 41.0], [73.3, 41.0], [73.4, 41.0], [73.5, 41.0], [73.6, 41.0], [73.7, 42.0], [73.8, 42.0], [73.9, 42.0], [74.0, 42.0], [74.1, 42.0], [74.2, 43.0], [74.3, 43.0], [74.4, 43.0], [74.5, 43.0], [74.6, 44.0], [74.7, 44.0], [74.8, 44.0], [74.9, 44.0], [75.0, 44.0], [75.1, 45.0], [75.2, 45.0], [75.3, 46.0], [75.4, 46.0], [75.5, 47.0], [75.6, 48.0], [75.7, 48.0], [75.8, 48.0], [75.9, 49.0], [76.0, 50.0], [76.1, 51.0], [76.2, 51.0], [76.3, 52.0], [76.4, 52.0], [76.5, 52.0], [76.6, 53.0], [76.7, 54.0], [76.8, 54.0], [76.9, 54.0], [77.0, 55.0], [77.1, 55.0], [77.2, 56.0], [77.3, 56.0], [77.4, 57.0], [77.5, 57.0], [77.6, 58.0], [77.7, 59.0], [77.8, 61.0], [77.9, 61.0], [78.0, 63.0], [78.1, 64.0], [78.2, 64.0], [78.3, 64.0], [78.4, 66.0], [78.5, 71.0], [78.6, 72.0], [78.7, 74.0], [78.8, 78.0], [78.9, 80.0], [79.0, 82.0], [79.1, 83.0], [79.2, 84.0], [79.3, 88.0], [79.4, 89.0], [79.5, 92.0], [79.6, 98.0], [79.7, 110.0], [79.8, 116.0], [79.9, 119.0], [80.0, 126.0], [80.1, 131.0], [80.2, 143.0], [80.3, 145.0], [80.4, 151.0], [80.5, 155.0], [80.6, 158.0], [80.7, 164.0], [80.8, 167.0], [80.9, 170.0], [81.0, 173.0], [81.1, 184.0], [81.2, 188.0], [81.3, 194.0], [81.4, 196.0], [81.5, 199.0], [81.6, 201.0], [81.7, 205.0], [81.8, 214.0], [81.9, 227.0], [82.0, 238.0], [82.1, 263.0], [82.2, 271.0], [82.3, 277.0], [82.4, 285.0], [82.5, 293.0], [82.6, 312.0], [82.7, 323.0], [82.8, 341.0], [82.9, 359.0], [83.0, 402.0], [83.1, 422.0], [83.2, 452.0], [83.3, 472.0], [83.4, 489.0], [83.5, 530.0], [83.6, 540.0], [83.7, 558.0], [83.8, 575.0], [83.9, 582.0], [84.0, 587.0], [84.1, 612.0], [84.2, 662.0], [84.3, 697.0], [84.4, 698.0], [84.5, 717.0], [84.6, 757.0], [84.7, 791.0], [84.8, 983.0], [84.9, 1061.0], [85.0, 1093.0], [85.1, 1137.0], [85.2, 1140.0], [85.3, 1178.0], [85.4, 1209.0], [85.5, 1237.0], [85.6, 1245.0], [85.7, 1253.0], [85.8, 1261.0], [85.9, 1267.0], [86.0, 1282.0], [86.1, 1286.0], [86.2, 1299.0], [86.3, 1303.0], [86.4, 1305.0], [86.5, 1309.0], [86.6, 1324.0], [86.7, 1340.0], [86.8, 1407.0], [86.9, 1475.0], [87.0, 1582.0], [87.1, 1638.0], [87.2, 1686.0], [87.3, 1718.0], [87.4, 1732.0], [87.5, 1761.0], [87.6, 1782.0], [87.7, 1861.0], [87.8, 1871.0], [87.9, 1886.0], [88.0, 1901.0], [88.1, 1907.0], [88.2, 1925.0], [88.3, 2037.0], [88.4, 2046.0], [88.5, 2054.0], [88.6, 2063.0], [88.7, 2097.0], [88.8, 2181.0], [88.9, 2193.0], [89.0, 2227.0], [89.1, 2259.0], [89.2, 2282.0], [89.3, 2350.0], [89.4, 2372.0], [89.5, 2406.0], [89.6, 2437.0], [89.7, 2455.0], [89.8, 2540.0], [89.9, 2813.0], [90.0, 3049.0], [90.1, 3130.0], [90.2, 3137.0], [90.3, 3163.0], [90.4, 3183.0], [90.5, 3191.0], [90.6, 3206.0], [90.7, 3311.0], [90.8, 3521.0], [90.9, 3561.0], [91.0, 3621.0], [91.1, 3645.0], [91.2, 3680.0], [91.3, 3708.0], [91.4, 3717.0], [91.5, 3730.0], [91.6, 3769.0], [91.7, 3922.0], [91.8, 4141.0], [91.9, 4187.0], [92.0, 4213.0], [92.1, 4262.0], [92.2, 4316.0], [92.3, 4319.0], [92.4, 4386.0], [92.5, 4414.0], [92.6, 4452.0], [92.7, 4481.0], [92.8, 4496.0], [92.9, 4531.0], [93.0, 4580.0], [93.1, 4601.0], [93.2, 4635.0], [93.3, 4696.0], [93.4, 4706.0], [93.5, 4735.0], [93.6, 4756.0], [93.7, 4768.0], [93.8, 4786.0], [93.9, 4819.0], [94.0, 4843.0], [94.1, 4866.0], [94.2, 4872.0], [94.3, 4895.0], [94.4, 4927.0], [94.5, 4944.0], [94.6, 4970.0], [94.7, 4981.0], [94.8, 4991.0], [94.9, 5001.0], [95.0, 5012.0], [95.1, 5031.0], [95.2, 5048.0], [95.3, 5062.0], [95.4, 5092.0], [95.5, 5132.0], [95.6, 5215.0], [95.7, 5252.0], [95.8, 5355.0], [95.9, 5383.0], [96.0, 5397.0], [96.1, 5437.0], [96.2, 5464.0], [96.3, 5477.0], [96.4, 5484.0], [96.5, 5492.0], [96.6, 5497.0], [96.7, 5518.0], [96.8, 5539.0], [96.9, 5550.0], [97.0, 5556.0], [97.1, 5563.0], [97.2, 5572.0], [97.3, 5575.0], [97.4, 5584.0], [97.5, 5594.0], [97.6, 5616.0], [97.7, 5619.0], [97.8, 5626.0], [97.9, 5634.0], [98.0, 5642.0], [98.1, 5652.0], [98.2, 5661.0], [98.3, 5671.0], [98.4, 5707.0], [98.5, 5739.0], [98.6, 5799.0], [98.7, 5892.0], [98.8, 5947.0], [98.9, 5961.0], [99.0, 5973.0], [99.1, 6074.0], [99.2, 6140.0], [99.3, 6161.0], [99.4, 6239.0], [99.5, 6295.0], [99.6, 6540.0], [99.7, 6689.0], [99.8, 6707.0], [99.9, 7750.0], [100.0, 9658.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 0.0], [40.1, 0.0], [40.2, 0.0], [40.3, 0.0], [40.4, 0.0], [40.5, 0.0], [40.6, 0.0], [40.7, 0.0], [40.8, 0.0], [40.9, 0.0], [41.0, 0.0], [41.1, 0.0], [41.2, 0.0], [41.3, 0.0], [41.4, 0.0], [41.5, 0.0], [41.6, 0.0], [41.7, 0.0], [41.8, 0.0], [41.9, 0.0], [42.0, 0.0], [42.1, 0.0], [42.2, 0.0], [42.3, 0.0], [42.4, 0.0], [42.5, 0.0], [42.6, 0.0], [42.7, 0.0], [42.8, 0.0], [42.9, 0.0], [43.0, 0.0], [43.1, 0.0], [43.2, 0.0], [43.3, 0.0], [43.4, 0.0], [43.5, 0.0], [43.6, 0.0], [43.7, 0.0], [43.8, 0.0], [43.9, 0.0], [44.0, 0.0], [44.1, 0.0], [44.2, 0.0], [44.3, 0.0], [44.4, 0.0], [44.5, 0.0], [44.6, 0.0], [44.7, 0.0], [44.8, 0.0], [44.9, 0.0], [45.0, 0.0], [45.1, 0.0], [45.2, 0.0], [45.3, 0.0], [45.4, 0.0], [45.5, 0.0], [45.6, 0.0], [45.7, 0.0], [45.8, 0.0], [45.9, 0.0], [46.0, 0.0], [46.1, 0.0], [46.2, 0.0], [46.3, 0.0], [46.4, 0.0], [46.5, 0.0], [46.6, 0.0], [46.7, 0.0], [46.8, 0.0], [46.9, 0.0], [47.0, 0.0], [47.1, 0.0], [47.2, 0.0], [47.3, 0.0], [47.4, 0.0], [47.5, 0.0], [47.6, 0.0], [47.7, 0.0], [47.8, 0.0], [47.9, 0.0], [48.0, 0.0], [48.1, 0.0], [48.2, 0.0], [48.3, 0.0], [48.4, 0.0], [48.5, 0.0], [48.6, 0.0], [48.7, 0.0], [48.8, 0.0], [48.9, 0.0], [49.0, 0.0], [49.1, 0.0], [49.2, 0.0], [49.3, 0.0], [49.4, 0.0], [49.5, 0.0], [49.6, 0.0], [49.7, 0.0], [49.8, 0.0], [49.9, 0.0], [50.0, 0.0], [50.1, 0.0], [50.2, 0.0], [50.3, 0.0], [50.4, 0.0], [50.5, 0.0], [50.6, 0.0], [50.7, 0.0], [50.8, 0.0], [50.9, 0.0], [51.0, 0.0], [51.1, 0.0], [51.2, 0.0], [51.3, 0.0], [51.4, 0.0], [51.5, 0.0], [51.6, 0.0], [51.7, 0.0], [51.8, 0.0], [51.9, 0.0], [52.0, 0.0], [52.1, 0.0], [52.2, 0.0], [52.3, 0.0], [52.4, 0.0], [52.5, 0.0], [52.6, 0.0], [52.7, 0.0], [52.8, 0.0], [52.9, 0.0], [53.0, 0.0], [53.1, 0.0], [53.2, 0.0], [53.3, 0.0], [53.4, 0.0], [53.5, 0.0], [53.6, 0.0], [53.7, 0.0], [53.8, 0.0], [53.9, 0.0], [54.0, 0.0], [54.1, 0.0], [54.2, 0.0], [54.3, 0.0], [54.4, 0.0], [54.5, 0.0], [54.6, 0.0], [54.7, 0.0], [54.8, 0.0], [54.9, 0.0], [55.0, 0.0], [55.1, 0.0], [55.2, 0.0], [55.3, 0.0], [55.4, 0.0], [55.5, 0.0], [55.6, 0.0], [55.7, 0.0], [55.8, 0.0], [55.9, 0.0], [56.0, 0.0], [56.1, 0.0], [56.2, 0.0], [56.3, 0.0], [56.4, 0.0], [56.5, 0.0], [56.6, 0.0], [56.7, 0.0], [56.8, 0.0], [56.9, 0.0], [57.0, 0.0], [57.1, 0.0], [57.2, 0.0], [57.3, 0.0], [57.4, 0.0], [57.5, 0.0], [57.6, 0.0], [57.7, 0.0], [57.8, 0.0], [57.9, 0.0], [58.0, 0.0], [58.1, 0.0], [58.2, 0.0], [58.3, 0.0], [58.4, 0.0], [58.5, 0.0], [58.6, 0.0], [58.7, 0.0], [58.8, 0.0], [58.9, 0.0], [59.0, 0.0], [59.1, 0.0], [59.2, 0.0], [59.3, 0.0], [59.4, 0.0], [59.5, 0.0], [59.6, 0.0], [59.7, 0.0], [59.8, 0.0], [59.9, 0.0], [60.0, 0.0], [60.1, 0.0], [60.2, 0.0], [60.3, 0.0], [60.4, 0.0], [60.5, 0.0], [60.6, 0.0], [60.7, 0.0], [60.8, 0.0], [60.9, 0.0], [61.0, 0.0], [61.1, 0.0], [61.2, 0.0], [61.3, 0.0], [61.4, 0.0], [61.5, 0.0], [61.6, 0.0], [61.7, 0.0], [61.8, 0.0], [61.9, 0.0], [62.0, 0.0], [62.1, 0.0], [62.2, 0.0], [62.3, 0.0], [62.4, 0.0], [62.5, 0.0], [62.6, 0.0], [62.7, 0.0], [62.8, 0.0], [62.9, 0.0], [63.0, 0.0], [63.1, 0.0], [63.2, 0.0], [63.3, 0.0], [63.4, 0.0], [63.5, 0.0], [63.6, 0.0], [63.7, 0.0], [63.8, 0.0], [63.9, 0.0], [64.0, 0.0], [64.1, 0.0], [64.2, 0.0], [64.3, 0.0], [64.4, 0.0], [64.5, 0.0], [64.6, 0.0], [64.7, 0.0], [64.8, 0.0], [64.9, 0.0], [65.0, 0.0], [65.1, 0.0], [65.2, 0.0], [65.3, 0.0], [65.4, 0.0], [65.5, 0.0], [65.6, 0.0], [65.7, 0.0], [65.8, 0.0], [65.9, 0.0], [66.0, 0.0], [66.1, 0.0], [66.2, 0.0], [66.3, 0.0], [66.4, 0.0], [66.5, 0.0], [66.6, 0.0], [66.7, 0.0], [66.8, 0.0], [66.9, 0.0], [67.0, 0.0], [67.1, 0.0], [67.2, 0.0], [67.3, 0.0], [67.4, 0.0], [67.5, 0.0], [67.6, 0.0], [67.7, 0.0], [67.8, 0.0], [67.9, 0.0], [68.0, 0.0], [68.1, 0.0], [68.2, 0.0], [68.3, 0.0], [68.4, 0.0], [68.5, 0.0], [68.6, 0.0], [68.7, 0.0], [68.8, 0.0], [68.9, 0.0], [69.0, 0.0], [69.1, 0.0], [69.2, 0.0], [69.3, 0.0], [69.4, 0.0], [69.5, 0.0], [69.6, 0.0], [69.7, 0.0], [69.8, 0.0], [69.9, 0.0], [70.0, 0.0], [70.1, 0.0], [70.2, 0.0], [70.3, 0.0], [70.4, 0.0], [70.5, 0.0], [70.6, 0.0], [70.7, 0.0], [70.8, 0.0], [70.9, 0.0], [71.0, 0.0], [71.1, 0.0], [71.2, 0.0], [71.3, 0.0], [71.4, 0.0], [71.5, 0.0], [71.6, 0.0], [71.7, 0.0], [71.8, 0.0], [71.9, 0.0], [72.0, 0.0], [72.1, 0.0], [72.2, 0.0], [72.3, 0.0], [72.4, 0.0], [72.5, 0.0], [72.6, 0.0], [72.7, 0.0], [72.8, 0.0], [72.9, 0.0], [73.0, 0.0], [73.1, 0.0], [73.2, 0.0], [73.3, 0.0], [73.4, 0.0], [73.5, 0.0], [73.6, 0.0], [73.7, 0.0], [73.8, 0.0], [73.9, 0.0], [74.0, 0.0], [74.1, 0.0], [74.2, 0.0], [74.3, 0.0], [74.4, 0.0], [74.5, 0.0], [74.6, 0.0], [74.7, 0.0], [74.8, 0.0], [74.9, 0.0], [75.0, 0.0], [75.1, 0.0], [75.2, 0.0], [75.3, 0.0], [75.4, 0.0], [75.5, 0.0], [75.6, 0.0], [75.7, 0.0], [75.8, 0.0], [75.9, 0.0], [76.0, 0.0], [76.1, 0.0], [76.2, 0.0], [76.3, 0.0], [76.4, 0.0], [76.5, 0.0], [76.6, 0.0], [76.7, 0.0], [76.8, 0.0], [76.9, 0.0], [77.0, 0.0], [77.1, 0.0], [77.2, 0.0], [77.3, 0.0], [77.4, 0.0], [77.5, 0.0], [77.6, 0.0], [77.7, 0.0], [77.8, 0.0], [77.9, 0.0], [78.0, 0.0], [78.1, 0.0], [78.2, 0.0], [78.3, 0.0], [78.4, 0.0], [78.5, 0.0], [78.6, 0.0], [78.7, 0.0], [78.8, 0.0], [78.9, 0.0], [79.0, 0.0], [79.1, 0.0], [79.2, 0.0], [79.3, 0.0], [79.4, 0.0], [79.5, 0.0], [79.6, 0.0], [79.7, 0.0], [79.8, 0.0], [79.9, 0.0], [80.0, 0.0], [80.1, 0.0], [80.2, 0.0], [80.3, 0.0], [80.4, 0.0], [80.5, 0.0], [80.6, 0.0], [80.7, 0.0], [80.8, 0.0], [80.9, 0.0], [81.0, 0.0], [81.1, 0.0], [81.2, 0.0], [81.3, 0.0], [81.4, 0.0], [81.5, 0.0], [81.6, 0.0], [81.7, 0.0], [81.8, 0.0], [81.9, 0.0], [82.0, 0.0], [82.1, 0.0], [82.2, 0.0], [82.3, 0.0], [82.4, 0.0], [82.5, 0.0], [82.6, 0.0], [82.7, 0.0], [82.8, 0.0], [82.9, 0.0], [83.0, 0.0], [83.1, 0.0], [83.2, 0.0], [83.3, 0.0], [83.4, 0.0], [83.5, 0.0], [83.6, 0.0], [83.7, 0.0], [83.8, 0.0], [83.9, 0.0], [84.0, 0.0], [84.1, 0.0], [84.2, 0.0], [84.3, 0.0], [84.4, 0.0], [84.5, 0.0], [84.6, 0.0], [84.7, 0.0], [84.8, 0.0], [84.9, 0.0], [85.0, 0.0], [85.1, 0.0], [85.2, 0.0], [85.3, 0.0], [85.4, 0.0], [85.5, 0.0], [85.6, 0.0], [85.7, 0.0], [85.8, 0.0], [85.9, 0.0], [86.0, 0.0], [86.1, 0.0], [86.2, 0.0], [86.3, 0.0], [86.4, 0.0], [86.5, 0.0], [86.6, 0.0], [86.7, 0.0], [86.8, 0.0], [86.9, 0.0], [87.0, 0.0], [87.1, 0.0], [87.2, 0.0], [87.3, 0.0], [87.4, 0.0], [87.5, 0.0], [87.6, 0.0], [87.7, 0.0], [87.8, 0.0], [87.9, 0.0], [88.0, 0.0], [88.1, 0.0], [88.2, 0.0], [88.3, 0.0], [88.4, 0.0], [88.5, 0.0], [88.6, 0.0], [88.7, 0.0], [88.8, 0.0], [88.9, 0.0], [89.0, 0.0], [89.1, 0.0], [89.2, 0.0], [89.3, 0.0], [89.4, 0.0], [89.5, 0.0], [89.6, 0.0], [89.7, 0.0], [89.8, 0.0], [89.9, 0.0], [90.0, 0.0], [90.1, 0.0], [90.2, 0.0], [90.3, 0.0], [90.4, 0.0], [90.5, 0.0], [90.6, 0.0], [90.7, 0.0], [90.8, 0.0], [90.9, 0.0], [91.0, 0.0], [91.1, 0.0], [91.2, 0.0], [91.3, 0.0], [91.4, 0.0], [91.5, 0.0], [91.6, 0.0], [91.7, 0.0], [91.8, 0.0], [91.9, 0.0], [92.0, 0.0], [92.1, 0.0], [92.2, 0.0], [92.3, 0.0], [92.4, 0.0], [92.5, 0.0], [92.6, 0.0], [92.7, 0.0], [92.8, 0.0], [92.9, 0.0], [93.0, 0.0], [93.1, 0.0], [93.2, 0.0], [93.3, 0.0], [93.4, 0.0], [93.5, 0.0], [93.6, 0.0], [93.7, 0.0], [93.8, 0.0], [93.9, 0.0], [94.0, 0.0], [94.1, 0.0], [94.2, 0.0], [94.3, 0.0], [94.4, 0.0], [94.5, 0.0], [94.6, 0.0], [94.7, 0.0], [94.8, 0.0], [94.9, 0.0], [95.0, 0.0], [95.1, 0.0], [95.2, 0.0], [95.3, 0.0], [95.4, 0.0], [95.5, 0.0], [95.6, 0.0], [95.7, 0.0], [95.8, 0.0], [95.9, 0.0], [96.0, 0.0], [96.1, 0.0], [96.2, 0.0], [96.3, 0.0], [96.4, 0.0], [96.5, 0.0], [96.6, 0.0], [96.7, 0.0], [96.8, 0.0], [96.9, 0.0], [97.0, 0.0], [97.1, 0.0], [97.2, 0.0], [97.3, 0.0], [97.4, 0.0], [97.5, 0.0], [97.6, 0.0], [97.7, 0.0], [97.8, 0.0], [97.9, 0.0], [98.0, 0.0], [98.1, 0.0], [98.2, 0.0], [98.3, 0.0], [98.4, 0.0], [98.5, 0.0], [98.6, 0.0], [98.7, 0.0], [98.8, 0.0], [98.9, 0.0], [99.0, 0.0], [99.1, 0.0], [99.2, 0.0], [99.3, 0.0], [99.4, 0.0], [99.5, 0.0], [99.6, 0.0], [99.7, 0.0], [99.8, 0.0], [99.9, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3741.0, "series": [{"data": [[0.0, 1961.0], [100.0, 101.0], [200.0, 62.0], [300.0, 6.0], [400.0, 2.0], [500.0, 5.0], [600.0, 5.0], [700.0, 1.0], [800.0, 8.0], [900.0, 6.0], [1000.0, 268.0], [1100.0, 4.0], [1200.0, 2.0], [1300.0, 2.0], [1400.0, 8.0], [1500.0, 4.0], [1600.0, 3.0], [1800.0, 1.0], [2000.0, 156.0], [2100.0, 1.0], [2200.0, 5.0], [2300.0, 6.0], [2400.0, 23.0], [2500.0, 29.0], [2600.0, 35.0], [2700.0, 53.0], [2800.0, 49.0], [2900.0, 37.0], [3000.0, 408.0], [3100.0, 29.0], [3200.0, 26.0], [3300.0, 25.0], [3400.0, 15.0], [3500.0, 10.0], [3700.0, 15.0], [3600.0, 18.0], [3800.0, 22.0], [3900.0, 19.0], [4000.0, 119.0], [4100.0, 12.0], [4300.0, 16.0], [4200.0, 11.0], [4400.0, 9.0], [4600.0, 8.0], [4500.0, 10.0], [4800.0, 10.0], [4700.0, 6.0], [4900.0, 9.0], [5000.0, 33.0], [5100.0, 12.0], [5200.0, 10.0], [5300.0, 7.0], [5600.0, 8.0], [5400.0, 11.0], [5500.0, 10.0], [5700.0, 11.0], [5800.0, 5.0], [6100.0, 11.0], [6000.0, 8.0], [5900.0, 7.0], [6200.0, 16.0], [6300.0, 18.0], [6400.0, 7.0], [6500.0, 12.0], [6600.0, 6.0], [6900.0, 7.0], [6700.0, 2.0], [6800.0, 5.0], [7000.0, 10.0], [7100.0, 3.0], [7300.0, 3.0], [7400.0, 2.0], [7200.0, 2.0], [7600.0, 8.0], [7500.0, 6.0], [7900.0, 19.0], [7800.0, 15.0], [7700.0, 13.0], [8100.0, 22.0], [8000.0, 16.0], [8300.0, 12.0], [8500.0, 16.0], [8400.0, 21.0], [8600.0, 12.0], [8200.0, 17.0], [8700.0, 3.0], [8800.0, 3.0], [8900.0, 9.0], [9000.0, 4.0], [9200.0, 3.0], [9100.0, 1.0], [9500.0, 2.0], [9400.0, 1.0], [9600.0, 3.0], [9700.0, 4.0], [9900.0, 8.0], [9800.0, 10.0], [10000.0, 72.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[0.0, 2814.0], [600.0, 12.0], [700.0, 11.0], [800.0, 1.0], [900.0, 2.0], [1000.0, 9.0], [1100.0, 11.0], [1200.0, 30.0], [1300.0, 19.0], [1400.0, 7.0], [1500.0, 2.0], [1600.0, 10.0], [1700.0, 11.0], [1800.0, 13.0], [1900.0, 9.0], [2000.0, 18.0], [2100.0, 7.0], [2200.0, 11.0], [2300.0, 7.0], [2400.0, 9.0], [2500.0, 4.0], [2700.0, 3.0], [2800.0, 2.0], [3000.0, 4.0], [3100.0, 16.0], [3200.0, 6.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 8.0], [3700.0, 14.0], [3600.0, 11.0], [3900.0, 2.0], [4200.0, 8.0], [4100.0, 8.0], [4300.0, 8.0], [4500.0, 9.0], [4600.0, 9.0], [4400.0, 14.0], [4700.0, 18.0], [4800.0, 17.0], [5000.0, 20.0], [4900.0, 20.0], [5100.0, 4.0], [5300.0, 9.0], [5200.0, 7.0], [5500.0, 31.0], [5400.0, 23.0], [5600.0, 29.0], [5700.0, 9.0], [5800.0, 5.0], [5900.0, 10.0], [6100.0, 7.0], [6000.0, 4.0], [6200.0, 7.0], [6300.0, 1.0], [6600.0, 4.0], [6500.0, 2.0], [6700.0, 2.0], [7000.0, 1.0], [7200.0, 2.0], [7700.0, 1.0], [9100.0, 1.0], [9200.0, 1.0], [9600.0, 1.0], [100.0, 67.0], [200.0, 37.0], [300.0, 14.0], [400.0, 17.0], [500.0, 22.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 3741.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 421.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8815.0, "series": [{"data": [[0.0, 8815.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 421.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1665.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 540.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 891.1151997203051, "minX": 1.6547328E12, "maxY": 891.1151997203051, "series": [{"data": [[1.6547328E12, 891.1151997203051]], "isOverall": false, "label": "Background Connection Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6547328E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 10026.0, "series": [{"data": [[2.0, 7757.0], [6.0, 5160.0], [9.0, 7835.0], [23.0, 6888.5], [27.0, 6634.0], [28.0, 5289.0], [30.0, 39.0], [33.0, 39.0], [36.0, 5449.0], [38.0, 6356.0], [43.0, 6374.0], [49.0, 5159.0], [50.0, 5110.0], [53.0, 5234.0], [58.0, 7057.0], [67.0, 7322.333333333333], [66.0, 6651.0], [71.0, 4870.5], [72.0, 5193.5], [76.0, 2533.666666666667], [83.0, 4837.0], [82.0, 40.5], [81.0, 6517.0], [80.0, 5143.0], [87.0, 31.333333333333332], [84.0, 42.0], [95.0, 2596.0], [92.0, 6903.0], [99.0, 5653.0], [98.0, 41.0], [97.0, 42.0], [103.0, 6420.0], [102.0, 6111.0], [111.0, 6173.0], [110.0, 7223.0], [115.0, 2309.0], [114.0, 7206.0], [117.0, 3563.666666666667], [123.0, 6368.0], [121.0, 39.0], [127.0, 5037.0], [126.0, 6388.0], [124.0, 6091.0], [135.0, 6680.0], [132.0, 4840.0], [130.0, 9672.0], [143.0, 6393.0], [141.0, 38.0], [139.0, 6223.5], [137.0, 6342.0], [151.0, 34.0], [149.0, 4823.0], [146.0, 2115.0], [144.0, 5664.0], [159.0, 5838.0], [156.0, 4047.0], [152.0, 2044.0], [166.0, 6046.0], [164.0, 4987.0], [175.0, 6065.0], [174.0, 4575.5], [170.0, 4580.0], [169.0, 5792.0], [168.0, 38.0], [183.0, 4058.0], [179.0, 4405.0], [176.0, 4507.0], [191.0, 5214.5], [186.0, 53.0], [185.0, 2723.6666666666665], [198.0, 6866.0], [197.0, 4735.0], [196.0, 4045.0], [195.0, 2712.0], [193.0, 4050.0], [192.0, 2292.5], [201.0, 43.75], [214.0, 5972.0], [213.0, 2007.0], [211.0, 6190.0], [209.0, 4514.0], [208.0, 44.0], [222.0, 4935.5], [219.0, 45.0], [218.0, 50.2], [231.0, 3428.6666666666665], [230.0, 3830.0], [227.0, 47.333333333333336], [225.0, 588.375], [238.0, 5721.0], [237.0, 5339.5], [236.0, 48.0], [232.0, 5978.0], [247.0, 4803.5], [244.0, 41.0], [243.0, 44.0], [242.0, 45.0], [241.0, 42.0], [255.0, 41.0], [252.0, 3857.0], [271.0, 3757.0], [266.0, 6856.0], [265.0, 5654.0], [263.0, 3772.0], [260.0, 3076.25], [256.0, 38.0], [283.0, 4467.666666666667], [278.0, 42.0], [275.0, 4215.0], [273.0, 41.0], [272.0, 4514.666666666667], [301.0, 4339.5], [299.0, 5840.0], [298.0, 39.0], [296.0, 5301.5], [293.0, 3251.666666666667], [291.0, 5224.333333333333], [319.0, 5801.0], [317.0, 7010.0], [312.0, 4060.0], [311.0, 4102.0], [306.0, 4691.0], [304.0, 3371.5], [334.0, 6270.0], [331.0, 6294.0], [329.0, 3044.5], [324.0, 6279.5], [320.0, 4096.0], [344.0, 6425.0], [341.0, 4889.0], [365.0, 5701.0], [362.0, 5455.75], [354.0, 3573.0], [353.0, 5228.0], [383.0, 6251.0], [382.0, 3797.0], [381.0, 4045.0], [380.0, 3632.8333333333335], [376.0, 3048.0], [375.0, 5430.0], [374.0, 1542.5], [373.0, 6181.0], [398.0, 4068.333333333333], [396.0, 3988.75], [395.0, 2547.0], [394.0, 6618.0], [390.0, 5876.0], [388.0, 3457.5], [411.0, 3969.0], [410.0, 5027.0], [407.0, 5587.5], [405.0, 4048.5], [404.0, 3795.0], [401.0, 4070.0], [400.0, 4047.0], [431.0, 3154.0], [430.0, 5707.0], [429.0, 3337.0], [425.0, 6158.0], [423.0, 3043.0], [421.0, 3898.0], [419.0, 5134.0], [416.0, 3593.0], [446.0, 4139.0], [442.0, 3937.5], [439.0, 3285.0], [438.0, 3789.5], [435.0, 5065.0], [432.0, 3945.0], [463.0, 4478.5], [462.0, 4468.0], [459.0, 6048.0], [458.0, 3051.0], [455.0, 5581.5], [453.0, 3621.3333333333335], [452.0, 3049.5], [451.0, 3894.0], [448.0, 3126.3333333333335], [477.0, 4175.5], [474.0, 3048.0], [473.0, 4038.8], [466.0, 2784.0], [464.0, 3046.3333333333335], [482.0, 200.6], [484.0, 1040.375], [485.0, 261.8333333333333], [486.0, 1278.6], [488.0, 1439.0], [489.0, 106.0], [493.0, 114.5], [495.0, 3043.0], [487.0, 3041.0], [481.0, 1046.0], [480.0, 5184.0], [509.0, 66.0], [496.0, 752.7777777777778], [501.0, 3232.5], [497.0, 75.0], [506.0, 811.0], [507.0, 64.0], [508.0, 2787.0], [499.0, 1703.6666666666667], [510.0, 46.0], [505.0, 8098.0], [504.0, 3667.0], [516.0, 52.0], [515.0, 1855.0], [512.0, 5921.0], [518.0, 2053.0], [517.0, 4937.0], [519.0, 3048.0], [537.0, 3057.0], [536.0, 3056.5], [541.0, 3228.0], [539.0, 3052.0], [543.0, 58.0], [528.0, 4105.0], [542.0, 3062.5], [520.0, 56.0], [521.0, 1869.0], [522.0, 50.0], [524.0, 4561.666666666667], [525.0, 5022.0], [529.0, 311.5], [531.0, 203.25], [532.0, 1494.2857142857144], [533.0, 929.0], [534.0, 629.6666666666666], [535.0, 54.0], [551.0, 55.0], [545.0, 206.0], [544.0, 53.0], [559.0, 6514.0], [558.0, 3048.0], [550.0, 1807.0], [548.0, 1050.0], [547.0, 2731.8], [546.0, 4412.2], [554.0, 2627.1428571428573], [553.0, 4267.714285714286], [552.0, 10001.0], [555.0, 3053.0], [556.0, 46.0], [562.0, 1726.4444444444443], [564.0, 376.3333333333333], [563.0, 2044.5], [565.0, 9963.0], [567.0, 2716.8], [566.0, 3050.0], [572.0, 45.666666666666664], [569.0, 4788.0], [568.0, 3053.0], [573.0, 43.0], [575.0, 5561.0], [605.0, 3037.6363636363635], [580.0, 2219.166666666667], [581.0, 47.0], [601.0, 10002.5], [600.0, 10002.0], [604.0, 5638.4], [603.0, 6944.000000000001], [585.0, 1021.6666666666666], [584.0, 10008.0], [586.0, 1050.0], [588.0, 41.5], [589.0, 38.0], [591.0, 10001.0], [576.0, 3090.5], [579.0, 3884.5], [577.0, 10001.0], [590.0, 10001.0], [593.0, 45.0], [599.0, 52.0], [594.0, 2949.0], [607.0, 10002.5], [634.0, 5035.5], [609.0, 5023.5], [614.0, 5024.75], [633.0, 2726.666666666666], [632.0, 1059.0], [618.0, 43.5], [617.0, 5677.0], [619.0, 10003.0], [620.0, 43.0], [622.0, 42.0], [608.0, 10005.0], [625.0, 4418.25], [629.0, 3371.0], [628.0, 10026.0], [626.0, 10026.0], [631.0, 2408.0], [636.0, 40.5], [638.0, 10009.0], [637.0, 8754.454545454544], [644.0, 40.0], [640.0, 3295.25], [641.0, 5051.5], [643.0, 8695.6], [642.0, 10016.666666666666], [647.0, 41.666666666666664], [646.0, 3049.5], [645.0, 2465.6666666666665], [665.0, 3310.5], [664.0, 2061.25], [651.0, 3386.4545454545455], [650.0, 7022.0], [649.0, 10005.0], [648.0, 5531.0], [652.0, 40.0], [655.0, 2594.9999999999995], [654.0, 3796.0], [658.0, 3362.0], [662.0, 4969.5], [660.0, 6498.5], [659.0, 3327.0], [663.0, 3127.8571428571427], [667.0, 1432.5], [670.0, 2997.0], [657.0, 3135.0], [669.0, 4402.5], [668.0, 2062.0], [696.0, 47.0], [677.0, 1132.0], [675.0, 827.0], [674.0, 3968.6666666666665], [679.0, 2046.0], [678.0, 2815.0], [683.0, 2623.6666666666665], [681.0, 1048.0], [680.0, 6305.0], [686.0, 3462.0], [685.0, 9755.0], [687.0, 6550.333333333333], [689.0, 2024.2], [692.0, 9107.6], [691.0, 3046.0], [697.0, 50.0], [698.0, 4010.2], [700.0, 48.0], [701.0, 1236.6], [703.0, 4623.0], [728.0, 987.6666666666666], [705.0, 40.5], [710.0, 42.0], [711.0, 5271.5], [712.0, 1668.6666666666665], [713.0, 44.0], [715.0, 1157.625], [714.0, 9833.0], [718.0, 5392.0], [716.0, 2701.0], [722.0, 3313.3333333333335], [723.0, 41.0], [726.0, 3021.0], [724.0, 9680.0], [730.0, 4933.0], [729.0, 9829.0], [732.0, 2396.5], [735.0, 2882.0], [720.0, 3514.0], [733.0, 5467.0], [764.0, 319.6666666666667], [741.0, 43.0], [738.0, 1411.5], [736.0, 5458.0], [739.0, 2510.0], [743.0, 41.0], [761.0, 699.0], [750.0, 42.0], [749.0, 3291.8], [746.0, 4133.8], [751.0, 44.0], [753.0, 2184.6666666666665], [756.0, 5096.75], [754.0, 818.0], [759.0, 42.0], [758.0, 2904.0], [767.0, 43.0], [765.0, 2853.75], [792.0, 42.0], [771.0, 42.5], [770.0, 42.0], [782.0, 2472.5], [769.0, 3245.083333333333], [775.0, 43.5], [773.0, 999.282608695652], [779.0, 44.0], [778.0, 379.0], [777.0, 46.5], [776.0, 42.5], [781.0, 41.83333333333333], [784.0, 41.5], [787.0, 43.0], [795.0, 40.0], [798.0, 42.0], [799.0, 43.0], [824.0, 40.0], [801.0, 40.0], [802.0, 39.0], [829.0, 41.0], [830.0, 42.0], [811.0, 41.0], [812.0, 41.0], [813.0, 41.0], [816.0, 40.0], [817.0, 41.0], [821.0, 43.0], [822.0, 40.0], [834.0, 39.0], [832.0, 41.0], [838.0, 42.5], [835.0, 44.36363636363637], [856.0, 305.625], [839.0, 358.8307692307693], [841.0, 1608.0625], [840.0, 43.666666666666664], [843.0, 3964.5], [842.0, 3780.5], [844.0, 41.0], [845.0, 41.0], [846.0, 1334.4736842105262], [847.0, 1956.4545454545457], [849.0, 732.8888888888889], [855.0, 449.2], [854.0, 930.875], [852.0, 2069.0], [851.0, 870.8666666666666], [850.0, 472.6], [861.0, 1056.0], [848.0, 653.7058823529413], [859.0, 1061.0], [889.0, 48.0], [865.0, 576.8947368421053], [868.0, 50.666666666666664], [869.0, 124.15384615384615], [888.0, 723.0], [870.0, 44.0], [875.0, 553.0], [873.0, 1057.0], [872.0, 773.7857142857143], [878.0, 695.6], [879.0, 1239.0], [880.0, 1103.75], [884.0, 52.24999999999999], [881.0, 1707.3076923076924], [887.0, 53.0], [893.0, 384.5], [892.0, 1187.1333333333332], [894.0, 1385.3333333333333], [900.0, 45.666666666666664], [898.0, 53.0], [897.0, 714.1111111111111], [899.0, 1050.5], [926.0, 64.0], [920.0, 50.0], [903.0, 46.0], [902.0, 48.0], [901.0, 730.6363636363636], [919.0, 47.0], [917.0, 49.5], [913.0, 48.6], [906.0, 48.4], [905.0, 45.5], [904.0, 45.0], [956.0, 2514.75], [936.0, 88.0], [937.0, 42.0], [939.0, 86.0], [940.0, 89.0], [931.0, 1271.6666666666667], [935.0, 42.0], [932.0, 39.0], [953.0, 2448.5], [952.0, 444.4], [947.0, 303.625], [951.0, 100.0], [950.0, 538.1904761904763], [949.0, 38.5], [959.0, 80.07692307692308], [946.0, 40.0], [944.0, 40.0], [958.0, 247.0], [957.0, 5207.5], [975.0, 53.5], [962.0, 57.0], [960.0, 1853.4], [964.0, 4217.714285714286], [967.0, 1268.0], [965.0, 1988.5454545454543], [969.0, 738.1538461538461], [968.0, 488.37142857142857], [972.0, 62.0], [973.0, 53.25], [974.0, 1082.0], [979.0, 42.0], [980.0, 55.0], [984.0, 45.5], [985.0, 40.5], [989.0, 39.0], [991.0, 2619.1724137931033], [978.0, 70.0], [977.0, 83.4], [993.0, 44.666666666666664], [997.0, 41.0], [1000.0, 1849.9457299116507], [999.0, 56.0], [996.0, 765.5], [995.0, 49.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[863.5436869899185, 1968.8761401824322]], "isOverall": false, "label": "MQTT Connect -Aggregated", "isController": false}, {"data": [[6.0, 9212.0], [8.0, 6611.5], [9.0, 4262.0], [12.0, 5808.0], [25.0, 6299.0], [30.0, 9152.0], [35.0, 6239.0], [39.0, 20.0], [38.0, 4141.0], [43.0, 6263.0], [49.0, 4839.5], [77.0, 7206.0], [76.0, 6295.0], [87.0, 19.0], [86.0, 19.0], [85.0, 19.0], [89.0, 5947.0], [88.0, 21.0], [95.0, 1575.75], [94.0, 5798.0], [98.0, 19.0], [102.0, 20.0], [104.0, 22.0], [111.0, 6540.0], [110.0, 6064.0], [119.0, 6091.0], [126.0, 20.0], [124.0, 19.0], [135.0, 5953.0], [131.0, 3945.0], [129.0, 5618.0], [142.0, 5707.0], [139.0, 6140.0], [151.0, 5968.0], [149.0, 5948.0], [145.0, 19.0], [158.0, 5886.5], [156.0, 21.0], [153.0, 20.0], [152.0, 5739.0], [167.0, 5616.0], [163.0, 5947.0], [160.0, 5557.0], [173.0, 5799.0], [180.0, 21.0], [179.0, 19.0], [185.0, 30.5], [196.0, 20.0], [195.0, 20.0], [193.0, 22.0], [203.0, 22.0], [202.0, 21.0], [201.0, 5585.0], [215.0, 20.5], [213.0, 23.0], [211.0, 2865.5], [210.0, 5778.0], [208.0, 23.0], [219.0, 3561.0], [218.0, 22.666666666666668], [217.0, 20.0], [231.0, 23.75], [230.0, 19.0], [229.0, 2689.5], [225.0, 3050.0], [224.0, 25.0], [238.0, 22.0], [236.0, 26.714285714285715], [247.0, 20.0], [241.0, 21.5], [240.0, 3234.333333333333], [255.0, 20.0], [253.0, 21.0], [252.0, 22.0], [251.0, 20.6], [267.0, 21.0], [266.0, 20.0], [263.0, 20.0], [259.0, 1840.6666666666665], [256.0, 20.0], [285.0, 19.5], [293.0, 19.0], [289.0, 5492.0], [317.0, 19.0], [316.0, 3048.0], [312.0, 20.0], [311.0, 5455.0], [335.0, 5176.0], [326.0, 19.0], [323.0, 22.0], [321.0, 19.0], [320.0, 5403.0], [351.0, 5350.0], [344.0, 3203.0], [341.0, 5132.0], [336.0, 5218.0], [366.0, 4946.0], [362.0, 3192.5], [352.0, 4037.5], [383.0, 22.0], [381.0, 5001.0], [375.0, 4872.0], [373.0, 4970.0], [371.0, 5355.0], [370.0, 6183.0], [396.0, 20.0], [394.0, 5017.0], [384.0, 7750.0], [414.0, 5092.0], [409.0, 23.0], [429.0, 4148.0], [418.0, 2854.0], [446.0, 4870.0], [477.0, 2518.0], [475.0, 2813.0], [473.0, 3872.0], [489.0, 4720.5], [484.0, 4894.0], [482.0, 4979.0], [481.0, 5055.0], [511.0, 4706.0], [501.0, 4814.0], [496.0, 2751.0], [541.0, 4069.5], [532.0, 3505.0], [525.0, 4904.0], [515.0, 4866.0], [571.0, 3534.0], [567.0, 4292.0], [559.0, 4635.0], [546.0, 4482.0], [585.0, 2540.0], [583.0, 4756.0], [632.0, 4757.0], [609.0, 4780.0], [657.0, 4528.0], [698.0, 4335.0], [694.0, 4855.0], [683.0, 3769.0], [733.0, 7059.0], [732.0, 3728.0], [728.0, 4422.0], [720.0, 3730.0], [712.0, 4475.0], [706.0, 3645.0], [705.0, 4453.0], [764.0, 4523.0], [758.0, 4406.0], [750.0, 4786.0], [749.0, 1519.0], [738.0, 2097.0], [736.0, 4261.0], [792.0, 869.0], [798.0, 28.5], [799.0, 30.0], [785.0, 23.81818181818182], [784.0, 21.75], [797.0, 26.0], [796.0, 25.0], [794.0, 23.75], [782.0, 408.89743589743614], [770.0, 20.25], [769.0, 19.888888888888886], [772.0, 22.833333333333332], [771.0, 21.142857142857142], [774.0, 19.0], [773.0, 21.57142857142857], [781.0, 21.020408163265305], [780.0, 21.0], [779.0, 22.6], [778.0, 21.0], [777.0, 21.5], [776.0, 21.0], [791.0, 21.0], [790.0, 24.8], [789.0, 25.0], [787.0, 23.0], [824.0, 25.0], [828.0, 20.71428571428571], [829.0, 22.285714285714285], [816.0, 19.0], [827.0, 21.0], [826.0, 25.0], [825.0, 25.0], [815.0, 121.71428571428572], [800.0, 30.0], [802.0, 24.679999999999996], [801.0, 24.666666666666668], [805.0, 23.0], [804.0, 23.375], [807.0, 23.0], [806.0, 19.0], [814.0, 22.0], [813.0, 29.44444444444444], [811.0, 21.0], [810.0, 24.0], [809.0, 23.0], [823.0, 22.722222222222225], [822.0, 25.333333333333332], [820.0, 23.333333333333336], [819.0, 24.0], [859.0, 34.0], [852.0, 37.0], [861.0, 28.833333333333336], [849.0, 39.25], [848.0, 23.0], [851.0, 40.42857142857142], [850.0, 37.0], [858.0, 33.333333333333336], [857.0, 34.0], [856.0, 32.00000000000001], [839.0, 795.0673076923076], [835.0, 21.25], [834.0, 24.2], [833.0, 24.0], [832.0, 24.5], [847.0, 22.0], [846.0, 1977.2], [845.0, 343.5], [844.0, 2888.666666666667], [843.0, 2557.952380952381], [842.0, 380.4545454545455], [841.0, 1290.607142857143], [840.0, 1389.4666666666665], [855.0, 31.0], [854.0, 27.0], [853.0, 35.0], [888.0, 27.166666666666664], [893.0, 28.0], [894.0, 23.2], [892.0, 27.0], [884.0, 23.6], [881.0, 20.8], [879.0, 21.0], [869.0, 24.0], [865.0, 24.866666666666667], [871.0, 25.333333333333332], [870.0, 22.75], [878.0, 22.57142857142857], [875.0, 22.999999999999996], [874.0, 24.0], [873.0, 25.0], [872.0, 23.8], [926.0, 22.666666666666668], [916.0, 22.0], [927.0, 21.5], [913.0, 24.0], [915.0, 27.75], [914.0, 22.0], [925.0, 22.0], [924.0, 22.0], [920.0, 26.5], [903.0, 21.0], [902.0, 21.25], [901.0, 22.357142857142858], [900.0, 23.0], [899.0, 25.0], [898.0, 26.0], [897.0, 20.833333333333336], [896.0, 25.0], [911.0, 24.5], [910.0, 25.0], [909.0, 22.0], [907.0, 25.0], [906.0, 21.6], [905.0, 22.0], [904.0, 21.0], [919.0, 26.5], [918.0, 27.0], [917.0, 23.42857142857143], [953.0, 51.6842105263158], [958.0, 1012.6666666666667], [959.0, 22.0], [945.0, 20.0], [944.0, 20.499999999999996], [947.0, 20.571428571428573], [946.0, 18.0], [949.0, 20.5], [948.0, 20.0], [957.0, 1884.4615384615388], [956.0, 1734.3529411764705], [954.0, 20.333333333333332], [952.0, 22.0], [935.0, 22.0], [933.0, 20.0], [932.0, 23.0], [931.0, 26.0], [930.0, 26.0], [929.0, 27.0], [943.0, 19.0], [941.0, 20.0], [938.0, 21.0], [937.0, 19.0], [936.0, 22.0], [951.0, 21.0], [950.0, 53.42857142857142], [984.0, 37.0], [988.0, 1218.25], [991.0, 3447.9285714285706], [977.0, 884.375], [976.0, 734.8333333333334], [987.0, 1460.6666666666665], [986.0, 30.0], [985.0, 622.7142857142857], [975.0, 369.04], [960.0, 1742.0], [964.0, 2610.0833333333335], [963.0, 895.4], [967.0, 3694.0], [965.0, 1642.8571428571427], [974.0, 827.1666666666667], [972.0, 539.2857142857142], [971.0, 38.0], [970.0, 38.0], [969.0, 1077.78], [968.0, 1856.4090909090908], [983.0, 4187.0], [982.0, 38.142857142857146], [980.0, 1283.5], [978.0, 509.1], [1000.0, 453.93189612934844], [999.0, 2306.75], [997.0, 1898.2], [996.0, 919.6923076923077], [995.0, 26.142857142857142], [993.0, 1583.6666666666665]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[913.1013016411996, 629.7959818902078]], "isOverall": false, "label": "MQTT DisConnect-Aggregated", "isController": false}, {"data": [[2.0, 0.0], [12.0, 0.0], [14.0, 0.0], [17.0, 0.0], [20.0, 0.0], [22.0, 0.0], [23.0, 0.0], [25.0, 0.0], [27.0, 0.0], [30.0, 0.0], [35.0, 0.0], [34.0, 0.0], [36.0, 0.0], [42.0, 0.0], [47.0, 0.0], [49.0, 0.0], [48.0, 0.0], [51.0, 0.0], [50.0, 0.0], [55.0, 0.0], [57.0, 0.0], [56.0, 0.0], [59.0, 0.0], [58.0, 0.0], [67.0, 0.0], [71.0, 0.0], [69.0, 0.0], [73.0, 0.0], [72.0, 0.0], [82.0, 0.0], [81.0, 0.0], [80.0, 0.0], [87.0, 0.0], [86.0, 0.0], [88.0, 0.0], [95.0, 0.0], [94.0, 0.0], [98.0, 0.0], [96.0, 0.0], [102.0, 0.0], [106.0, 0.0], [111.0, 0.0], [110.0, 0.0], [113.0, 0.0], [112.0, 0.0], [123.0, 0.0], [122.0, 0.0], [121.0, 0.0], [125.0, 0.0], [124.0, 0.0], [135.0, 0.0], [133.0, 0.0], [130.0, 0.0], [142.0, 0.0], [139.0, 0.0], [146.0, 0.0], [156.0, 0.0], [155.0, 0.0], [152.0, 0.0], [167.0, 0.0], [165.0, 0.0], [164.0, 0.0], [175.0, 0.0], [173.0, 0.0], [183.0, 0.0], [181.0, 0.0], [179.0, 0.0], [177.0, 0.0], [191.0, 0.0], [185.0, 0.0], [198.0, 0.0], [195.0, 0.0], [192.0, 0.0], [205.0, 0.0], [203.0, 0.0], [202.0, 0.0], [201.0, 0.0], [215.0, 0.0], [213.0, 0.0], [210.0, 0.0], [221.0, 0.0], [219.0, 0.0], [218.0, 0.0], [217.0, 0.0], [230.0, 0.0], [229.0, 0.0], [225.0, 0.0], [224.0, 0.0], [239.0, 0.0], [236.0, 0.0], [235.0, 0.0], [234.0, 0.0], [233.0, 0.0], [232.0, 0.0], [247.0, 0.0], [245.0, 0.0], [244.0, 0.0], [243.0, 0.0], [241.0, 0.0], [255.0, 0.0], [253.0, 0.0], [268.0, 0.0], [267.0, 0.0], [266.0, 0.0], [263.0, 0.0], [262.0, 0.0], [260.0, 0.0], [256.0, 0.0], [286.0, 0.0], [285.0, 0.0], [283.0, 0.0], [279.0, 0.0], [278.0, 0.0], [276.0, 0.0], [273.0, 0.0], [272.0, 0.0], [300.0, 0.0], [297.0, 0.0], [293.0, 0.0], [292.0, 0.0], [318.0, 0.0], [316.0, 0.0], [304.0, 0.0], [332.0, 0.0], [331.0, 0.0], [330.0, 0.0], [328.0, 0.0], [325.0, 0.0], [324.0, 0.0], [323.0, 0.0], [322.0, 0.0], [321.0, 0.0], [351.0, 0.0], [347.0, 0.0], [344.0, 0.0], [341.0, 0.0], [340.0, 0.0], [367.0, 0.0], [364.0, 0.0], [363.0, 0.0], [362.0, 0.0], [354.0, 0.0], [352.0, 0.0], [380.0, 0.0], [379.0, 0.0], [371.0, 0.0], [370.0, 0.0], [396.0, 0.0], [393.0, 0.0], [391.0, 0.0], [388.0, 0.0], [385.0, 0.0], [412.0, 0.0], [411.0, 0.0], [410.0, 0.0], [409.0, 0.0], [402.0, 0.0], [401.0, 0.0], [431.0, 0.0], [429.0, 0.0], [425.0, 0.0], [421.0, 0.0], [419.0, 0.0], [416.0, 0.0], [442.0, 0.0], [439.0, 0.0], [435.0, 0.0], [432.0, 0.0], [461.0, 0.0], [459.0, 0.0], [458.0, 0.0], [453.0, 0.0], [450.0, 0.0], [473.0, 0.0], [466.0, 0.0], [464.0, 0.0], [494.0, 0.0], [488.0, 0.0], [511.0, 0.0], [507.0, 0.0], [505.0, 0.0], [503.0, 0.0], [501.0, 0.0], [496.0, 0.0], [542.0, 0.0], [539.0, 0.0], [538.0, 0.0], [535.0, 0.0], [531.0, 0.0], [529.0, 0.0], [527.0, 0.0], [567.0, 0.0], [562.0, 0.0], [561.0, 0.0], [559.0, 0.0], [555.0, 0.0], [550.0, 0.0], [546.0, 0.0], [583.0, 0.0], [579.0, 0.0], [669.0, 0.0], [665.0, 0.0], [700.0, 0.0], [672.0, 0.0], [722.0, 0.0], [797.0, 0.0], [799.0, 0.0], [796.0, 0.0], [794.0, 0.0], [792.0, 0.0], [773.0, 0.0], [772.0, 0.0], [771.0, 0.0], [770.0, 0.0], [769.0, 0.0], [790.0, 0.0], [787.0, 0.0], [785.0, 0.0], [782.0, 0.0], [781.0, 0.0], [780.0, 0.0], [779.0, 0.0], [828.0, 0.0], [829.0, 0.0], [826.0, 0.0], [806.0, 0.0], [805.0, 0.0], [804.0, 0.0], [802.0, 0.0], [801.0, 0.0], [823.0, 0.0], [820.0, 0.0], [816.0, 0.0], [815.0, 0.0], [814.0, 0.0], [813.0, 0.0], [810.0, 0.0], [809.0, 0.0], [850.0, 0.0], [863.0, 0.0], [859.0, 0.0], [856.0, 0.0], [839.0, 0.0], [835.0, 0.0], [854.0, 0.0], [853.0, 0.0], [851.0, 0.0], [848.0, 0.0], [847.0, 0.0], [846.0, 0.0], [843.0, 0.0], [842.0, 0.0], [841.0, 0.0], [840.0, 0.0], [894.0, 0.0], [881.0, 0.0], [878.0, 0.0], [875.0, 0.0], [872.0, 0.0], [871.0, 0.0], [869.0, 0.0], [865.0, 0.0], [903.0, 0.0], [926.0, 0.0], [920.0, 0.0], [917.0, 0.0], [915.0, 0.0], [907.0, 0.0], [906.0, 0.0], [904.0, 0.0], [902.0, 0.0], [901.0, 0.0], [897.0, 0.0], [896.0, 0.0], [946.0, 0.0], [956.0, 0.0], [957.0, 0.0], [945.0, 0.0], [944.0, 0.0], [954.0, 0.0], [953.0, 0.0], [952.0, 0.0], [935.0, 0.0], [932.0, 0.0], [931.0, 0.0], [943.0, 0.0], [941.0, 0.0], [938.0, 0.0], [950.0, 0.0], [949.0, 0.0], [947.0, 0.0], [975.0, 0.0], [991.0, 0.0], [985.0, 0.0], [982.0, 0.0], [977.0, 0.0], [976.0, 0.0], [974.0, 0.0], [972.0, 0.0], [969.0, 0.0], [968.0, 0.0], [965.0, 0.0], [964.0, 0.0], [963.0, 0.0], [960.0, 0.0], [1000.0, 0.0], [999.0, 0.0], [996.0, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}, {"data": [[901.0475808607325, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.6547328E12, "maxY": 2466.2833333333333, "series": [{"data": [[1.6547328E12, 2466.2833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6547328E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6547328E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6547328E12, "maxY": 1968.8761401824322, "series": [{"data": [[1.6547328E12, 1968.8761401824322]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[1.6547328E12, 629.7959818902078]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.6547328E12, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6547328E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6547328E12, "maxY": 4.9E-324, "series": [{"data": [[1.6547328E12, 0.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[1.6547328E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.6547328E12, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6547328E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6547328E12, "maxY": 4.9E-324, "series": [{"data": [[1.6547328E12, 0.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[1.6547328E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.6547328E12, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6547328E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6547328E12, "maxY": 9966.0, "series": [{"data": [[1.6547328E12, 9966.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6547328E12, 3047.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6547328E12, 8179.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6547328E12, 4095.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6547328E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6547328E12, 26.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6547328E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 109.0, "maxY": 6157.0, "series": [{"data": [[516.0, 2061.0], [553.0, 0.0], [183.0, 0.0], [851.0, 43.0], [911.0, 55.0], [948.0, 22.0], [239.0, 20.0], [262.0, 3043.0], [1064.0, 23.0], [1099.0, 42.0], [288.0, 48.0], [1163.0, 21.0], [313.0, 0.0], [1359.0, 36.0], [1467.0, 27.0], [109.0, 3191.0], [116.0, 19.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[516.0, 4894.0], [553.0, 5077.0], [183.0, 6157.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1467.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 109.0, "maxY": 4.9E-324, "series": [{"data": [[516.0, 0.0], [553.0, 0.0], [183.0, 0.0], [851.0, 0.0], [911.0, 0.0], [948.0, 0.0], [239.0, 0.0], [262.0, 0.0], [1064.0, 0.0], [1099.0, 0.0], [288.0, 0.0], [1163.0, 0.0], [313.0, 0.0], [1359.0, 0.0], [1467.0, 0.0], [109.0, 0.0], [116.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[516.0, 0.0], [553.0, 0.0], [183.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1467.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 190.68333333333334, "minX": 1.6547328E12, "maxY": 190.68333333333334, "series": [{"data": [[1.6547328E12, 190.68333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6547328E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.9333333333333333, "minX": 1.6547328E12, "maxY": 181.68333333333334, "series": [{"data": [[1.6547328E12, 181.68333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6547328E12, 1.9333333333333333]], "isOverall": false, "label": "501", "isController": false}, {"data": [[1.6547328E12, 7.066666666666666]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6547328E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.9333333333333333, "minX": 1.6547328E12, "maxY": 62.36666666666667, "series": [{"data": [[1.6547328E12, 62.36666666666667]], "isOverall": false, "label": "MQTT Connect -success", "isController": false}, {"data": [[1.6547328E12, 7.066666666666666]], "isOverall": false, "label": "MQTT Connect -failure", "isController": false}, {"data": [[1.6547328E12, 56.96666666666667]], "isOverall": false, "label": "MQTT DisConnect-success", "isController": false}, {"data": [[1.6547328E12, 1.9333333333333333]], "isOverall": false, "label": "MQTT DisConnect-failure", "isController": false}, {"data": [[1.6547328E12, 62.35]], "isOverall": false, "label": "MQTT Sub Sampler-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6547328E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.6547328E12, "maxY": 181.68333333333334, "series": [{"data": [[1.6547328E12, 181.68333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6547328E12, 9.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6547328E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

