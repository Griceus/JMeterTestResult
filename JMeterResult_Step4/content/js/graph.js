/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 10536.0, "series": [{"data": [[0.0, 5.0], [0.1, 18.0], [0.2, 34.0], [0.3, 49.0], [0.4, 77.0], [0.5, 152.0], [0.6, 172.0], [0.7, 183.0], [0.8, 215.0], [0.9, 220.0], [1.0, 231.0], [1.1, 258.0], [1.2, 266.0], [1.3, 270.0], [1.4, 278.0], [1.5, 298.0], [1.6, 307.0], [1.7, 323.0], [1.8, 332.0], [1.9, 340.0], [2.0, 341.0], [2.1, 346.0], [2.2, 348.0], [2.3, 356.0], [2.4, 361.0], [2.5, 379.0], [2.6, 384.0], [2.7, 386.0], [2.8, 396.0], [2.9, 401.0], [3.0, 404.0], [3.1, 406.0], [3.2, 411.0], [3.3, 421.0], [3.4, 423.0], [3.5, 425.0], [3.6, 443.0], [3.7, 443.0], [3.8, 450.0], [3.9, 451.0], [4.0, 455.0], [4.1, 460.0], [4.2, 463.0], [4.3, 472.0], [4.4, 477.0], [4.5, 481.0], [4.6, 483.0], [4.7, 488.0], [4.8, 493.0], [4.9, 494.0], [5.0, 496.0], [5.1, 499.0], [5.2, 501.0], [5.3, 504.0], [5.4, 505.0], [5.5, 508.0], [5.6, 509.0], [5.7, 512.0], [5.8, 513.0], [5.9, 514.0], [6.0, 517.0], [6.1, 517.0], [6.2, 521.0], [6.3, 522.0], [6.4, 524.0], [6.5, 525.0], [6.6, 527.0], [6.7, 527.0], [6.8, 528.0], [6.9, 530.0], [7.0, 531.0], [7.1, 533.0], [7.2, 536.0], [7.3, 537.0], [7.4, 538.0], [7.5, 540.0], [7.6, 544.0], [7.7, 545.0], [7.8, 546.0], [7.9, 547.0], [8.0, 550.0], [8.1, 550.0], [8.2, 554.0], [8.3, 556.0], [8.4, 558.0], [8.5, 560.0], [8.6, 563.0], [8.7, 563.0], [8.8, 565.0], [8.9, 567.0], [9.0, 568.0], [9.1, 569.0], [9.2, 569.0], [9.3, 572.0], [9.4, 572.0], [9.5, 573.0], [9.6, 574.0], [9.7, 575.0], [9.8, 576.0], [9.9, 578.0], [10.0, 582.0], [10.1, 585.0], [10.2, 586.0], [10.3, 587.0], [10.4, 589.0], [10.5, 591.0], [10.6, 592.0], [10.7, 594.0], [10.8, 594.0], [10.9, 595.0], [11.0, 597.0], [11.1, 598.0], [11.2, 599.0], [11.3, 600.0], [11.4, 601.0], [11.5, 602.0], [11.6, 604.0], [11.7, 604.0], [11.8, 607.0], [11.9, 609.0], [12.0, 610.0], [12.1, 611.0], [12.2, 611.0], [12.3, 612.0], [12.4, 612.0], [12.5, 615.0], [12.6, 616.0], [12.7, 616.0], [12.8, 617.0], [12.9, 618.0], [13.0, 620.0], [13.1, 621.0], [13.2, 623.0], [13.3, 624.0], [13.4, 625.0], [13.5, 628.0], [13.6, 628.0], [13.7, 629.0], [13.8, 630.0], [13.9, 631.0], [14.0, 632.0], [14.1, 635.0], [14.2, 636.0], [14.3, 637.0], [14.4, 643.0], [14.5, 644.0], [14.6, 645.0], [14.7, 646.0], [14.8, 648.0], [14.9, 649.0], [15.0, 650.0], [15.1, 650.0], [15.2, 651.0], [15.3, 655.0], [15.4, 657.0], [15.5, 660.0], [15.6, 662.0], [15.7, 662.0], [15.8, 663.0], [15.9, 669.0], [16.0, 670.0], [16.1, 671.0], [16.2, 672.0], [16.3, 676.0], [16.4, 678.0], [16.5, 681.0], [16.6, 685.0], [16.7, 686.0], [16.8, 686.0], [16.9, 690.0], [17.0, 691.0], [17.1, 694.0], [17.2, 694.0], [17.3, 695.0], [17.4, 697.0], [17.5, 698.0], [17.6, 700.0], [17.7, 705.0], [17.8, 705.0], [17.9, 707.0], [18.0, 709.0], [18.1, 709.0], [18.2, 711.0], [18.3, 712.0], [18.4, 715.0], [18.5, 718.0], [18.6, 721.0], [18.7, 722.0], [18.8, 725.0], [18.9, 727.0], [19.0, 730.0], [19.1, 732.0], [19.2, 736.0], [19.3, 737.0], [19.4, 741.0], [19.5, 742.0], [19.6, 744.0], [19.7, 746.0], [19.8, 748.0], [19.9, 750.0], [20.0, 752.0], [20.1, 752.0], [20.2, 753.0], [20.3, 756.0], [20.4, 761.0], [20.5, 763.0], [20.6, 765.0], [20.7, 768.0], [20.8, 770.0], [20.9, 776.0], [21.0, 778.0], [21.1, 786.0], [21.2, 789.0], [21.3, 792.0], [21.4, 793.0], [21.5, 795.0], [21.6, 798.0], [21.7, 800.0], [21.8, 804.0], [21.9, 806.0], [22.0, 808.0], [22.1, 809.0], [22.2, 811.0], [22.3, 813.0], [22.4, 816.0], [22.5, 818.0], [22.6, 821.0], [22.7, 825.0], [22.8, 827.0], [22.9, 831.0], [23.0, 833.0], [23.1, 835.0], [23.2, 840.0], [23.3, 840.0], [23.4, 844.0], [23.5, 847.0], [23.6, 851.0], [23.7, 853.0], [23.8, 859.0], [23.9, 861.0], [24.0, 862.0], [24.1, 864.0], [24.2, 865.0], [24.3, 871.0], [24.4, 876.0], [24.5, 879.0], [24.6, 880.0], [24.7, 885.0], [24.8, 891.0], [24.9, 895.0], [25.0, 896.0], [25.1, 901.0], [25.2, 906.0], [25.3, 907.0], [25.4, 909.0], [25.5, 912.0], [25.6, 914.0], [25.7, 917.0], [25.8, 918.0], [25.9, 919.0], [26.0, 920.0], [26.1, 924.0], [26.2, 924.0], [26.3, 929.0], [26.4, 933.0], [26.5, 938.0], [26.6, 939.0], [26.7, 942.0], [26.8, 942.0], [26.9, 944.0], [27.0, 946.0], [27.1, 949.0], [27.2, 954.0], [27.3, 956.0], [27.4, 958.0], [27.5, 959.0], [27.6, 962.0], [27.7, 963.0], [27.8, 968.0], [27.9, 976.0], [28.0, 983.0], [28.1, 988.0], [28.2, 988.0], [28.3, 992.0], [28.4, 1000.0], [28.5, 1001.0], [28.6, 1005.0], [28.7, 1006.0], [28.8, 1010.0], [28.9, 1012.0], [29.0, 1014.0], [29.1, 1016.0], [29.2, 1020.0], [29.3, 1021.0], [29.4, 1022.0], [29.5, 1025.0], [29.6, 1027.0], [29.7, 1029.0], [29.8, 1031.0], [29.9, 1032.0], [30.0, 1034.0], [30.1, 1035.0], [30.2, 1036.0], [30.3, 1039.0], [30.4, 1041.0], [30.5, 1044.0], [30.6, 1044.0], [30.7, 1047.0], [30.8, 1048.0], [30.9, 1050.0], [31.0, 1051.0], [31.1, 1054.0], [31.2, 1055.0], [31.3, 1060.0], [31.4, 1065.0], [31.5, 1073.0], [31.6, 1076.0], [31.7, 1077.0], [31.8, 1085.0], [31.9, 1088.0], [32.0, 1089.0], [32.1, 1090.0], [32.2, 1096.0], [32.3, 1098.0], [32.4, 1107.0], [32.5, 1108.0], [32.6, 1110.0], [32.7, 1114.0], [32.8, 1119.0], [32.9, 1124.0], [33.0, 1126.0], [33.1, 1127.0], [33.2, 1130.0], [33.3, 1144.0], [33.4, 1149.0], [33.5, 1153.0], [33.6, 1156.0], [33.7, 1158.0], [33.8, 1159.0], [33.9, 1171.0], [34.0, 1181.0], [34.1, 1181.0], [34.2, 1183.0], [34.3, 1185.0], [34.4, 1187.0], [34.5, 1190.0], [34.6, 1191.0], [34.7, 1193.0], [34.8, 1198.0], [34.9, 1199.0], [35.0, 1208.0], [35.1, 1209.0], [35.2, 1212.0], [35.3, 1215.0], [35.4, 1218.0], [35.5, 1220.0], [35.6, 1222.0], [35.7, 1230.0], [35.8, 1232.0], [35.9, 1241.0], [36.0, 1243.0], [36.1, 1245.0], [36.2, 1247.0], [36.3, 1254.0], [36.4, 1278.0], [36.5, 1283.0], [36.6, 1299.0], [36.7, 1305.0], [36.8, 1311.0], [36.9, 1320.0], [37.0, 1340.0], [37.1, 1347.0], [37.2, 1365.0], [37.3, 1374.0], [37.4, 1401.0], [37.5, 1412.0], [37.6, 1429.0], [37.7, 1456.0], [37.8, 1462.0], [37.9, 1472.0], [38.0, 1478.0], [38.1, 1484.0], [38.2, 1491.0], [38.3, 1509.0], [38.4, 1514.0], [38.5, 1524.0], [38.6, 1554.0], [38.7, 1564.0], [38.8, 1600.0], [38.9, 1617.0], [39.0, 1623.0], [39.1, 1632.0], [39.2, 1655.0], [39.3, 1679.0], [39.4, 1686.0], [39.5, 1736.0], [39.6, 1749.0], [39.7, 1762.0], [39.8, 1780.0], [39.9, 1787.0], [40.0, 1809.0], [40.1, 1809.0], [40.2, 1818.0], [40.3, 1839.0], [40.4, 1846.0], [40.5, 1871.0], [40.6, 1874.0], [40.7, 1907.0], [40.8, 1922.0], [40.9, 1994.0], [41.0, 2037.0], [41.1, 2088.0], [41.2, 2099.0], [41.3, 2113.0], [41.4, 2184.0], [41.5, 2237.0], [41.6, 2252.0], [41.7, 2258.0], [41.8, 2273.0], [41.9, 2294.0], [42.0, 2317.0], [42.1, 2327.0], [42.2, 2377.0], [42.3, 2390.0], [42.4, 2406.0], [42.5, 2420.0], [42.6, 2448.0], [42.7, 2463.0], [42.8, 2468.0], [42.9, 2501.0], [43.0, 2533.0], [43.1, 2570.0], [43.2, 2614.0], [43.3, 2627.0], [43.4, 2642.0], [43.5, 2666.0], [43.6, 2682.0], [43.7, 2697.0], [43.8, 2720.0], [43.9, 2752.0], [44.0, 2760.0], [44.1, 2783.0], [44.2, 2813.0], [44.3, 2823.0], [44.4, 2855.0], [44.5, 2907.0], [44.6, 2922.0], [44.7, 2956.0], [44.8, 2981.0], [44.9, 2987.0], [45.0, 3020.0], [45.1, 3031.0], [45.2, 3051.0], [45.3, 3065.0], [45.4, 3076.0], [45.5, 3083.0], [45.6, 3091.0], [45.7, 3110.0], [45.8, 3115.0], [45.9, 3123.0], [46.0, 3139.0], [46.1, 3139.0], [46.2, 3147.0], [46.3, 3153.0], [46.4, 3165.0], [46.5, 3173.0], [46.6, 3186.0], [46.7, 3208.0], [46.8, 3237.0], [46.9, 3265.0], [47.0, 3284.0], [47.1, 3293.0], [47.2, 3345.0], [47.3, 3347.0], [47.4, 3365.0], [47.5, 3368.0], [47.6, 3400.0], [47.7, 3410.0], [47.8, 3439.0], [47.9, 3442.0], [48.0, 3459.0], [48.1, 3515.0], [48.2, 3517.0], [48.3, 3543.0], [48.4, 3554.0], [48.5, 3580.0], [48.6, 3607.0], [48.7, 3711.0], [48.8, 6980.0], [48.9, 6996.0], [49.0, 7006.0], [49.1, 7026.0], [49.2, 7046.0], [49.3, 7049.0], [49.4, 7050.0], [49.5, 7051.0], [49.6, 7051.0], [49.7, 7051.0], [49.8, 7051.0], [49.9, 7053.0], [50.0, 7054.0], [50.1, 7054.0], [50.2, 7054.0], [50.3, 7054.0], [50.4, 7057.0], [50.5, 7057.0], [50.6, 7058.0], [50.7, 7058.0], [50.8, 7059.0], [50.9, 7059.0], [51.0, 7060.0], [51.1, 7060.0], [51.2, 7060.0], [51.3, 7061.0], [51.4, 7061.0], [51.5, 7063.0], [51.6, 7065.0], [51.7, 7065.0], [51.8, 7067.0], [51.9, 7072.0], [52.0, 7074.0], [52.1, 7075.0], [52.2, 7081.0], [52.3, 7081.0], [52.4, 7084.0], [52.5, 7092.0], [52.6, 7097.0], [52.7, 7100.0], [52.8, 7100.0], [52.9, 7103.0], [53.0, 7105.0], [53.1, 7106.0], [53.2, 7106.0], [53.3, 7107.0], [53.4, 7107.0], [53.5, 7108.0], [53.6, 7108.0], [53.7, 7108.0], [53.8, 7109.0], [53.9, 7111.0], [54.0, 7111.0], [54.1, 7111.0], [54.2, 7111.0], [54.3, 7112.0], [54.4, 7112.0], [54.5, 7112.0], [54.6, 7113.0], [54.7, 7113.0], [54.8, 7113.0], [54.9, 7113.0], [55.0, 7114.0], [55.1, 7114.0], [55.2, 7114.0], [55.3, 7114.0], [55.4, 7115.0], [55.5, 7115.0], [55.6, 7116.0], [55.7, 7116.0], [55.8, 7117.0], [55.9, 7118.0], [56.0, 7118.0], [56.1, 7118.0], [56.2, 7118.0], [56.3, 7119.0], [56.4, 7119.0], [56.5, 7120.0], [56.6, 7120.0], [56.7, 7121.0], [56.8, 7121.0], [56.9, 7121.0], [57.0, 7123.0], [57.1, 7123.0], [57.2, 7124.0], [57.3, 7124.0], [57.4, 7125.0], [57.5, 7126.0], [57.6, 7128.0], [57.7, 7129.0], [57.8, 7130.0], [57.9, 7131.0], [58.0, 7133.0], [58.1, 7134.0], [58.2, 7134.0], [58.3, 7134.0], [58.4, 7135.0], [58.5, 7136.0], [58.6, 7136.0], [58.7, 7138.0], [58.8, 7138.0], [58.9, 7139.0], [59.0, 7139.0], [59.1, 7141.0], [59.2, 7141.0], [59.3, 7141.0], [59.4, 7142.0], [59.5, 7143.0], [59.6, 7143.0], [59.7, 7143.0], [59.8, 7143.0], [59.9, 7144.0], [60.0, 7146.0], [60.1, 7146.0], [60.2, 7147.0], [60.3, 7148.0], [60.4, 7149.0], [60.5, 7150.0], [60.6, 7150.0], [60.7, 7152.0], [60.8, 7152.0], [60.9, 7152.0], [61.0, 7152.0], [61.1, 7153.0], [61.2, 7153.0], [61.3, 7153.0], [61.4, 7154.0], [61.5, 7154.0], [61.6, 7155.0], [61.7, 7156.0], [61.8, 7156.0], [61.9, 7157.0], [62.0, 7157.0], [62.1, 7157.0], [62.2, 7158.0], [62.3, 7158.0], [62.4, 7159.0], [62.5, 7159.0], [62.6, 7159.0], [62.7, 7159.0], [62.8, 7159.0], [62.9, 7160.0], [63.0, 7160.0], [63.1, 7160.0], [63.2, 7160.0], [63.3, 7160.0], [63.4, 7160.0], [63.5, 7160.0], [63.6, 7161.0], [63.7, 7162.0], [63.8, 7162.0], [63.9, 7162.0], [64.0, 7162.0], [64.1, 7163.0], [64.2, 7163.0], [64.3, 7163.0], [64.4, 7163.0], [64.5, 7163.0], [64.6, 7164.0], [64.7, 7164.0], [64.8, 7164.0], [64.9, 7165.0], [65.0, 7165.0], [65.1, 7165.0], [65.2, 7166.0], [65.3, 7167.0], [65.4, 7167.0], [65.5, 7168.0], [65.6, 7168.0], [65.7, 7168.0], [65.8, 7168.0], [65.9, 7168.0], [66.0, 7169.0], [66.1, 7169.0], [66.2, 7169.0], [66.3, 7169.0], [66.4, 7169.0], [66.5, 7170.0], [66.6, 7170.0], [66.7, 7170.0], [66.8, 7170.0], [66.9, 7170.0], [67.0, 7171.0], [67.1, 7171.0], [67.2, 7172.0], [67.3, 7172.0], [67.4, 7172.0], [67.5, 7172.0], [67.6, 7173.0], [67.7, 7173.0], [67.8, 7173.0], [67.9, 7173.0], [68.0, 7174.0], [68.1, 7174.0], [68.2, 7174.0], [68.3, 7174.0], [68.4, 7175.0], [68.5, 7175.0], [68.6, 7175.0], [68.7, 7176.0], [68.8, 7176.0], [68.9, 7176.0], [69.0, 7176.0], [69.1, 7177.0], [69.2, 7177.0], [69.3, 7177.0], [69.4, 7178.0], [69.5, 7178.0], [69.6, 7178.0], [69.7, 7179.0], [69.8, 7180.0], [69.9, 7180.0], [70.0, 7180.0], [70.1, 7180.0], [70.2, 7180.0], [70.3, 7181.0], [70.4, 7181.0], [70.5, 7182.0], [70.6, 7182.0], [70.7, 7182.0], [70.8, 7182.0], [70.9, 7183.0], [71.0, 7183.0], [71.1, 7184.0], [71.2, 7184.0], [71.3, 7185.0], [71.4, 7185.0], [71.5, 7186.0], [71.6, 7186.0], [71.7, 7187.0], [71.8, 7187.0], [71.9, 7187.0], [72.0, 7188.0], [72.1, 7188.0], [72.2, 7189.0], [72.3, 7189.0], [72.4, 7189.0], [72.5, 7189.0], [72.6, 7190.0], [72.7, 7191.0], [72.8, 7191.0], [72.9, 7192.0], [73.0, 7195.0], [73.1, 7195.0], [73.2, 7197.0], [73.3, 7198.0], [73.4, 7199.0], [73.5, 7200.0], [73.6, 7202.0], [73.7, 7202.0], [73.8, 7202.0], [73.9, 7202.0], [74.0, 7204.0], [74.1, 7204.0], [74.2, 7204.0], [74.3, 7205.0], [74.4, 7206.0], [74.5, 7206.0], [74.6, 7209.0], [74.7, 7211.0], [74.8, 7211.0], [74.9, 7213.0], [75.0, 7214.0], [75.1, 7215.0], [75.2, 7215.0], [75.3, 7215.0], [75.4, 7216.0], [75.5, 7216.0], [75.6, 7217.0], [75.7, 7218.0], [75.8, 7219.0], [75.9, 7221.0], [76.0, 7222.0], [76.1, 7223.0], [76.2, 7225.0], [76.3, 7229.0], [76.4, 7231.0], [76.5, 7231.0], [76.6, 7233.0], [76.7, 7234.0], [76.8, 7236.0], [76.9, 7236.0], [77.0, 7239.0], [77.1, 7240.0], [77.2, 7241.0], [77.3, 7242.0], [77.4, 7243.0], [77.5, 7244.0], [77.6, 7245.0], [77.7, 7247.0], [77.8, 7251.0], [77.9, 7253.0], [78.0, 7255.0], [78.1, 7259.0], [78.2, 7264.0], [78.3, 7264.0], [78.4, 7267.0], [78.5, 7268.0], [78.6, 7269.0], [78.7, 7272.0], [78.8, 7274.0], [78.9, 7280.0], [79.0, 7281.0], [79.1, 7281.0], [79.2, 7288.0], [79.3, 7290.0], [79.4, 7294.0], [79.5, 7296.0], [79.6, 7302.0], [79.7, 7309.0], [79.8, 7325.0], [79.9, 7330.0], [80.0, 7331.0], [80.1, 7375.0], [80.2, 7392.0], [80.3, 7405.0], [80.4, 7443.0], [80.5, 7475.0], [80.6, 7496.0], [80.7, 7533.0], [80.8, 7542.0], [80.9, 7559.0], [81.0, 7581.0], [81.1, 7585.0], [81.2, 7625.0], [81.3, 7636.0], [81.4, 7649.0], [81.5, 7667.0], [81.6, 7678.0], [81.7, 7686.0], [81.8, 7708.0], [81.9, 7733.0], [82.0, 7742.0], [82.1, 7761.0], [82.2, 7770.0], [82.3, 7793.0], [82.4, 7818.0], [82.5, 7837.0], [82.6, 7875.0], [82.7, 7877.0], [82.8, 7891.0], [82.9, 7909.0], [83.0, 7926.0], [83.1, 7936.0], [83.2, 7958.0], [83.3, 7994.0], [83.4, 8009.0], [83.5, 8020.0], [83.6, 8043.0], [83.7, 8051.0], [83.8, 8057.0], [83.9, 8080.0], [84.0, 8082.0], [84.1, 8088.0], [84.2, 8099.0], [84.3, 8113.0], [84.4, 8132.0], [84.5, 8147.0], [84.6, 8187.0], [84.7, 8203.0], [84.8, 8205.0], [84.9, 8240.0], [85.0, 8260.0], [85.1, 8262.0], [85.2, 8269.0], [85.3, 8271.0], [85.4, 8282.0], [85.5, 8301.0], [85.6, 8318.0], [85.7, 8332.0], [85.8, 8350.0], [85.9, 8411.0], [86.0, 8421.0], [86.1, 8450.0], [86.2, 8465.0], [86.3, 8487.0], [86.4, 8496.0], [86.5, 8521.0], [86.6, 8530.0], [86.7, 8533.0], [86.8, 8544.0], [86.9, 8558.0], [87.0, 8601.0], [87.1, 8611.0], [87.2, 8628.0], [87.3, 8673.0], [87.4, 8680.0], [87.5, 8725.0], [87.6, 8733.0], [87.7, 8784.0], [87.8, 8789.0], [87.9, 8798.0], [88.0, 8799.0], [88.1, 8833.0], [88.2, 8847.0], [88.3, 8879.0], [88.4, 8884.0], [88.5, 8906.0], [88.6, 8920.0], [88.7, 8942.0], [88.8, 8965.0], [88.9, 8969.0], [89.0, 8989.0], [89.1, 9005.0], [89.2, 9034.0], [89.3, 9059.0], [89.4, 9066.0], [89.5, 9085.0], [89.6, 9109.0], [89.7, 9120.0], [89.8, 9137.0], [89.9, 9147.0], [90.0, 9153.0], [90.1, 9155.0], [90.2, 9165.0], [90.3, 9181.0], [90.4, 9201.0], [90.5, 9211.0], [90.6, 9220.0], [90.7, 9231.0], [90.8, 9283.0], [90.9, 9293.0], [91.0, 9300.0], [91.1, 9312.0], [91.2, 9321.0], [91.3, 9348.0], [91.4, 9386.0], [91.5, 9411.0], [91.6, 9440.0], [91.7, 9458.0], [91.8, 9476.0], [91.9, 9518.0], [92.0, 9524.0], [92.1, 9530.0], [92.2, 9538.0], [92.3, 9559.0], [92.4, 9566.0], [92.5, 9569.0], [92.6, 9594.0], [92.7, 9608.0], [92.8, 9668.0], [92.9, 9670.0], [93.0, 9690.0], [93.1, 9739.0], [93.2, 9748.0], [93.3, 9773.0], [93.4, 9774.0], [93.5, 9779.0], [93.6, 9785.0], [93.7, 9792.0], [93.8, 9805.0], [93.9, 9829.0], [94.0, 9831.0], [94.1, 9858.0], [94.2, 9878.0], [94.3, 9971.0], [94.4, 9982.0], [94.5, 9993.0], [94.6, 10001.0], [94.7, 10001.0], [94.8, 10002.0], [94.9, 10002.0], [95.0, 10003.0], [95.1, 10003.0], [95.2, 10003.0], [95.3, 10003.0], [95.4, 10003.0], [95.5, 10004.0], [95.6, 10004.0], [95.7, 10004.0], [95.8, 10004.0], [95.9, 10004.0], [96.0, 10004.0], [96.1, 10004.0], [96.2, 10005.0], [96.3, 10005.0], [96.4, 10005.0], [96.5, 10005.0], [96.6, 10005.0], [96.7, 10005.0], [96.8, 10005.0], [96.9, 10005.0], [97.0, 10005.0], [97.1, 10007.0], [97.2, 10009.0], [97.3, 10010.0], [97.4, 10011.0], [97.5, 10011.0], [97.6, 10012.0], [97.7, 10014.0], [97.8, 10014.0], [97.9, 10015.0], [98.0, 10015.0], [98.1, 10019.0], [98.2, 10023.0], [98.3, 10025.0], [98.4, 10033.0], [98.5, 10037.0], [98.6, 10062.0], [98.7, 10066.0], [98.8, 10089.0], [98.9, 10101.0], [99.0, 10138.0], [99.1, 10164.0], [99.2, 10182.0], [99.3, 10214.0], [99.4, 10302.0], [99.5, 10311.0], [99.6, 10369.0], [99.7, 10382.0], [99.8, 10402.0], [99.9, 10428.0], [100.0, 10536.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[0.0, 3.0], [0.1, 3.0], [0.2, 20.0], [0.3, 20.0], [0.4, 21.0], [0.5, 21.0], [0.6, 21.0], [0.7, 22.0], [0.8, 22.0], [0.9, 22.0], [1.0, 22.0], [1.1, 22.0], [1.2, 22.0], [1.3, 22.0], [1.4, 22.0], [1.5, 22.0], [1.6, 23.0], [1.7, 23.0], [1.8, 23.0], [1.9, 23.0], [2.0, 23.0], [2.1, 23.0], [2.2, 23.0], [2.3, 23.0], [2.4, 23.0], [2.5, 23.0], [2.6, 23.0], [2.7, 24.0], [2.8, 24.0], [2.9, 24.0], [3.0, 24.0], [3.1, 24.0], [3.2, 24.0], [3.3, 24.0], [3.4, 24.0], [3.5, 24.0], [3.6, 24.0], [3.7, 24.0], [3.8, 24.0], [3.9, 24.0], [4.0, 24.0], [4.1, 24.0], [4.2, 24.0], [4.3, 25.0], [4.4, 25.0], [4.5, 25.0], [4.6, 25.0], [4.7, 25.0], [4.8, 25.0], [4.9, 25.0], [5.0, 25.0], [5.1, 25.0], [5.2, 25.0], [5.3, 25.0], [5.4, 25.0], [5.5, 25.0], [5.6, 25.0], [5.7, 25.0], [5.8, 25.0], [5.9, 25.0], [6.0, 25.0], [6.1, 25.0], [6.2, 25.0], [6.3, 25.0], [6.4, 25.0], [6.5, 25.0], [6.6, 25.0], [6.7, 25.0], [6.8, 25.0], [6.9, 25.0], [7.0, 25.0], [7.1, 25.0], [7.2, 25.0], [7.3, 25.0], [7.4, 26.0], [7.5, 26.0], [7.6, 26.0], [7.7, 26.0], [7.8, 26.0], [7.9, 26.0], [8.0, 26.0], [8.1, 26.0], [8.2, 26.0], [8.3, 26.0], [8.4, 26.0], [8.5, 26.0], [8.6, 26.0], [8.7, 26.0], [8.8, 26.0], [8.9, 26.0], [9.0, 26.0], [9.1, 26.0], [9.2, 26.0], [9.3, 26.0], [9.4, 26.0], [9.5, 26.0], [9.6, 26.0], [9.7, 26.0], [9.8, 26.0], [9.9, 26.0], [10.0, 26.0], [10.1, 26.0], [10.2, 26.0], [10.3, 26.0], [10.4, 26.0], [10.5, 26.0], [10.6, 26.0], [10.7, 26.0], [10.8, 26.0], [10.9, 26.0], [11.0, 26.0], [11.1, 26.0], [11.2, 26.0], [11.3, 26.0], [11.4, 26.0], [11.5, 26.0], [11.6, 26.0], [11.7, 26.0], [11.8, 26.0], [11.9, 26.0], [12.0, 26.0], [12.1, 26.0], [12.2, 26.0], [12.3, 26.0], [12.4, 26.0], [12.5, 26.0], [12.6, 26.0], [12.7, 26.0], [12.8, 26.0], [12.9, 26.0], [13.0, 26.0], [13.1, 26.0], [13.2, 27.0], [13.3, 27.0], [13.4, 27.0], [13.5, 27.0], [13.6, 27.0], [13.7, 27.0], [13.8, 27.0], [13.9, 27.0], [14.0, 27.0], [14.1, 27.0], [14.2, 27.0], [14.3, 27.0], [14.4, 27.0], [14.5, 27.0], [14.6, 27.0], [14.7, 27.0], [14.8, 27.0], [14.9, 27.0], [15.0, 27.0], [15.1, 27.0], [15.2, 27.0], [15.3, 27.0], [15.4, 27.0], [15.5, 27.0], [15.6, 27.0], [15.7, 27.0], [15.8, 27.0], [15.9, 27.0], [16.0, 27.0], [16.1, 27.0], [16.2, 27.0], [16.3, 27.0], [16.4, 27.0], [16.5, 27.0], [16.6, 27.0], [16.7, 27.0], [16.8, 27.0], [16.9, 27.0], [17.0, 27.0], [17.1, 27.0], [17.2, 27.0], [17.3, 27.0], [17.4, 27.0], [17.5, 27.0], [17.6, 27.0], [17.7, 27.0], [17.8, 27.0], [17.9, 27.0], [18.0, 28.0], [18.1, 28.0], [18.2, 28.0], [18.3, 28.0], [18.4, 28.0], [18.5, 28.0], [18.6, 28.0], [18.7, 28.0], [18.8, 28.0], [18.9, 28.0], [19.0, 28.0], [19.1, 28.0], [19.2, 28.0], [19.3, 28.0], [19.4, 28.0], [19.5, 28.0], [19.6, 28.0], [19.7, 28.0], [19.8, 28.0], [19.9, 28.0], [20.0, 28.0], [20.1, 28.0], [20.2, 28.0], [20.3, 28.0], [20.4, 28.0], [20.5, 28.0], [20.6, 28.0], [20.7, 28.0], [20.8, 28.0], [20.9, 28.0], [21.0, 28.0], [21.1, 28.0], [21.2, 28.0], [21.3, 28.0], [21.4, 28.0], [21.5, 28.0], [21.6, 28.0], [21.7, 28.0], [21.8, 28.0], [21.9, 28.0], [22.0, 28.0], [22.1, 28.0], [22.2, 28.0], [22.3, 28.0], [22.4, 28.0], [22.5, 28.0], [22.6, 28.0], [22.7, 28.0], [22.8, 28.0], [22.9, 28.0], [23.0, 28.0], [23.1, 28.0], [23.2, 28.0], [23.3, 28.0], [23.4, 28.0], [23.5, 28.0], [23.6, 28.0], [23.7, 28.0], [23.8, 29.0], [23.9, 29.0], [24.0, 29.0], [24.1, 29.0], [24.2, 29.0], [24.3, 29.0], [24.4, 29.0], [24.5, 29.0], [24.6, 29.0], [24.7, 29.0], [24.8, 29.0], [24.9, 29.0], [25.0, 29.0], [25.1, 29.0], [25.2, 29.0], [25.3, 29.0], [25.4, 29.0], [25.5, 29.0], [25.6, 29.0], [25.7, 29.0], [25.8, 29.0], [25.9, 29.0], [26.0, 29.0], [26.1, 29.0], [26.2, 29.0], [26.3, 29.0], [26.4, 29.0], [26.5, 29.0], [26.6, 29.0], [26.7, 29.0], [26.8, 30.0], [26.9, 30.0], [27.0, 30.0], [27.1, 30.0], [27.2, 30.0], [27.3, 30.0], [27.4, 30.0], [27.5, 30.0], [27.6, 30.0], [27.7, 30.0], [27.8, 30.0], [27.9, 30.0], [28.0, 30.0], [28.1, 30.0], [28.2, 30.0], [28.3, 30.0], [28.4, 30.0], [28.5, 30.0], [28.6, 30.0], [28.7, 30.0], [28.8, 30.0], [28.9, 30.0], [29.0, 30.0], [29.1, 30.0], [29.2, 30.0], [29.3, 30.0], [29.4, 30.0], [29.5, 30.0], [29.6, 30.0], [29.7, 30.0], [29.8, 30.0], [29.9, 30.0], [30.0, 30.0], [30.1, 31.0], [30.2, 31.0], [30.3, 31.0], [30.4, 31.0], [30.5, 31.0], [30.6, 31.0], [30.7, 31.0], [30.8, 31.0], [30.9, 31.0], [31.0, 31.0], [31.1, 31.0], [31.2, 31.0], [31.3, 31.0], [31.4, 31.0], [31.5, 31.0], [31.6, 31.0], [31.7, 31.0], [31.8, 31.0], [31.9, 31.0], [32.0, 31.0], [32.1, 31.0], [32.2, 31.0], [32.3, 31.0], [32.4, 31.0], [32.5, 31.0], [32.6, 31.0], [32.7, 31.0], [32.8, 31.0], [32.9, 31.0], [33.0, 31.0], [33.1, 31.0], [33.2, 31.0], [33.3, 31.0], [33.4, 31.0], [33.5, 31.0], [33.6, 31.0], [33.7, 31.0], [33.8, 31.0], [33.9, 31.0], [34.0, 31.0], [34.1, 31.0], [34.2, 31.0], [34.3, 31.0], [34.4, 31.0], [34.5, 31.0], [34.6, 31.0], [34.7, 31.0], [34.8, 31.0], [34.9, 31.0], [35.0, 31.0], [35.1, 32.0], [35.2, 32.0], [35.3, 32.0], [35.4, 32.0], [35.5, 32.0], [35.6, 32.0], [35.7, 32.0], [35.8, 32.0], [35.9, 32.0], [36.0, 32.0], [36.1, 32.0], [36.2, 32.0], [36.3, 32.0], [36.4, 32.0], [36.5, 32.0], [36.6, 32.0], [36.7, 32.0], [36.8, 32.0], [36.9, 32.0], [37.0, 32.0], [37.1, 32.0], [37.2, 32.0], [37.3, 32.0], [37.4, 32.0], [37.5, 32.0], [37.6, 32.0], [37.7, 32.0], [37.8, 32.0], [37.9, 32.0], [38.0, 32.0], [38.1, 32.0], [38.2, 32.0], [38.3, 32.0], [38.4, 32.0], [38.5, 32.0], [38.6, 32.0], [38.7, 32.0], [38.8, 32.0], [38.9, 32.0], [39.0, 32.0], [39.1, 32.0], [39.2, 32.0], [39.3, 32.0], [39.4, 32.0], [39.5, 32.0], [39.6, 32.0], [39.7, 33.0], [39.8, 33.0], [39.9, 33.0], [40.0, 33.0], [40.1, 33.0], [40.2, 33.0], [40.3, 33.0], [40.4, 33.0], [40.5, 33.0], [40.6, 33.0], [40.7, 33.0], [40.8, 33.0], [40.9, 33.0], [41.0, 33.0], [41.1, 33.0], [41.2, 33.0], [41.3, 33.0], [41.4, 33.0], [41.5, 33.0], [41.6, 33.0], [41.7, 33.0], [41.8, 33.0], [41.9, 33.0], [42.0, 33.0], [42.1, 33.0], [42.2, 33.0], [42.3, 33.0], [42.4, 33.0], [42.5, 33.0], [42.6, 33.0], [42.7, 33.0], [42.8, 34.0], [42.9, 34.0], [43.0, 34.0], [43.1, 34.0], [43.2, 34.0], [43.3, 34.0], [43.4, 34.0], [43.5, 34.0], [43.6, 34.0], [43.7, 34.0], [43.8, 34.0], [43.9, 34.0], [44.0, 34.0], [44.1, 34.0], [44.2, 34.0], [44.3, 35.0], [44.4, 35.0], [44.5, 35.0], [44.6, 35.0], [44.7, 35.0], [44.8, 35.0], [44.9, 35.0], [45.0, 35.0], [45.1, 35.0], [45.2, 35.0], [45.3, 35.0], [45.4, 35.0], [45.5, 35.0], [45.6, 35.0], [45.7, 35.0], [45.8, 35.0], [45.9, 35.0], [46.0, 36.0], [46.1, 36.0], [46.2, 36.0], [46.3, 36.0], [46.4, 36.0], [46.5, 36.0], [46.6, 36.0], [46.7, 36.0], [46.8, 36.0], [46.9, 36.0], [47.0, 36.0], [47.1, 36.0], [47.2, 36.0], [47.3, 36.0], [47.4, 36.0], [47.5, 36.0], [47.6, 36.0], [47.7, 36.0], [47.8, 36.0], [47.9, 37.0], [48.0, 37.0], [48.1, 37.0], [48.2, 37.0], [48.3, 37.0], [48.4, 37.0], [48.5, 37.0], [48.6, 37.0], [48.7, 37.0], [48.8, 37.0], [48.9, 37.0], [49.0, 37.0], [49.1, 37.0], [49.2, 37.0], [49.3, 37.0], [49.4, 37.0], [49.5, 37.0], [49.6, 37.0], [49.7, 38.0], [49.8, 38.0], [49.9, 38.0], [50.0, 38.0], [50.1, 38.0], [50.2, 38.0], [50.3, 38.0], [50.4, 38.0], [50.5, 38.0], [50.6, 38.0], [50.7, 39.0], [50.8, 39.0], [50.9, 39.0], [51.0, 39.0], [51.1, 39.0], [51.2, 39.0], [51.3, 39.0], [51.4, 39.0], [51.5, 39.0], [51.6, 39.0], [51.7, 39.0], [51.8, 39.0], [51.9, 40.0], [52.0, 40.0], [52.1, 40.0], [52.2, 40.0], [52.3, 40.0], [52.4, 40.0], [52.5, 40.0], [52.6, 40.0], [52.7, 40.0], [52.8, 40.0], [52.9, 40.0], [53.0, 41.0], [53.1, 41.0], [53.2, 41.0], [53.3, 41.0], [53.4, 41.0], [53.5, 41.0], [53.6, 41.0], [53.7, 41.0], [53.8, 41.0], [53.9, 41.0], [54.0, 42.0], [54.1, 42.0], [54.2, 42.0], [54.3, 42.0], [54.4, 42.0], [54.5, 42.0], [54.6, 42.0], [54.7, 42.0], [54.8, 42.0], [54.9, 42.0], [55.0, 42.0], [55.1, 42.0], [55.2, 42.0], [55.3, 43.0], [55.4, 43.0], [55.5, 43.0], [55.6, 43.0], [55.7, 43.0], [55.8, 43.0], [55.9, 43.0], [56.0, 43.0], [56.1, 43.0], [56.2, 43.0], [56.3, 43.0], [56.4, 43.0], [56.5, 43.0], [56.6, 44.0], [56.7, 44.0], [56.8, 44.0], [56.9, 44.0], [57.0, 44.0], [57.1, 44.0], [57.2, 44.0], [57.3, 44.0], [57.4, 44.0], [57.5, 45.0], [57.6, 45.0], [57.7, 45.0], [57.8, 45.0], [57.9, 45.0], [58.0, 45.0], [58.1, 45.0], [58.2, 45.0], [58.3, 45.0], [58.4, 45.0], [58.5, 45.0], [58.6, 45.0], [58.7, 45.0], [58.8, 45.0], [58.9, 46.0], [59.0, 47.0], [59.1, 47.0], [59.2, 47.0], [59.3, 47.0], [59.4, 47.0], [59.5, 47.0], [59.6, 47.0], [59.7, 48.0], [59.8, 48.0], [59.9, 48.0], [60.0, 48.0], [60.1, 49.0], [60.2, 49.0], [60.3, 49.0], [60.4, 49.0], [60.5, 49.0], [60.6, 49.0], [60.7, 49.0], [60.8, 49.0], [60.9, 50.0], [61.0, 50.0], [61.1, 50.0], [61.2, 50.0], [61.3, 50.0], [61.4, 50.0], [61.5, 50.0], [61.6, 51.0], [61.7, 51.0], [61.8, 51.0], [61.9, 51.0], [62.0, 52.0], [62.1, 52.0], [62.2, 52.0], [62.3, 53.0], [62.4, 53.0], [62.5, 53.0], [62.6, 53.0], [62.7, 53.0], [62.8, 53.0], [62.9, 54.0], [63.0, 54.0], [63.1, 54.0], [63.2, 54.0], [63.3, 55.0], [63.4, 55.0], [63.5, 56.0], [63.6, 56.0], [63.7, 56.0], [63.8, 56.0], [63.9, 57.0], [64.0, 57.0], [64.1, 57.0], [64.2, 58.0], [64.3, 58.0], [64.4, 58.0], [64.5, 58.0], [64.6, 58.0], [64.7, 59.0], [64.8, 59.0], [64.9, 59.0], [65.0, 59.0], [65.1, 59.0], [65.2, 59.0], [65.3, 59.0], [65.4, 59.0], [65.5, 60.0], [65.6, 60.0], [65.7, 60.0], [65.8, 60.0], [65.9, 60.0], [66.0, 61.0], [66.1, 61.0], [66.2, 61.0], [66.3, 61.0], [66.4, 62.0], [66.5, 62.0], [66.6, 62.0], [66.7, 62.0], [66.8, 62.0], [66.9, 62.0], [67.0, 62.0], [67.1, 62.0], [67.2, 63.0], [67.3, 63.0], [67.4, 64.0], [67.5, 64.0], [67.6, 65.0], [67.7, 65.0], [67.8, 65.0], [67.9, 65.0], [68.0, 65.0], [68.1, 65.0], [68.2, 66.0], [68.3, 66.0], [68.4, 66.0], [68.5, 66.0], [68.6, 67.0], [68.7, 67.0], [68.8, 67.0], [68.9, 67.0], [69.0, 67.0], [69.1, 67.0], [69.2, 67.0], [69.3, 67.0], [69.4, 67.0], [69.5, 67.0], [69.6, 68.0], [69.7, 68.0], [69.8, 68.0], [69.9, 69.0], [70.0, 70.0], [70.1, 70.0], [70.2, 70.0], [70.3, 71.0], [70.4, 71.0], [70.5, 71.0], [70.6, 71.0], [70.7, 71.0], [70.8, 71.0], [70.9, 71.0], [71.0, 71.0], [71.1, 71.0], [71.2, 72.0], [71.3, 72.0], [71.4, 72.0], [71.5, 73.0], [71.6, 73.0], [71.7, 73.0], [71.8, 74.0], [71.9, 74.0], [72.0, 74.0], [72.1, 75.0], [72.2, 75.0], [72.3, 76.0], [72.4, 76.0], [72.5, 76.0], [72.6, 78.0], [72.7, 78.0], [72.8, 79.0], [72.9, 80.0], [73.0, 80.0], [73.1, 80.0], [73.2, 81.0], [73.3, 89.0], [73.4, 91.0], [73.5, 91.0], [73.6, 95.0], [73.7, 95.0], [73.8, 95.0], [73.9, 96.0], [74.0, 96.0], [74.1, 105.0], [74.2, 115.0], [74.3, 120.0], [74.4, 126.0], [74.5, 131.0], [74.6, 145.0], [74.7, 152.0], [74.8, 160.0], [74.9, 160.0], [75.0, 161.0], [75.1, 161.0], [75.2, 164.0], [75.3, 165.0], [75.4, 165.0], [75.5, 166.0], [75.6, 170.0], [75.7, 173.0], [75.8, 177.0], [75.9, 179.0], [76.0, 179.0], [76.1, 179.0], [76.2, 180.0], [76.3, 188.0], [76.4, 188.0], [76.5, 195.0], [76.6, 199.0], [76.7, 199.0], [76.8, 200.0], [76.9, 201.0], [77.0, 206.0], [77.1, 206.0], [77.2, 207.0], [77.3, 213.0], [77.4, 215.0], [77.5, 216.0], [77.6, 217.0], [77.7, 218.0], [77.8, 219.0], [77.9, 220.0], [78.0, 235.0], [78.1, 240.0], [78.2, 243.0], [78.3, 252.0], [78.4, 254.0], [78.5, 255.0], [78.6, 255.0], [78.7, 256.0], [78.8, 256.0], [78.9, 257.0], [79.0, 257.0], [79.1, 257.0], [79.2, 257.0], [79.3, 258.0], [79.4, 258.0], [79.5, 262.0], [79.6, 264.0], [79.7, 265.0], [79.8, 265.0], [79.9, 266.0], [80.0, 266.0], [80.1, 266.0], [80.2, 267.0], [80.3, 269.0], [80.4, 271.0], [80.5, 289.0], [80.6, 296.0], [80.7, 296.0], [80.8, 299.0], [80.9, 307.0], [81.0, 309.0], [81.1, 310.0], [81.2, 311.0], [81.3, 311.0], [81.4, 314.0], [81.5, 314.0], [81.6, 314.0], [81.7, 315.0], [81.8, 315.0], [81.9, 319.0], [82.0, 328.0], [82.1, 329.0], [82.2, 330.0], [82.3, 330.0], [82.4, 333.0], [82.5, 344.0], [82.6, 347.0], [82.7, 347.0], [82.8, 347.0], [82.9, 347.0], [83.0, 347.0], [83.1, 347.0], [83.2, 347.0], [83.3, 347.0], [83.4, 347.0], [83.5, 347.0], [83.6, 348.0], [83.7, 348.0], [83.8, 348.0], [83.9, 349.0], [84.0, 349.0], [84.1, 353.0], [84.2, 353.0], [84.3, 354.0], [84.4, 355.0], [84.5, 355.0], [84.6, 355.0], [84.7, 370.0], [84.8, 389.0], [84.9, 389.0], [85.0, 392.0], [85.1, 392.0], [85.2, 392.0], [85.3, 393.0], [85.4, 393.0], [85.5, 393.0], [85.6, 393.0], [85.7, 394.0], [85.8, 395.0], [85.9, 395.0], [86.0, 395.0], [86.1, 401.0], [86.2, 413.0], [86.3, 414.0], [86.4, 415.0], [86.5, 415.0], [86.6, 415.0], [86.7, 420.0], [86.8, 420.0], [86.9, 427.0], [87.0, 428.0], [87.1, 431.0], [87.2, 431.0], [87.3, 431.0], [87.4, 432.0], [87.5, 432.0], [87.6, 432.0], [87.7, 432.0], [87.8, 433.0], [87.9, 433.0], [88.0, 433.0], [88.1, 434.0], [88.2, 435.0], [88.3, 435.0], [88.4, 436.0], [88.5, 437.0], [88.6, 437.0], [88.7, 437.0], [88.8, 438.0], [88.9, 438.0], [89.0, 439.0], [89.1, 439.0], [89.2, 452.0], [89.3, 456.0], [89.4, 458.0], [89.5, 459.0], [89.6, 459.0], [89.7, 460.0], [89.8, 460.0], [89.9, 460.0], [90.0, 461.0], [90.1, 471.0], [90.2, 471.0], [90.3, 471.0], [90.4, 472.0], [90.5, 472.0], [90.6, 473.0], [90.7, 473.0], [90.8, 475.0], [90.9, 475.0], [91.0, 475.0], [91.1, 475.0], [91.2, 475.0], [91.3, 475.0], [91.4, 476.0], [91.5, 477.0], [91.6, 477.0], [91.7, 477.0], [91.8, 478.0], [91.9, 479.0], [92.0, 480.0], [92.1, 482.0], [92.2, 483.0], [92.3, 483.0], [92.4, 487.0], [92.5, 487.0], [92.6, 488.0], [92.7, 488.0], [92.8, 488.0], [92.9, 489.0], [93.0, 489.0], [93.1, 490.0], [93.2, 490.0], [93.3, 491.0], [93.4, 491.0], [93.5, 491.0], [93.6, 491.0], [93.7, 491.0], [93.8, 491.0], [93.9, 492.0], [94.0, 492.0], [94.1, 492.0], [94.2, 493.0], [94.3, 493.0], [94.4, 493.0], [94.5, 493.0], [94.6, 493.0], [94.7, 493.0], [94.8, 493.0], [94.9, 493.0], [95.0, 493.0], [95.1, 493.0], [95.2, 493.0], [95.3, 493.0], [95.4, 494.0], [95.5, 494.0], [95.6, 494.0], [95.7, 494.0], [95.8, 494.0], [95.9, 494.0], [96.0, 494.0], [96.1, 494.0], [96.2, 495.0], [96.3, 495.0], [96.4, 495.0], [96.5, 497.0], [96.6, 502.0], [96.7, 503.0], [96.8, 504.0], [96.9, 504.0], [97.0, 505.0], [97.1, 506.0], [97.2, 507.0], [97.3, 507.0], [97.4, 507.0], [97.5, 509.0], [97.6, 511.0], [97.7, 511.0], [97.8, 517.0], [97.9, 524.0], [98.0, 524.0], [98.1, 524.0], [98.2, 525.0], [98.3, 525.0], [98.4, 525.0], [98.5, 525.0], [98.6, 526.0], [98.7, 527.0], [98.8, 527.0], [98.9, 528.0], [99.0, 528.0], [99.1, 528.0], [99.2, 528.0], [99.3, 531.0], [99.4, 536.0], [99.5, 537.0], [99.6, 537.0], [99.7, 540.0], [99.8, 640.0], [99.9, 663.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 0.0], [40.1, 0.0], [40.2, 0.0], [40.3, 0.0], [40.4, 0.0], [40.5, 0.0], [40.6, 0.0], [40.7, 0.0], [40.8, 0.0], [40.9, 0.0], [41.0, 0.0], [41.1, 0.0], [41.2, 0.0], [41.3, 0.0], [41.4, 0.0], [41.5, 0.0], [41.6, 0.0], [41.7, 0.0], [41.8, 0.0], [41.9, 0.0], [42.0, 0.0], [42.1, 0.0], [42.2, 0.0], [42.3, 0.0], [42.4, 0.0], [42.5, 0.0], [42.6, 0.0], [42.7, 0.0], [42.8, 0.0], [42.9, 0.0], [43.0, 0.0], [43.1, 0.0], [43.2, 0.0], [43.3, 0.0], [43.4, 0.0], [43.5, 0.0], [43.6, 0.0], [43.7, 0.0], [43.8, 0.0], [43.9, 0.0], [44.0, 0.0], [44.1, 0.0], [44.2, 0.0], [44.3, 0.0], [44.4, 0.0], [44.5, 0.0], [44.6, 0.0], [44.7, 0.0], [44.8, 0.0], [44.9, 0.0], [45.0, 0.0], [45.1, 0.0], [45.2, 0.0], [45.3, 0.0], [45.4, 0.0], [45.5, 0.0], [45.6, 0.0], [45.7, 0.0], [45.8, 0.0], [45.9, 0.0], [46.0, 0.0], [46.1, 0.0], [46.2, 0.0], [46.3, 0.0], [46.4, 0.0], [46.5, 0.0], [46.6, 0.0], [46.7, 0.0], [46.8, 0.0], [46.9, 0.0], [47.0, 0.0], [47.1, 0.0], [47.2, 0.0], [47.3, 0.0], [47.4, 0.0], [47.5, 0.0], [47.6, 0.0], [47.7, 0.0], [47.8, 0.0], [47.9, 0.0], [48.0, 0.0], [48.1, 0.0], [48.2, 0.0], [48.3, 0.0], [48.4, 0.0], [48.5, 0.0], [48.6, 0.0], [48.7, 0.0], [48.8, 0.0], [48.9, 0.0], [49.0, 0.0], [49.1, 0.0], [49.2, 0.0], [49.3, 0.0], [49.4, 0.0], [49.5, 0.0], [49.6, 0.0], [49.7, 0.0], [49.8, 0.0], [49.9, 0.0], [50.0, 0.0], [50.1, 0.0], [50.2, 0.0], [50.3, 0.0], [50.4, 0.0], [50.5, 0.0], [50.6, 0.0], [50.7, 0.0], [50.8, 0.0], [50.9, 0.0], [51.0, 0.0], [51.1, 0.0], [51.2, 0.0], [51.3, 0.0], [51.4, 0.0], [51.5, 0.0], [51.6, 0.0], [51.7, 0.0], [51.8, 0.0], [51.9, 0.0], [52.0, 0.0], [52.1, 0.0], [52.2, 0.0], [52.3, 0.0], [52.4, 0.0], [52.5, 0.0], [52.6, 0.0], [52.7, 0.0], [52.8, 0.0], [52.9, 0.0], [53.0, 0.0], [53.1, 0.0], [53.2, 0.0], [53.3, 0.0], [53.4, 0.0], [53.5, 0.0], [53.6, 0.0], [53.7, 0.0], [53.8, 0.0], [53.9, 0.0], [54.0, 0.0], [54.1, 0.0], [54.2, 0.0], [54.3, 0.0], [54.4, 0.0], [54.5, 0.0], [54.6, 0.0], [54.7, 0.0], [54.8, 0.0], [54.9, 0.0], [55.0, 0.0], [55.1, 0.0], [55.2, 0.0], [55.3, 0.0], [55.4, 0.0], [55.5, 0.0], [55.6, 0.0], [55.7, 0.0], [55.8, 0.0], [55.9, 0.0], [56.0, 0.0], [56.1, 0.0], [56.2, 0.0], [56.3, 0.0], [56.4, 0.0], [56.5, 0.0], [56.6, 0.0], [56.7, 0.0], [56.8, 0.0], [56.9, 0.0], [57.0, 0.0], [57.1, 0.0], [57.2, 0.0], [57.3, 0.0], [57.4, 0.0], [57.5, 0.0], [57.6, 0.0], [57.7, 0.0], [57.8, 0.0], [57.9, 0.0], [58.0, 0.0], [58.1, 0.0], [58.2, 0.0], [58.3, 0.0], [58.4, 0.0], [58.5, 0.0], [58.6, 0.0], [58.7, 0.0], [58.8, 0.0], [58.9, 0.0], [59.0, 0.0], [59.1, 0.0], [59.2, 0.0], [59.3, 0.0], [59.4, 0.0], [59.5, 0.0], [59.6, 0.0], [59.7, 0.0], [59.8, 0.0], [59.9, 0.0], [60.0, 0.0], [60.1, 0.0], [60.2, 0.0], [60.3, 0.0], [60.4, 0.0], [60.5, 0.0], [60.6, 0.0], [60.7, 0.0], [60.8, 0.0], [60.9, 0.0], [61.0, 0.0], [61.1, 0.0], [61.2, 0.0], [61.3, 0.0], [61.4, 0.0], [61.5, 0.0], [61.6, 0.0], [61.7, 0.0], [61.8, 0.0], [61.9, 0.0], [62.0, 0.0], [62.1, 0.0], [62.2, 0.0], [62.3, 0.0], [62.4, 0.0], [62.5, 0.0], [62.6, 0.0], [62.7, 0.0], [62.8, 0.0], [62.9, 0.0], [63.0, 0.0], [63.1, 0.0], [63.2, 0.0], [63.3, 0.0], [63.4, 0.0], [63.5, 0.0], [63.6, 0.0], [63.7, 0.0], [63.8, 0.0], [63.9, 0.0], [64.0, 0.0], [64.1, 0.0], [64.2, 0.0], [64.3, 0.0], [64.4, 0.0], [64.5, 0.0], [64.6, 0.0], [64.7, 0.0], [64.8, 0.0], [64.9, 0.0], [65.0, 0.0], [65.1, 0.0], [65.2, 0.0], [65.3, 0.0], [65.4, 0.0], [65.5, 0.0], [65.6, 0.0], [65.7, 0.0], [65.8, 0.0], [65.9, 0.0], [66.0, 0.0], [66.1, 0.0], [66.2, 0.0], [66.3, 0.0], [66.4, 0.0], [66.5, 0.0], [66.6, 0.0], [66.7, 0.0], [66.8, 0.0], [66.9, 0.0], [67.0, 0.0], [67.1, 0.0], [67.2, 0.0], [67.3, 0.0], [67.4, 0.0], [67.5, 0.0], [67.6, 0.0], [67.7, 0.0], [67.8, 0.0], [67.9, 0.0], [68.0, 0.0], [68.1, 0.0], [68.2, 0.0], [68.3, 0.0], [68.4, 0.0], [68.5, 0.0], [68.6, 0.0], [68.7, 0.0], [68.8, 0.0], [68.9, 0.0], [69.0, 0.0], [69.1, 0.0], [69.2, 0.0], [69.3, 0.0], [69.4, 0.0], [69.5, 0.0], [69.6, 0.0], [69.7, 0.0], [69.8, 0.0], [69.9, 0.0], [70.0, 0.0], [70.1, 0.0], [70.2, 0.0], [70.3, 0.0], [70.4, 0.0], [70.5, 0.0], [70.6, 0.0], [70.7, 0.0], [70.8, 0.0], [70.9, 0.0], [71.0, 0.0], [71.1, 0.0], [71.2, 0.0], [71.3, 0.0], [71.4, 0.0], [71.5, 0.0], [71.6, 0.0], [71.7, 0.0], [71.8, 0.0], [71.9, 0.0], [72.0, 0.0], [72.1, 0.0], [72.2, 0.0], [72.3, 0.0], [72.4, 0.0], [72.5, 0.0], [72.6, 0.0], [72.7, 0.0], [72.8, 0.0], [72.9, 0.0], [73.0, 0.0], [73.1, 0.0], [73.2, 0.0], [73.3, 0.0], [73.4, 0.0], [73.5, 0.0], [73.6, 0.0], [73.7, 0.0], [73.8, 0.0], [73.9, 0.0], [74.0, 0.0], [74.1, 0.0], [74.2, 0.0], [74.3, 0.0], [74.4, 0.0], [74.5, 0.0], [74.6, 0.0], [74.7, 0.0], [74.8, 0.0], [74.9, 0.0], [75.0, 0.0], [75.1, 0.0], [75.2, 0.0], [75.3, 0.0], [75.4, 0.0], [75.5, 0.0], [75.6, 0.0], [75.7, 0.0], [75.8, 0.0], [75.9, 0.0], [76.0, 0.0], [76.1, 0.0], [76.2, 0.0], [76.3, 0.0], [76.4, 0.0], [76.5, 0.0], [76.6, 0.0], [76.7, 0.0], [76.8, 0.0], [76.9, 0.0], [77.0, 0.0], [77.1, 0.0], [77.2, 0.0], [77.3, 0.0], [77.4, 0.0], [77.5, 0.0], [77.6, 0.0], [77.7, 0.0], [77.8, 0.0], [77.9, 0.0], [78.0, 0.0], [78.1, 0.0], [78.2, 0.0], [78.3, 0.0], [78.4, 0.0], [78.5, 0.0], [78.6, 0.0], [78.7, 0.0], [78.8, 0.0], [78.9, 0.0], [79.0, 0.0], [79.1, 0.0], [79.2, 0.0], [79.3, 0.0], [79.4, 0.0], [79.5, 0.0], [79.6, 0.0], [79.7, 0.0], [79.8, 0.0], [79.9, 0.0], [80.0, 0.0], [80.1, 0.0], [80.2, 0.0], [80.3, 0.0], [80.4, 0.0], [80.5, 0.0], [80.6, 0.0], [80.7, 0.0], [80.8, 0.0], [80.9, 0.0], [81.0, 0.0], [81.1, 0.0], [81.2, 0.0], [81.3, 0.0], [81.4, 0.0], [81.5, 0.0], [81.6, 0.0], [81.7, 0.0], [81.8, 0.0], [81.9, 0.0], [82.0, 0.0], [82.1, 0.0], [82.2, 0.0], [82.3, 0.0], [82.4, 0.0], [82.5, 0.0], [82.6, 0.0], [82.7, 0.0], [82.8, 0.0], [82.9, 0.0], [83.0, 0.0], [83.1, 0.0], [83.2, 0.0], [83.3, 0.0], [83.4, 0.0], [83.5, 0.0], [83.6, 0.0], [83.7, 0.0], [83.8, 0.0], [83.9, 0.0], [84.0, 0.0], [84.1, 0.0], [84.2, 0.0], [84.3, 0.0], [84.4, 0.0], [84.5, 0.0], [84.6, 0.0], [84.7, 0.0], [84.8, 0.0], [84.9, 0.0], [85.0, 0.0], [85.1, 0.0], [85.2, 0.0], [85.3, 0.0], [85.4, 0.0], [85.5, 0.0], [85.6, 0.0], [85.7, 0.0], [85.8, 0.0], [85.9, 0.0], [86.0, 0.0], [86.1, 0.0], [86.2, 0.0], [86.3, 0.0], [86.4, 0.0], [86.5, 0.0], [86.6, 0.0], [86.7, 0.0], [86.8, 0.0], [86.9, 0.0], [87.0, 0.0], [87.1, 0.0], [87.2, 0.0], [87.3, 0.0], [87.4, 0.0], [87.5, 0.0], [87.6, 0.0], [87.7, 0.0], [87.8, 0.0], [87.9, 0.0], [88.0, 0.0], [88.1, 0.0], [88.2, 0.0], [88.3, 0.0], [88.4, 0.0], [88.5, 0.0], [88.6, 0.0], [88.7, 0.0], [88.8, 0.0], [88.9, 0.0], [89.0, 0.0], [89.1, 0.0], [89.2, 0.0], [89.3, 0.0], [89.4, 0.0], [89.5, 0.0], [89.6, 0.0], [89.7, 0.0], [89.8, 0.0], [89.9, 0.0], [90.0, 0.0], [90.1, 0.0], [90.2, 0.0], [90.3, 0.0], [90.4, 0.0], [90.5, 0.0], [90.6, 0.0], [90.7, 0.0], [90.8, 0.0], [90.9, 0.0], [91.0, 0.0], [91.1, 0.0], [91.2, 0.0], [91.3, 0.0], [91.4, 0.0], [91.5, 0.0], [91.6, 0.0], [91.7, 0.0], [91.8, 0.0], [91.9, 0.0], [92.0, 0.0], [92.1, 0.0], [92.2, 0.0], [92.3, 0.0], [92.4, 0.0], [92.5, 0.0], [92.6, 0.0], [92.7, 0.0], [92.8, 0.0], [92.9, 0.0], [93.0, 0.0], [93.1, 0.0], [93.2, 0.0], [93.3, 0.0], [93.4, 0.0], [93.5, 0.0], [93.6, 0.0], [93.7, 0.0], [93.8, 0.0], [93.9, 0.0], [94.0, 0.0], [94.1, 0.0], [94.2, 0.0], [94.3, 0.0], [94.4, 0.0], [94.5, 0.0], [94.6, 0.0], [94.7, 0.0], [94.8, 0.0], [94.9, 0.0], [95.0, 0.0], [95.1, 0.0], [95.2, 0.0], [95.3, 0.0], [95.4, 0.0], [95.5, 0.0], [95.6, 0.0], [95.7, 0.0], [95.8, 0.0], [95.9, 0.0], [96.0, 0.0], [96.1, 0.0], [96.2, 0.0], [96.3, 0.0], [96.4, 0.0], [96.5, 0.0], [96.6, 0.0], [96.7, 0.0], [96.8, 0.0], [96.9, 0.0], [97.0, 0.0], [97.1, 0.0], [97.2, 0.0], [97.3, 0.0], [97.4, 0.0], [97.5, 0.0], [97.6, 0.0], [97.7, 0.0], [97.8, 0.0], [97.9, 0.0], [98.0, 0.0], [98.1, 0.0], [98.2, 0.0], [98.3, 0.0], [98.4, 0.0], [98.5, 0.0], [98.6, 0.0], [98.7, 0.0], [98.8, 0.0], [98.9, 0.0], [99.0, 0.0], [99.1, 0.0], [99.2, 0.0], [99.3, 0.0], [99.4, 0.0], [99.5, 0.0], [99.6, 0.0], [99.7, 0.0], [99.8, 0.0], [99.9, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1121.0, "series": [{"data": [[0.0, 8.0], [600.0, 124.0], [700.0, 79.0], [800.0, 67.0], [900.0, 64.0], [1000.0, 77.0], [1100.0, 51.0], [1200.0, 33.0], [1300.0, 15.0], [1400.0, 16.0], [1500.0, 11.0], [1600.0, 13.0], [1700.0, 11.0], [1800.0, 13.0], [1900.0, 5.0], [2000.0, 6.0], [2100.0, 4.0], [2200.0, 11.0], [2300.0, 6.0], [2400.0, 11.0], [2500.0, 6.0], [2600.0, 11.0], [2800.0, 7.0], [2700.0, 7.0], [2900.0, 10.0], [3000.0, 14.0], [3100.0, 19.0], [3200.0, 10.0], [3300.0, 8.0], [3400.0, 9.0], [3500.0, 10.0], [3700.0, 2.0], [3600.0, 2.0], [6900.0, 3.0], [7000.0, 73.0], [7100.0, 405.0], [7200.0, 120.0], [7300.0, 12.0], [7400.0, 8.0], [7600.0, 13.0], [7500.0, 10.0], [7700.0, 10.0], [7800.0, 11.0], [7900.0, 10.0], [8000.0, 16.0], [8100.0, 9.0], [8700.0, 10.0], [8200.0, 16.0], [8300.0, 8.0], [8500.0, 10.0], [8600.0, 11.0], [8400.0, 10.0], [8800.0, 9.0], [8900.0, 12.0], [9100.0, 15.0], [9200.0, 13.0], [9000.0, 9.0], [9700.0, 15.0], [9400.0, 9.0], [9500.0, 14.0], [9600.0, 8.0], [9300.0, 9.0], [10000.0, 85.0], [9900.0, 5.0], [9800.0, 9.0], [10100.0, 8.0], [10200.0, 2.0], [10500.0, 1.0], [10300.0, 8.0], [10400.0, 3.0], [100.0, 7.0], [200.0, 15.0], [300.0, 25.0], [400.0, 46.0], [500.0, 118.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[0.0, 705.0], [300.0, 49.0], [600.0, 2.0], [100.0, 26.0], [200.0, 39.0], [400.0, 100.0], [500.0, 31.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 1121.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 550.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1916.0, "series": [{"data": [[0.0, 1916.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 550.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 562.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 995.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 828.670395227441, "minX": 1.65473298E12, "maxY": 828.670395227441, "series": [{"data": [[1.65473298E12, 828.670395227441]], "isOverall": false, "label": "Background Connection Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473298E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 30.0, "maxY": 10415.0, "series": [{"data": [[30.0, 3516.0], [31.0, 3430.0], [33.0, 3401.5], [35.0, 3386.0909090909095], [34.0, 3580.0], [39.0, 3191.0], [38.0, 3348.9285714285716], [41.0, 3194.5], [43.0, 3060.0], [45.0, 3549.0], [44.0, 3128.5], [51.0, 3260.0], [52.0, 3286.3333333333335], [57.0, 3459.0], [56.0, 3284.0], [58.0, 3037.0], [71.0, 10014.428571428572], [69.0, 3366.5], [73.0, 10005.0], [72.0, 10005.75], [79.0, 10005.0], [76.0, 2983.5], [80.0, 10005.0], [84.0, 7741.0], [91.0, 10035.666666666666], [90.0, 10015.666666666666], [92.0, 6640.0], [99.0, 10415.0], [103.0, 8613.0], [101.0, 10331.4], [105.0, 6712.0], [104.0, 10171.0], [110.0, 10276.5], [108.0, 5462.333333333333], [115.0, 10005.0], [114.0, 6457.5], [112.0, 10214.0], [119.0, 6291.0], [118.0, 10101.0], [116.0, 3190.0], [123.0, 6473.333333333333], [126.0, 2707.0], [133.0, 7862.0], [132.0, 6495.5], [129.0, 2855.0], [143.0, 9805.0], [141.0, 4673.25], [137.0, 4573.75], [147.0, 10003.0], [146.0, 6576.5], [144.0, 2819.0], [158.0, 10182.0], [156.0, 6383.5], [154.0, 5300.666666666667], [152.0, 9679.0], [165.0, 9888.5], [163.0, 7525.666666666667], [162.0, 6148.0], [160.0, 2697.0], [175.0, 2720.0], [174.0, 6227.0], [170.0, 9617.0], [183.0, 5985.5], [181.0, 2861.0], [180.0, 6625.285714285715], [179.0, 2722.6666666666665], [191.0, 8239.75], [186.0, 7661.0], [185.0, 2448.0], [192.0, 2327.0], [205.0, 6149.0], [202.0, 9421.5], [215.0, 10003.0], [214.0, 10003.0], [210.0, 10005.0], [209.0, 10018.0], [223.0, 10009.75], [221.0, 9005.625], [220.0, 10004.0], [229.0, 4799.0], [227.0, 2567.0], [225.0, 2670.0], [224.0, 10014.666666666666], [239.0, 5993.5], [237.0, 9548.333333333334], [236.0, 4223.25], [235.0, 7175.666666666667], [244.0, 9831.0], [242.0, 9828.0], [241.0, 5984.0], [253.0, 9154.0], [251.0, 8448.0], [248.0, 9785.0], [269.0, 2139.0], [270.0, 2258.0], [268.0, 9119.5], [267.0, 9200.0], [264.0, 4639.666666666667], [263.0, 9739.0], [260.0, 5816.5], [259.0, 9692.666666666666], [258.0, 6984.666666666666], [286.0, 5740.5], [284.0, 5818.5], [283.0, 9405.5], [280.0, 4603.666666666667], [275.0, 4655.666666666667], [273.0, 2273.0], [272.0, 5720.5], [303.0, 2463.0], [299.0, 2480.0], [298.0, 4637.333333333333], [295.0, 9059.0], [294.0, 4349.0], [291.0, 1977.5], [290.0, 9019.5], [288.0, 9300.0], [317.0, 9214.666666666666], [314.0, 7066.666666666667], [313.0, 4445.5], [307.0, 4857.8], [335.0, 5223.5], [330.0, 5399.5], [329.0, 9321.0], [328.0, 8865.5], [327.0, 9440.0], [320.0, 1971.5], [325.0, 9458.0], [324.0, 1999.0], [323.0, 8911.0], [321.0, 1895.0], [350.0, 1877.5], [348.0, 5223.5], [345.0, 8680.0], [343.0, 5337.5], [341.0, 8925.0], [340.0, 6337.75], [367.0, 7046.25], [362.0, 1563.5], [360.0, 3978.333333333333], [359.0, 1676.5], [356.0, 8733.0], [355.0, 6408.0], [354.0, 9312.0], [383.0, 6907.75], [379.0, 5246.875], [378.0, 8533.0], [373.0, 7107.75], [399.0, 8492.5], [393.0, 1539.0], [392.0, 8487.0], [388.0, 1825.0], [386.0, 1818.0], [385.0, 1554.0], [414.0, 8993.0], [412.0, 5062.0], [411.0, 5177.0], [408.0, 1456.0], [407.0, 7026.0], [404.0, 1749.0], [400.0, 4294.0], [428.0, 6202.666666666667], [426.0, 4808.5], [425.0, 1208.0], [422.0, 1639.5], [421.0, 8966.0], [419.0, 8292.0], [418.0, 5277.0], [417.0, 6207.333333333334], [445.0, 7526.75], [444.0, 10001.0], [442.0, 10001.0], [441.0, 10004.0], [440.0, 8612.0], [439.0, 1550.5], [435.0, 1149.0], [434.0, 4889.0], [432.0, 3843.6666666666665], [463.0, 5684.5], [461.0, 10005.0], [460.0, 8203.0], [458.0, 10004.0], [457.0, 10002.0], [455.0, 5609.0], [454.0, 3982.0], [449.0, 5621.75], [479.0, 1632.0], [478.0, 1460.0], [476.0, 7531.0], [474.0, 7824.428571428572], [472.0, 9212.5], [470.0, 10004.0], [464.0, 10005.0], [493.0, 4838.0], [495.0, 982.0], [492.0, 4766.5], [491.0, 8135.0], [488.0, 5832.0], [486.0, 8113.0], [484.0, 1653.0], [483.0, 3132.5], [482.0, 1658.0], [511.0, 8673.0], [507.0, 8340.5], [506.0, 1001.0], [504.0, 3538.5], [502.0, 1110.0], [500.0, 1306.0], [541.0, 679.0], [532.0, 5327.999999999999], [531.0, 1608.2727272727275], [533.0, 771.2], [534.0, 2493.5], [535.0, 729.3571428571429], [539.0, 818.0], [538.0, 891.0], [537.0, 8282.0], [536.0, 4639.5], [519.0, 8906.0], [517.0, 9779.0], [515.0, 8266.0], [514.0, 6695.8], [513.0, 4672.5], [522.0, 8914.5], [521.0, 8204.0], [520.0, 1366.0], [543.0, 663.0], [540.0, 879.5], [547.0, 769.6666666666666], [545.0, 1895.375], [548.0, 844.0], [551.0, 687.8], [552.0, 800.3333333333334], [553.0, 1059.0], [554.0, 943.3333333333334], [556.0, 676.3333333333334], [558.0, 1392.0], [559.0, 4849.75], [560.0, 1742.5714285714287], [575.0, 604.5], [574.0, 7793.0], [573.0, 958.3333333333334], [570.0, 2590.625], [571.0, 793.5], [568.0, 1061.6666666666667], [569.0, 5618.166666666667], [561.0, 1988.5], [562.0, 2746.0], [565.0, 729.0], [566.0, 922.6666666666666], [602.0, 4699.333333333333], [591.0, 567.75], [579.0, 1001.0], [578.0, 5707.333333333333], [576.0, 1086.0], [582.0, 6213.333333333333], [600.0, 788.0], [601.0, 512.0], [603.0, 4478.5], [604.0, 1047.0], [605.0, 631.6666666666666], [606.0, 715.0], [607.0, 4188.5], [587.0, 3190.285714285714], [589.0, 889.0], [590.0, 743.6666666666666], [592.0, 889.0], [593.0, 805.0], [594.0, 2395.166666666667], [595.0, 2171.8], [596.0, 858.0], [597.0, 845.3333333333334], [598.0, 867.5], [599.0, 846.5], [614.0, 1045.0], [621.0, 1883.7142857142856], [610.0, 4463.5], [608.0, 3707.8], [622.0, 2590.0], [623.0, 888.5], [612.0, 729.0], [611.0, 5329.5], [613.0, 7979.5], [615.0, 628.0], [632.0, 799.6], [635.0, 1903.5833333333335], [636.0, 938.0], [637.0, 960.0], [638.0, 3251.0], [626.0, 871.0], [627.0, 916.0], [628.0, 913.0], [631.0, 904.0], [630.0, 3923.5714285714284], [616.0, 2659.0], [617.0, 798.1428571428571], [620.0, 761.0], [653.0, 702.0], [641.0, 776.5], [640.0, 950.8571428571429], [655.0, 821.375], [644.0, 1127.0], [643.0, 4305.0], [642.0, 4282.5], [646.0, 799.0], [647.0, 3695.6666666666665], [666.0, 750.0], [667.0, 835.6363636363636], [669.0, 1177.0], [670.0, 945.0], [671.0, 2424.8], [656.0, 379.0], [658.0, 1028.0], [660.0, 794.8888888888888], [659.0, 7528.0], [662.0, 817.3333333333334], [648.0, 858.6], [649.0, 4163.0], [650.0, 914.25], [676.0, 708.5], [674.0, 4094.222222222222], [686.0, 451.0], [672.0, 443.0], [673.0, 3014.6666666666665], [677.0, 921.2857142857143], [679.0, 945.0], [680.0, 956.5], [682.0, 1133.0], [684.0, 691.4], [685.0, 1095.6666666666667], [689.0, 425.0], [702.0, 944.0], [703.0, 976.4999999999999], [699.0, 785.1], [700.0, 648.6666666666666], [697.0, 1105.0], [698.0, 723.0], [690.0, 923.4], [695.0, 616.5], [706.0, 540.3333333333334], [705.0, 674.0], [717.0, 671.0], [718.0, 7701.5], [719.0, 667.0], [707.0, 794.8], [708.0, 1054.0], [710.0, 875.5], [711.0, 332.0], [721.0, 663.0], [732.0, 3519.2222222222217], [734.0, 903.5], [729.0, 575.0], [731.0, 593.5], [723.0, 1309.0], [724.0, 846.3333333333334], [726.0, 3102.8888888888887], [712.0, 650.0], [713.0, 671.6666666666666], [714.0, 449.5], [716.0, 697.5], [738.0, 811.6666666666666], [736.0, 722.875], [739.0, 832.25], [741.0, 835.0], [743.0, 581.0], [760.0, 637.5], [761.0, 682.5], [763.0, 690.0], [765.0, 649.0], [766.0, 494.0], [752.0, 558.0], [753.0, 527.0], [754.0, 739.6666666666666], [755.0, 609.0], [757.0, 616.6], [745.0, 811.2], [746.0, 742.5], [749.0, 508.6666666666667], [751.0, 798.0], [769.0, 700.0], [768.0, 636.5], [771.0, 509.5], [773.0, 700.3333333333334], [777.0, 625.0], [779.0, 593.0], [780.0, 778.0], [781.0, 831.0], [783.0, 491.5], [784.0, 744.0], [794.0, 545.0], [787.0, 648.3333333333334], [788.0, 638.5], [790.0, 816.6666666666666], [803.0, 676.0], [801.0, 481.0], [804.0, 2787.3333333333335], [805.0, 876.0], [807.0, 612.25], [808.0, 725.2857142857143], [809.0, 3785.5], [810.0, 1556.857142857143], [811.0, 550.0], [812.0, 261.0], [814.0, 463.5], [816.0, 741.5], [827.0, 943.3333333333333], [828.0, 7407.0], [829.0, 646.0], [824.0, 2545.5], [825.0, 5405.666666666666], [826.0, 3973.0], [817.0, 3410.0], [819.0, 676.0], [820.0, 1096.5], [821.0, 970.0], [823.0, 7267.0], [836.0, 841.1666666666666], [832.0, 653.0], [835.0, 3755.0], [839.0, 3011.0], [838.0, 154.0], [857.0, 298.0], [860.0, 7289.0], [859.0, 407.0], [862.0, 375.0], [861.0, 7781.0], [840.0, 783.6666666666666], [841.0, 565.0], [844.0, 652.75], [843.0, 4059.0], [845.0, 7302.0], [848.0, 605.8], [849.0, 834.5], [854.0, 4458.2], [851.0, 7287.0], [892.0, 4570.0], [895.0, 646.0], [888.0, 2818.666666666667], [886.0, 34.0], [884.0, 7216.0], [881.0, 7249.0], [879.0, 3263.8], [873.0, 7805.0], [871.0, 7239.0], [869.0, 7693.0], [867.0, 7498.5], [866.0, 8965.0], [864.0, 8082.0], [926.0, 7062.0], [927.0, 100.0], [924.0, 7033.0], [923.0, 3891.0], [922.0, 198.0], [920.0, 2487.666666666667], [910.0, 3958.0], [897.0, 267.0], [896.0, 3562.0], [902.0, 415.0], [899.0, 7121.0], [908.0, 7150.0], [906.0, 3596.0], [918.0, 7461.0], [914.0, 7442.0], [912.0, 7072.0], [959.0, 7006.0], [958.0, 345.0], [949.0, 7686.0], [948.0, 7279.0], [986.0, 8789.0], [977.0, 7081.0], [989.0, 33.0], [991.0, 7549.0], [976.0, 231.0], [987.0, 7652.0], [985.0, 7264.0], [967.0, 578.0], [966.0, 270.0], [964.0, 346.0], [963.0, 401.0], [962.0, 4770.333333333333], [961.0, 6636.428571428572], [960.0, 5024.333333333334], [975.0, 3712.0], [974.0, 7307.0], [968.0, 2768.6666666666665], [982.0, 4534.099999999999], [979.0, 8833.0], [978.0, 7944.333333333333], [1000.0, 7144.939285714285], [997.0, 7063.0], [995.0, 4893.333333333334], [994.0, 3934.5]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[672.4876923076926, 4617.104102564108]], "isOverall": false, "label": "MQTT Connect -Aggregated", "isController": false}, {"data": [[894.0, 25.0], [892.0, 25.0], [891.0, 31.25], [888.0, 18.0], [882.0, 25.0], [880.0, 26.0], [873.0, 27.0], [922.0, 28.0], [927.0, 39.666666666666664], [924.0, 39.4], [923.0, 30.90909090909091], [921.0, 29.0], [903.0, 28.0], [900.0, 26.0], [899.0, 22.0], [898.0, 22.0], [897.0, 26.5], [896.0, 28.5], [914.0, 29.0], [912.0, 21.0], [911.0, 22.8], [908.0, 27.999999999999996], [907.0, 30.0], [906.0, 28.75], [955.0, 21.0], [947.0, 44.0], [945.0, 23.0], [933.0, 27.5], [932.0, 48.0], [987.0, 23.0], [970.0, 29.0], [967.0, 31.0], [966.0, 27.0], [1000.0, 141.71137724550886], [999.0, 26.71428571428571], [995.0, 32.9]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[990.9516806722689, 127.93697478991591]], "isOverall": false, "label": "MQTT DisConnect-Aggregated", "isController": false}, {"data": [[615.0, 0.0], [671.0, 0.0], [700.0, 0.0625], [697.0, 0.0], [694.0, 0.0], [676.0, 0.0], [675.0, 0.0], [674.0, 0.0], [732.0, 0.0], [723.0, 0.0], [717.0, 0.0], [716.0, 0.0], [714.0, 0.0], [707.0, 0.0], [791.0, 0.0], [785.0, 0.0], [784.0, 0.0], [783.0, 0.0], [782.0, 0.0], [781.0, 0.0], [777.0, 0.0], [774.0, 0.0], [823.0, 0.0], [816.0, 0.0], [815.0, 0.0], [807.0, 0.0], [803.0, 0.0], [861.0, 0.0], [850.0, 0.0], [848.0, 0.0], [843.0, 0.0], [835.0, 0.0], [834.0, 0.0], [833.0, 0.0], [892.0, 0.0], [891.0, 0.0], [888.0, 0.0], [883.0, 0.0], [880.0, 0.0], [871.0, 0.0], [925.0, 0.0], [927.0, 0.0], [923.0, 0.0], [922.0, 0.0], [918.0, 0.0], [914.0, 0.0], [912.0, 0.0], [911.0, 0.0], [898.0, 0.0], [896.0, 0.0], [908.0, 0.0], [907.0, 0.0], [906.0, 0.0], [952.0, 0.0], [950.0, 0.0], [945.0, 0.0], [966.0, 0.0], [991.0, 0.0], [989.0, 0.0], [982.0, 0.0], [981.0, 0.0], [980.0, 0.0], [974.0, 0.0], [968.0, 0.0], [963.0, 0.0], [961.0, 0.0], [960.0, 0.0], [1000.0, 0.0], [999.0, 0.0], [998.0, 0.0], [997.0, 0.0], [995.0, 0.0], [994.0, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}, {"data": [[962.5361284567357, 8.920606601248882E-4]], "isOverall": false, "label": "MQTT Sub Sampler-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.65473298E12, "maxY": 1344.1333333333334, "series": [{"data": [[1.65473298E12, 1344.1333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65473298E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473298E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8.920606601248882E-4, "minX": 1.65473298E12, "maxY": 4617.104102564108, "series": [{"data": [[1.65473298E12, 4617.104102564108]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[1.65473298E12, 127.93697478991591]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.65473298E12, 8.920606601248882E-4]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473298E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65473298E12, "maxY": 4.9E-324, "series": [{"data": [[1.65473298E12, 0.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[1.65473298E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.65473298E12, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473298E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65473298E12, "maxY": 4.9E-324, "series": [{"data": [[1.65473298E12, 0.0]], "isOverall": false, "label": "MQTT Connect ", "isController": false}, {"data": [[1.65473298E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.65473298E12, 0.0]], "isOverall": false, "label": "MQTT Sub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473298E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65473298E12, "maxY": 7331.0, "series": [{"data": [[1.65473298E12, 7331.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65473298E12, 7160.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65473298E12, 7244.71]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65473298E12, 7183.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65473298E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65473298E12, 45.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473298E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 9538.0, "series": [{"data": [[1.0, 3121.0], [2.0, 14.5], [1253.0, 26.0], [726.0, 78.0], [755.0, 31.0], [399.0, 7175.0], [202.0, 788.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[267.0, 7325.0], [1253.0, 0.0], [399.0, 0.0], [196.0, 8480.5], [215.0, 9538.0], [7.0, 3430.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1253.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4.9E-324, "series": [{"data": [[1.0, 0.0], [2.0, 0.0], [1253.0, 0.0], [726.0, 0.0], [755.0, 0.0], [399.0, 0.0], [202.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[267.0, 0.0], [1253.0, 0.0], [399.0, 0.0], [196.0, 0.0], [215.0, 0.0], [7.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1253.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 67.05, "minX": 1.65473298E12, "maxY": 67.05, "series": [{"data": [[1.65473298E12, 67.05]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473298E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.7666666666666666, "minX": 1.65473298E12, "maxY": 50.46666666666667, "series": [{"data": [[1.65473298E12, 50.46666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65473298E12, 2.7666666666666666]], "isOverall": false, "label": "501", "isController": false}, {"data": [[1.65473298E12, 13.816666666666666]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65473298E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.65473298E12, "maxY": 18.683333333333334, "series": [{"data": [[1.65473298E12, 18.683333333333334]], "isOverall": false, "label": "MQTT Connect -success", "isController": false}, {"data": [[1.65473298E12, 13.816666666666666]], "isOverall": false, "label": "MQTT Connect -failure", "isController": false}, {"data": [[1.65473298E12, 15.833333333333334]], "isOverall": false, "label": "MQTT DisConnect-success", "isController": false}, {"data": [[1.65473298E12, 0.03333333333333333]], "isOverall": false, "label": "MQTT DisConnect-failure", "isController": false}, {"data": [[1.65473298E12, 15.95]], "isOverall": false, "label": "MQTT Sub Sampler-success", "isController": false}, {"data": [[1.65473298E12, 2.7333333333333334]], "isOverall": false, "label": "MQTT Sub Sampler-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473298E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.583333333333332, "minX": 1.65473298E12, "maxY": 50.46666666666667, "series": [{"data": [[1.65473298E12, 50.46666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65473298E12, 16.583333333333332]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65473298E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

